# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('___init__', [dirname(__file__)])
        except ImportError:
            import ___init__
            return ___init__
        if fp is not None:
            try:
                _mod = imp.load_module('___init__', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    ___init__ = swig_import_helper()
    del swig_import_helper
else:
    import ___init__
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return ___init__.SwigPyIterator_value(self)
    def incr(self, n=1): return ___init__.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return ___init__.SwigPyIterator_decr(self, n)
    def distance(self, *args): return ___init__.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return ___init__.SwigPyIterator_equal(self, *args)
    def copy(self): return ___init__.SwigPyIterator_copy(self)
    def next(self): return ___init__.SwigPyIterator_next(self)
    def __next__(self): return ___init__.SwigPyIterator___next__(self)
    def previous(self): return ___init__.SwigPyIterator_previous(self)
    def advance(self, *args): return ___init__.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return ___init__.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return ___init__.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return ___init__.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return ___init__.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return ___init__.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return ___init__.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = ___init__.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

################################ BEGINNING OF INCLUDED PYTHON FILE #################################


def __get__repr__(fullname, description):
    lines  = description.split("\n")
    ret    = fullname + "("
    if len(lines) == 0:
        return ret + ")"
    elif len(lines) == 1:
        return ret + lines[0] + ")"
    else:
        indent = len(ret) * " "
        ret += lines[0]
        for line in lines[1:]:
            ret += '\n' + indent + line
        return ret + ")"

def convert_uint32_to_int32(uint32):
    return int(uint32) if uint32 < 2**31 else int(uint32 - 2**32)

def convert_int32_to_uint32(int32):
    return int(int32 & 0xffffffff)

################################### END OF INCLUDED PYTHON FILE ####################################

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.StringVector___nonzero__(self)
    def __bool__(self): return ___init__.StringVector___bool__(self)
    def __len__(self): return ___init__.StringVector___len__(self)
    def pop(self): return ___init__.StringVector_pop(self)
    def __getslice__(self, *args): return ___init__.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.StringVector___setitem__(self, *args)
    def append(self, *args): return ___init__.StringVector_append(self, *args)
    def empty(self): return ___init__.StringVector_empty(self)
    def size(self): return ___init__.StringVector_size(self)
    def clear(self): return ___init__.StringVector_clear(self)
    def swap(self, *args): return ___init__.StringVector_swap(self, *args)
    def get_allocator(self): return ___init__.StringVector_get_allocator(self)
    def begin(self): return ___init__.StringVector_begin(self)
    def end(self): return ___init__.StringVector_end(self)
    def rbegin(self): return ___init__.StringVector_rbegin(self)
    def rend(self): return ___init__.StringVector_rend(self)
    def pop_back(self): return ___init__.StringVector_pop_back(self)
    def erase(self, *args): return ___init__.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.StringVector_push_back(self, *args)
    def front(self): return ___init__.StringVector_front(self)
    def back(self): return ___init__.StringVector_back(self)
    def assign(self, *args): return ___init__.StringVector_assign(self, *args)
    def resize(self, *args): return ___init__.StringVector_resize(self, *args)
    def insert(self, *args): return ___init__.StringVector_insert(self, *args)
    def reserve(self, *args): return ___init__.StringVector_reserve(self, *args)
    def capacity(self): return ___init__.StringVector_capacity(self)
    __swig_destroy__ = ___init__.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = ___init__.StringVector_swigregister
StringVector_swigregister(StringVector)

class UInt32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UInt32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UInt32Vector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.UInt32Vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.UInt32Vector___nonzero__(self)
    def __bool__(self): return ___init__.UInt32Vector___bool__(self)
    def __len__(self): return ___init__.UInt32Vector___len__(self)
    def pop(self): return ___init__.UInt32Vector_pop(self)
    def __getslice__(self, *args): return ___init__.UInt32Vector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.UInt32Vector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.UInt32Vector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.UInt32Vector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.UInt32Vector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.UInt32Vector___setitem__(self, *args)
    def append(self, *args): return ___init__.UInt32Vector_append(self, *args)
    def empty(self): return ___init__.UInt32Vector_empty(self)
    def size(self): return ___init__.UInt32Vector_size(self)
    def clear(self): return ___init__.UInt32Vector_clear(self)
    def swap(self, *args): return ___init__.UInt32Vector_swap(self, *args)
    def get_allocator(self): return ___init__.UInt32Vector_get_allocator(self)
    def begin(self): return ___init__.UInt32Vector_begin(self)
    def end(self): return ___init__.UInt32Vector_end(self)
    def rbegin(self): return ___init__.UInt32Vector_rbegin(self)
    def rend(self): return ___init__.UInt32Vector_rend(self)
    def pop_back(self): return ___init__.UInt32Vector_pop_back(self)
    def erase(self, *args): return ___init__.UInt32Vector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_UInt32Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.UInt32Vector_push_back(self, *args)
    def front(self): return ___init__.UInt32Vector_front(self)
    def back(self): return ___init__.UInt32Vector_back(self)
    def assign(self, *args): return ___init__.UInt32Vector_assign(self, *args)
    def resize(self, *args): return ___init__.UInt32Vector_resize(self, *args)
    def insert(self, *args): return ___init__.UInt32Vector_insert(self, *args)
    def reserve(self, *args): return ___init__.UInt32Vector_reserve(self, *args)
    def capacity(self): return ___init__.UInt32Vector_capacity(self)
    __swig_destroy__ = ___init__.delete_UInt32Vector
    __del__ = lambda self : None;
UInt32Vector_swigregister = ___init__.UInt32Vector_swigregister
UInt32Vector_swigregister(UInt32Vector)


def initializeUaf():
  return ___init__.initializeUaf()
initializeUaf = ___init__.initializeUaf
class ByteStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteStringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.ByteStringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.ByteStringVector___nonzero__(self)
    def __bool__(self): return ___init__.ByteStringVector___bool__(self)
    def __len__(self): return ___init__.ByteStringVector___len__(self)
    def pop(self): return ___init__.ByteStringVector_pop(self)
    def __getslice__(self, *args): return ___init__.ByteStringVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.ByteStringVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.ByteStringVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.ByteStringVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.ByteStringVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.ByteStringVector___setitem__(self, *args)
    def append(self, *args): return ___init__.ByteStringVector_append(self, *args)
    def empty(self): return ___init__.ByteStringVector_empty(self)
    def size(self): return ___init__.ByteStringVector_size(self)
    def clear(self): return ___init__.ByteStringVector_clear(self)
    def swap(self, *args): return ___init__.ByteStringVector_swap(self, *args)
    def get_allocator(self): return ___init__.ByteStringVector_get_allocator(self)
    def begin(self): return ___init__.ByteStringVector_begin(self)
    def end(self): return ___init__.ByteStringVector_end(self)
    def rbegin(self): return ___init__.ByteStringVector_rbegin(self)
    def rend(self): return ___init__.ByteStringVector_rend(self)
    def pop_back(self): return ___init__.ByteStringVector_pop_back(self)
    def erase(self, *args): return ___init__.ByteStringVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ByteStringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.ByteStringVector_push_back(self, *args)
    def front(self): return ___init__.ByteStringVector_front(self)
    def back(self): return ___init__.ByteStringVector_back(self)
    def assign(self, *args): return ___init__.ByteStringVector_assign(self, *args)
    def resize(self, *args): return ___init__.ByteStringVector_resize(self, *args)
    def insert(self, *args): return ___init__.ByteStringVector_insert(self, *args)
    def reserve(self, *args): return ___init__.ByteStringVector_reserve(self, *args)
    def capacity(self): return ___init__.ByteStringVector_capacity(self)
    __swig_destroy__ = ___init__.delete_ByteStringVector
    __del__ = lambda self : None;
ByteStringVector_swigregister = ___init__.ByteStringVector_swigregister
ByteStringVector_swigregister(ByteStringVector)
cvar = ___init__.cvar
REQUESTHANDLE_NOT_ASSIGNED = cvar.REQUESTHANDLE_NOT_ASSIGNED
REQUESTHANDLE_MAX = cvar.REQUESTHANDLE_MAX
CLIENTHANDLE_NOT_ASSIGNED = cvar.CLIENTHANDLE_NOT_ASSIGNED
CLIENTHANDLE_MAX = cvar.CLIENTHANDLE_MAX

import loglevels
import applicationtypes
import attributeids
import constants
import usertokentypes
import nodeididentifiertypes
import statuscodes
import opcuatypes
import opcuaidentifiers
import opcuastatuscodes
import primitives
import securitypolicies
import messagesecuritymodes
import monitoringmodes
import browsedirections
import nodeclasses
import timestampstoreturn
class LocalizedText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalizedText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalizedText, name)
    def __init__(self, *args): 
        this = ___init__.new_LocalizedText(*args)
        try: self.this.append(this)
        except: self.this = this
    def text(self): return ___init__.LocalizedText_text(self)
    def locale(self): return ___init__.LocalizedText_locale(self)
    def __str__(self): return ___init__.LocalizedText___str__(self)
    def toFullString(self): return ___init__.LocalizedText_toFullString(self)
    def __repr__(self): return ___init__.LocalizedText___repr__(self)
    def __eq__(self, *args): return ___init__.LocalizedText___eq__(self, *args)
    def __ne__(self, *args): return ___init__.LocalizedText___ne__(self, *args)
    def __lt__(self, *args): return ___init__.LocalizedText___lt__(self, *args)
    def __gt__(self, *args): return ___init__.LocalizedText___gt__(self, *args)
    def __ge__(self, *args): return ___init__.LocalizedText___ge__(self, *args)
    def __le__(self, *args): return ___init__.LocalizedText___le__(self, *args)
    __swig_destroy__ = ___init__.delete_LocalizedText
    __del__ = lambda self : None;
LocalizedText_swigregister = ___init__.LocalizedText_swigregister
LocalizedText_swigregister(LocalizedText)

class ApplicationDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationDescription, name)
    __swig_setmethods__["applicationUri"] = ___init__.ApplicationDescription_applicationUri_set
    __swig_getmethods__["applicationUri"] = ___init__.ApplicationDescription_applicationUri_get
    if _newclass:applicationUri = _swig_property(___init__.ApplicationDescription_applicationUri_get, ___init__.ApplicationDescription_applicationUri_set)
    __swig_setmethods__["productUri"] = ___init__.ApplicationDescription_productUri_set
    __swig_getmethods__["productUri"] = ___init__.ApplicationDescription_productUri_get
    if _newclass:productUri = _swig_property(___init__.ApplicationDescription_productUri_get, ___init__.ApplicationDescription_productUri_set)
    __swig_setmethods__["applicationName"] = ___init__.ApplicationDescription_applicationName_set
    __swig_getmethods__["applicationName"] = ___init__.ApplicationDescription_applicationName_get
    if _newclass:applicationName = _swig_property(___init__.ApplicationDescription_applicationName_get, ___init__.ApplicationDescription_applicationName_set)
    __swig_setmethods__["applicationType"] = ___init__.ApplicationDescription_applicationType_set
    __swig_getmethods__["applicationType"] = ___init__.ApplicationDescription_applicationType_get
    if _newclass:applicationType = _swig_property(___init__.ApplicationDescription_applicationType_get, ___init__.ApplicationDescription_applicationType_set)
    __swig_setmethods__["gatewayServerUri"] = ___init__.ApplicationDescription_gatewayServerUri_set
    __swig_getmethods__["gatewayServerUri"] = ___init__.ApplicationDescription_gatewayServerUri_get
    if _newclass:gatewayServerUri = _swig_property(___init__.ApplicationDescription_gatewayServerUri_get, ___init__.ApplicationDescription_gatewayServerUri_set)
    __swig_setmethods__["discoveryProfileUri"] = ___init__.ApplicationDescription_discoveryProfileUri_set
    __swig_getmethods__["discoveryProfileUri"] = ___init__.ApplicationDescription_discoveryProfileUri_get
    if _newclass:discoveryProfileUri = _swig_property(___init__.ApplicationDescription_discoveryProfileUri_get, ___init__.ApplicationDescription_discoveryProfileUri_set)
    __swig_setmethods__["discoveryUrls"] = ___init__.ApplicationDescription_discoveryUrls_set
    __swig_getmethods__["discoveryUrls"] = ___init__.ApplicationDescription_discoveryUrls_get
    if _newclass:discoveryUrls = _swig_property(___init__.ApplicationDescription_discoveryUrls_get, ___init__.ApplicationDescription_discoveryUrls_set)
    def isEmpty(self): return ___init__.ApplicationDescription_isEmpty(self)
    def __str__(self, indent="", colon=11): return ___init__.ApplicationDescription___str__(self, indent, colon)
    def __repr__(self): return ___init__.ApplicationDescription___repr__(self)
    def __eq__(self, *args): return ___init__.ApplicationDescription___eq__(self, *args)
    def __ne__(self, *args): return ___init__.ApplicationDescription___ne__(self, *args)
    def __lt__(self, *args): return ___init__.ApplicationDescription___lt__(self, *args)
    def __gt__(self, *args): return ___init__.ApplicationDescription___gt__(self, *args)
    def __ge__(self, *args): return ___init__.ApplicationDescription___ge__(self, *args)
    def __le__(self, *args): return ___init__.ApplicationDescription___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ApplicationDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ApplicationDescription
    __del__ = lambda self : None;
ApplicationDescription_swigregister = ___init__.ApplicationDescription_swigregister
ApplicationDescription_swigregister(ApplicationDescription)

class ApplicationDescriptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationDescriptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationDescriptionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.ApplicationDescriptionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.ApplicationDescriptionVector___nonzero__(self)
    def __bool__(self): return ___init__.ApplicationDescriptionVector___bool__(self)
    def __len__(self): return ___init__.ApplicationDescriptionVector___len__(self)
    def pop(self): return ___init__.ApplicationDescriptionVector_pop(self)
    def __getslice__(self, *args): return ___init__.ApplicationDescriptionVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.ApplicationDescriptionVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.ApplicationDescriptionVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.ApplicationDescriptionVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.ApplicationDescriptionVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.ApplicationDescriptionVector___setitem__(self, *args)
    def append(self, *args): return ___init__.ApplicationDescriptionVector_append(self, *args)
    def empty(self): return ___init__.ApplicationDescriptionVector_empty(self)
    def size(self): return ___init__.ApplicationDescriptionVector_size(self)
    def clear(self): return ___init__.ApplicationDescriptionVector_clear(self)
    def swap(self, *args): return ___init__.ApplicationDescriptionVector_swap(self, *args)
    def get_allocator(self): return ___init__.ApplicationDescriptionVector_get_allocator(self)
    def begin(self): return ___init__.ApplicationDescriptionVector_begin(self)
    def end(self): return ___init__.ApplicationDescriptionVector_end(self)
    def rbegin(self): return ___init__.ApplicationDescriptionVector_rbegin(self)
    def rend(self): return ___init__.ApplicationDescriptionVector_rend(self)
    def pop_back(self): return ___init__.ApplicationDescriptionVector_pop_back(self)
    def erase(self, *args): return ___init__.ApplicationDescriptionVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ApplicationDescriptionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.ApplicationDescriptionVector_push_back(self, *args)
    def front(self): return ___init__.ApplicationDescriptionVector_front(self)
    def back(self): return ___init__.ApplicationDescriptionVector_back(self)
    def assign(self, *args): return ___init__.ApplicationDescriptionVector_assign(self, *args)
    def resize(self, *args): return ___init__.ApplicationDescriptionVector_resize(self, *args)
    def insert(self, *args): return ___init__.ApplicationDescriptionVector_insert(self, *args)
    def reserve(self, *args): return ___init__.ApplicationDescriptionVector_reserve(self, *args)
    def capacity(self): return ___init__.ApplicationDescriptionVector_capacity(self)
    __swig_destroy__ = ___init__.delete_ApplicationDescriptionVector
    __del__ = lambda self : None;
ApplicationDescriptionVector_swigregister = ___init__.ApplicationDescriptionVector_swigregister
ApplicationDescriptionVector_swigregister(ApplicationDescriptionVector)

class Guid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Guid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Guid, name)
    def __str__(self): return ___init__.Guid___str__(self)
    def __repr__(self): return ___init__.Guid___repr__(self)
    def __eq__(self, *args): return ___init__.Guid___eq__(self, *args)
    def __ne__(self, *args): return ___init__.Guid___ne__(self, *args)
    def __lt__(self, *args): return ___init__.Guid___lt__(self, *args)
    def __gt__(self, *args): return ___init__.Guid___gt__(self, *args)
    def __ge__(self, *args): return ___init__.Guid___ge__(self, *args)
    def __le__(self, *args): return ___init__.Guid___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_Guid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Guid
    __del__ = lambda self : None;
Guid_swigregister = ___init__.Guid_swigregister
Guid_swigregister(Guid)

class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __swig_getmethods__["now"] = lambda x: ___init__.DateTime_now
    if _newclass:now = staticmethod(___init__.DateTime_now)
    __swig_getmethods__["fromString"] = lambda x: ___init__.DateTime_fromString
    if _newclass:fromString = staticmethod(___init__.DateTime_fromString)
    __swig_getmethods__["fromTime_t"] = lambda x: ___init__.DateTime_fromTime_t
    if _newclass:fromTime_t = staticmethod(___init__.DateTime_fromTime_t)
    __swig_getmethods__["fromFileTime"] = lambda x: ___init__.DateTime_fromFileTime
    if _newclass:fromFileTime = staticmethod(___init__.DateTime_fromFileTime)
    __swig_getmethods__["sleep"] = lambda x: ___init__.DateTime_sleep
    if _newclass:sleep = staticmethod(___init__.DateTime_sleep)
    __swig_getmethods__["msleep"] = lambda x: ___init__.DateTime_msleep
    if _newclass:msleep = staticmethod(___init__.DateTime_msleep)
    def toFileTime(self): return ___init__.DateTime_toFileTime(self)
    def __str__(self): return ___init__.DateTime___str__(self)
    def toDateString(self): return ___init__.DateTime_toDateString(self)
    def toTimeString(self): return ___init__.DateTime_toTimeString(self)
    def setCtime(self, *args): return ___init__.DateTime_setCtime(self, *args)
    def ctime(self): return ___init__.DateTime_ctime(self)
    def toTime_t(self): return ___init__.DateTime_toTime_t(self)
    def msec(self): return ___init__.DateTime_msec(self)
    def isNull(self): return ___init__.DateTime_isNull(self)
    def daysTo(self, *args): return ___init__.DateTime_daysTo(self, *args)
    def secsTo(self, *args): return ___init__.DateTime_secsTo(self, *args)
    def msecsTo(self, *args): return ___init__.DateTime_msecsTo(self, *args)
    def addSecs(self, *args): return ___init__.DateTime_addSecs(self, *args)
    def addMilliSecs(self, *args): return ___init__.DateTime_addMilliSecs(self, *args)
    def __repr__(self): return ___init__.DateTime___repr__(self)
    def __eq__(self, *args): return ___init__.DateTime___eq__(self, *args)
    def __ne__(self, *args): return ___init__.DateTime___ne__(self, *args)
    def __lt__(self, *args): return ___init__.DateTime___lt__(self, *args)
    def __gt__(self, *args): return ___init__.DateTime___gt__(self, *args)
    def __ge__(self, *args): return ___init__.DateTime___ge__(self, *args)
    def __le__(self, *args): return ___init__.DateTime___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_DateTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_DateTime
    __del__ = lambda self : None;
DateTime_swigregister = ___init__.DateTime_swigregister
DateTime_swigregister(DateTime)

def DateTime_now():
  return ___init__.DateTime_now()
DateTime_now = ___init__.DateTime_now

def DateTime_fromString(*args):
  return ___init__.DateTime_fromString(*args)
DateTime_fromString = ___init__.DateTime_fromString

def DateTime_fromTime_t(*args):
  return ___init__.DateTime_fromTime_t(*args)
DateTime_fromTime_t = ___init__.DateTime_fromTime_t

def DateTime_fromFileTime(*args):
  return ___init__.DateTime_fromFileTime(*args)
DateTime_fromFileTime = ___init__.DateTime_fromFileTime

def DateTime_sleep(*args):
  return ___init__.DateTime_sleep(*args)
DateTime_sleep = ___init__.DateTime_sleep

def DateTime_msleep(*args):
  return ___init__.DateTime_msleep(*args)
DateTime_msleep = ___init__.DateTime_msleep

class DateTimeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTimeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTimeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.DateTimeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.DateTimeVector___nonzero__(self)
    def __bool__(self): return ___init__.DateTimeVector___bool__(self)
    def __len__(self): return ___init__.DateTimeVector___len__(self)
    def pop(self): return ___init__.DateTimeVector_pop(self)
    def __getslice__(self, *args): return ___init__.DateTimeVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.DateTimeVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.DateTimeVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.DateTimeVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.DateTimeVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.DateTimeVector___setitem__(self, *args)
    def append(self, *args): return ___init__.DateTimeVector_append(self, *args)
    def empty(self): return ___init__.DateTimeVector_empty(self)
    def size(self): return ___init__.DateTimeVector_size(self)
    def clear(self): return ___init__.DateTimeVector_clear(self)
    def swap(self, *args): return ___init__.DateTimeVector_swap(self, *args)
    def get_allocator(self): return ___init__.DateTimeVector_get_allocator(self)
    def begin(self): return ___init__.DateTimeVector_begin(self)
    def end(self): return ___init__.DateTimeVector_end(self)
    def rbegin(self): return ___init__.DateTimeVector_rbegin(self)
    def rend(self): return ___init__.DateTimeVector_rend(self)
    def pop_back(self): return ___init__.DateTimeVector_pop_back(self)
    def erase(self, *args): return ___init__.DateTimeVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_DateTimeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.DateTimeVector_push_back(self, *args)
    def front(self): return ___init__.DateTimeVector_front(self)
    def back(self): return ___init__.DateTimeVector_back(self)
    def assign(self, *args): return ___init__.DateTimeVector_assign(self, *args)
    def resize(self, *args): return ___init__.DateTimeVector_resize(self, *args)
    def insert(self, *args): return ___init__.DateTimeVector_insert(self, *args)
    def reserve(self, *args): return ___init__.DateTimeVector_reserve(self, *args)
    def capacity(self): return ___init__.DateTimeVector_capacity(self)
    __swig_destroy__ = ___init__.delete_DateTimeVector
    __del__ = lambda self : None;
DateTimeVector_swigregister = ___init__.DateTimeVector_swigregister
DateTimeVector_swigregister(DateTimeVector)

class Mask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mask, name)
    def resize(self, *args): return ___init__.Mask_resize(self, *args)
    def size(self): return ___init__.Mask_size(self)
    def setCount(self): return ___init__.Mask_setCount(self)
    def unsetCount(self): return ___init__.Mask_unsetCount(self)
    def isSet(self, *args): return ___init__.Mask_isSet(self, *args)
    def isUnset(self, *args): return ___init__.Mask_isUnset(self, *args)
    def set(self, *args): return ___init__.Mask_set(self, *args)
    def unset(self, *args): return ___init__.Mask_unset(self, *args)
    def __str__(self): return ___init__.Mask___str__(self)
    def __and__(self, *args): return ___init__.Mask___and__(self, *args)
    def __repr__(self): return ___init__.Mask___repr__(self)
    def __eq__(self, *args): return ___init__.Mask___eq__(self, *args)
    def __ne__(self, *args): return ___init__.Mask___ne__(self, *args)
    def __lt__(self, *args): return ___init__.Mask___lt__(self, *args)
    def __gt__(self, *args): return ___init__.Mask___gt__(self, *args)
    def __ge__(self, *args): return ___init__.Mask___ge__(self, *args)
    def __le__(self, *args): return ___init__.Mask___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_Mask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Mask
    __del__ = lambda self : None;
Mask_swigregister = ___init__.Mask_swigregister
Mask_swigregister(Mask)

class ModificationInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModificationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModificationInfo, name)
    HistoryUpdateType_Insert = ___init__.ModificationInfo_HistoryUpdateType_Insert
    HistoryUpdateType_Replace = ___init__.ModificationInfo_HistoryUpdateType_Replace
    HistoryUpdateType_Update = ___init__.ModificationInfo_HistoryUpdateType_Update
    HistoryUpdateType_Delete = ___init__.ModificationInfo_HistoryUpdateType_Delete
    __swig_setmethods__["modificationTime"] = ___init__.ModificationInfo_modificationTime_set
    __swig_getmethods__["modificationTime"] = ___init__.ModificationInfo_modificationTime_get
    if _newclass:modificationTime = _swig_property(___init__.ModificationInfo_modificationTime_get, ___init__.ModificationInfo_modificationTime_set)
    __swig_setmethods__["historyUpdateType"] = ___init__.ModificationInfo_historyUpdateType_set
    __swig_getmethods__["historyUpdateType"] = ___init__.ModificationInfo_historyUpdateType_get
    if _newclass:historyUpdateType = _swig_property(___init__.ModificationInfo_historyUpdateType_get, ___init__.ModificationInfo_historyUpdateType_set)
    __swig_setmethods__["userName"] = ___init__.ModificationInfo_userName_set
    __swig_getmethods__["userName"] = ___init__.ModificationInfo_userName_get
    if _newclass:userName = _swig_property(___init__.ModificationInfo_userName_get, ___init__.ModificationInfo_userName_set)
    def __str__(self, indent="", colon=21): return ___init__.ModificationInfo___str__(self, indent, colon)
    def toCompactString(self): return ___init__.ModificationInfo_toCompactString(self)
    def __repr__(self): return ___init__.ModificationInfo___repr__(self)
    def __eq__(self, *args): return ___init__.ModificationInfo___eq__(self, *args)
    def __ne__(self, *args): return ___init__.ModificationInfo___ne__(self, *args)
    def __lt__(self, *args): return ___init__.ModificationInfo___lt__(self, *args)
    def __gt__(self, *args): return ___init__.ModificationInfo___gt__(self, *args)
    def __ge__(self, *args): return ___init__.ModificationInfo___ge__(self, *args)
    def __le__(self, *args): return ___init__.ModificationInfo___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ModificationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ModificationInfo
    __del__ = lambda self : None;
ModificationInfo_swigregister = ___init__.ModificationInfo_swigregister
ModificationInfo_swigregister(ModificationInfo)

class ModificationInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModificationInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModificationInfoVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.ModificationInfoVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.ModificationInfoVector___nonzero__(self)
    def __bool__(self): return ___init__.ModificationInfoVector___bool__(self)
    def __len__(self): return ___init__.ModificationInfoVector___len__(self)
    def pop(self): return ___init__.ModificationInfoVector_pop(self)
    def __getslice__(self, *args): return ___init__.ModificationInfoVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.ModificationInfoVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.ModificationInfoVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.ModificationInfoVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.ModificationInfoVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.ModificationInfoVector___setitem__(self, *args)
    def append(self, *args): return ___init__.ModificationInfoVector_append(self, *args)
    def empty(self): return ___init__.ModificationInfoVector_empty(self)
    def size(self): return ___init__.ModificationInfoVector_size(self)
    def clear(self): return ___init__.ModificationInfoVector_clear(self)
    def swap(self, *args): return ___init__.ModificationInfoVector_swap(self, *args)
    def get_allocator(self): return ___init__.ModificationInfoVector_get_allocator(self)
    def begin(self): return ___init__.ModificationInfoVector_begin(self)
    def end(self): return ___init__.ModificationInfoVector_end(self)
    def rbegin(self): return ___init__.ModificationInfoVector_rbegin(self)
    def rend(self): return ___init__.ModificationInfoVector_rend(self)
    def pop_back(self): return ___init__.ModificationInfoVector_pop_back(self)
    def erase(self, *args): return ___init__.ModificationInfoVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ModificationInfoVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.ModificationInfoVector_push_back(self, *args)
    def front(self): return ___init__.ModificationInfoVector_front(self)
    def back(self): return ___init__.ModificationInfoVector_back(self)
    def assign(self, *args): return ___init__.ModificationInfoVector_assign(self, *args)
    def resize(self, *args): return ___init__.ModificationInfoVector_resize(self, *args)
    def insert(self, *args): return ___init__.ModificationInfoVector_insert(self, *args)
    def reserve(self, *args): return ___init__.ModificationInfoVector_reserve(self, *args)
    def capacity(self): return ___init__.ModificationInfoVector_capacity(self)
    __swig_destroy__ = ___init__.delete_ModificationInfoVector
    __del__ = lambda self : None;
ModificationInfoVector_swigregister = ___init__.ModificationInfoVector_swigregister
ModificationInfoVector_swigregister(ModificationInfoVector)

class Status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Status, name)
    def setStatus(self, *args): return ___init__.Status_setStatus(self, *args)
    def addDiagnostic(self, *args): return ___init__.Status_addDiagnostic(self, *args)
    def additionalDiagnostics(self, *args): return ___init__.Status_additionalDiagnostics(self, *args)
    def setOpcUaStatusCode(self, *args): return ___init__.Status_setOpcUaStatusCode(self, *args)
    def hasSpecificOpcUaStatusCode(self): return ___init__.Status_hasSpecificOpcUaStatusCode(self)
    def opcUaStatusCodeUnsigned(self): return ___init__.Status_opcUaStatusCodeUnsigned(self)
    def setGood(self, *args): return ___init__.Status_setGood(self, *args)
    def setUncertain(self, *args): return ___init__.Status_setUncertain(self, *args)
    def isGood(self): return ___init__.Status_isGood(self)
    def isNotGood(self): return ___init__.Status_isNotGood(self)
    def isUncertain(self): return ___init__.Status_isUncertain(self)
    def isNotUncertain(self): return ___init__.Status_isNotUncertain(self)
    def isBad(self): return ___init__.Status_isBad(self)
    def isNotBad(self): return ___init__.Status_isNotBad(self)
    def statusCode(self): return ___init__.Status_statusCode(self)
    def statusCodeName(self): return ___init__.Status_statusCodeName(self)
    def summarize(self, *args): return ___init__.Status_summarize(self, *args)
    def __str__(self): return ___init__.Status___str__(self)
    def opcUaStatusCode(self):
        return convert_uint32_to_int32(self.opcUaStatusCodeUnsigned())

    def __repr__(self): return ___init__.Status___repr__(self)
    def __eq__(self, *args): return ___init__.Status___eq__(self, *args)
    def __ne__(self, *args): return ___init__.Status___ne__(self, *args)
    def __lt__(self, *args): return ___init__.Status___lt__(self, *args)
    def __gt__(self, *args): return ___init__.Status___gt__(self, *args)
    def __ge__(self, *args): return ___init__.Status___ge__(self, *args)
    def __le__(self, *args): return ___init__.Status___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_Status(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Status
    __del__ = lambda self : None;
Status_swigregister = ___init__.Status_swigregister
Status_swigregister(Status)

class StatusVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatusVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.StatusVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.StatusVector___nonzero__(self)
    def __bool__(self): return ___init__.StatusVector___bool__(self)
    def __len__(self): return ___init__.StatusVector___len__(self)
    def pop(self): return ___init__.StatusVector_pop(self)
    def __getslice__(self, *args): return ___init__.StatusVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.StatusVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.StatusVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.StatusVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.StatusVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.StatusVector___setitem__(self, *args)
    def append(self, *args): return ___init__.StatusVector_append(self, *args)
    def empty(self): return ___init__.StatusVector_empty(self)
    def size(self): return ___init__.StatusVector_size(self)
    def clear(self): return ___init__.StatusVector_clear(self)
    def swap(self, *args): return ___init__.StatusVector_swap(self, *args)
    def get_allocator(self): return ___init__.StatusVector_get_allocator(self)
    def begin(self): return ___init__.StatusVector_begin(self)
    def end(self): return ___init__.StatusVector_end(self)
    def rbegin(self): return ___init__.StatusVector_rbegin(self)
    def rend(self): return ___init__.StatusVector_rend(self)
    def pop_back(self): return ___init__.StatusVector_pop_back(self)
    def erase(self, *args): return ___init__.StatusVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_StatusVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.StatusVector_push_back(self, *args)
    def front(self): return ___init__.StatusVector_front(self)
    def back(self): return ___init__.StatusVector_back(self)
    def assign(self, *args): return ___init__.StatusVector_assign(self, *args)
    def resize(self, *args): return ___init__.StatusVector_resize(self, *args)
    def insert(self, *args): return ___init__.StatusVector_insert(self, *args)
    def reserve(self, *args): return ___init__.StatusVector_reserve(self, *args)
    def capacity(self): return ___init__.StatusVector_capacity(self)
    __swig_destroy__ = ___init__.delete_StatusVector
    __del__ = lambda self : None;
StatusVector_swigregister = ___init__.StatusVector_swigregister
StatusVector_swigregister(StatusVector)

class LogMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogMessage, name)
    __swig_setmethods__["ctime"] = ___init__.LogMessage_ctime_set
    __swig_getmethods__["ctime"] = ___init__.LogMessage_ctime_get
    if _newclass:ctime = _swig_property(___init__.LogMessage_ctime_get, ___init__.LogMessage_ctime_set)
    __swig_setmethods__["msec"] = ___init__.LogMessage_msec_set
    __swig_getmethods__["msec"] = ___init__.LogMessage_msec_get
    if _newclass:msec = _swig_property(___init__.LogMessage_msec_get, ___init__.LogMessage_msec_set)
    __swig_setmethods__["level"] = ___init__.LogMessage_level_set
    __swig_getmethods__["level"] = ___init__.LogMessage_level_get
    if _newclass:level = _swig_property(___init__.LogMessage_level_get, ___init__.LogMessage_level_set)
    __swig_setmethods__["applicationName"] = ___init__.LogMessage_applicationName_set
    __swig_getmethods__["applicationName"] = ___init__.LogMessage_applicationName_get
    if _newclass:applicationName = _swig_property(___init__.LogMessage_applicationName_get, ___init__.LogMessage_applicationName_set)
    __swig_setmethods__["loggerName"] = ___init__.LogMessage_loggerName_set
    __swig_getmethods__["loggerName"] = ___init__.LogMessage_loggerName_get
    if _newclass:loggerName = _swig_property(___init__.LogMessage_loggerName_get, ___init__.LogMessage_loggerName_set)
    __swig_setmethods__["message"] = ___init__.LogMessage_message_set
    __swig_getmethods__["message"] = ___init__.LogMessage_message_get
    if _newclass:message = _swig_property(___init__.LogMessage_message_get, ___init__.LogMessage_message_set)
    def __str__(self): return ___init__.LogMessage___str__(self)
    def __repr__(self): return ___init__.LogMessage___repr__(self)
    def __init__(self, *args): 
        this = ___init__.new_LogMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_LogMessage
    __del__ = lambda self : None;
LogMessage_swigregister = ___init__.LogMessage_swigregister
LogMessage_swigregister(LogMessage)

class LoggingInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoggingInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoggingInterface, name)
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_LoggingInterface
    __del__ = lambda self : None;
    def __dispatch_logMessageReceived__(self, *args): return ___init__.LoggingInterface___dispatch_logMessageReceived__(self, *args)
    def __init__(self): 
        this = ___init__.new_LoggingInterface()
        try: self.this.append(this)
        except: self.this = this
LoggingInterface_swigregister = ___init__.LoggingInterface_swigregister
LoggingInterface_swigregister(LoggingInterface)

class NodeIdIdentifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeIdIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeIdIdentifier, name)
    def __init__(self, *args): 
        this = ___init__.new_NodeIdIdentifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def isNull(self): return ___init__.NodeIdIdentifier_isNull(self)
    __swig_setmethods__["type"] = ___init__.NodeIdIdentifier_type_set
    __swig_getmethods__["type"] = ___init__.NodeIdIdentifier_type_get
    if _newclass:type = _swig_property(___init__.NodeIdIdentifier_type_get, ___init__.NodeIdIdentifier_type_set)
    __swig_setmethods__["idString"] = ___init__.NodeIdIdentifier_idString_set
    __swig_getmethods__["idString"] = ___init__.NodeIdIdentifier_idString_get
    if _newclass:idString = _swig_property(___init__.NodeIdIdentifier_idString_get, ___init__.NodeIdIdentifier_idString_set)
    __swig_setmethods__["idNumeric"] = ___init__.NodeIdIdentifier_idNumeric_set
    __swig_getmethods__["idNumeric"] = ___init__.NodeIdIdentifier_idNumeric_get
    if _newclass:idNumeric = _swig_property(___init__.NodeIdIdentifier_idNumeric_get, ___init__.NodeIdIdentifier_idNumeric_set)
    __swig_setmethods__["idGuid"] = ___init__.NodeIdIdentifier_idGuid_set
    __swig_getmethods__["idGuid"] = ___init__.NodeIdIdentifier_idGuid_get
    if _newclass:idGuid = _swig_property(___init__.NodeIdIdentifier_idGuid_get, ___init__.NodeIdIdentifier_idGuid_set)
    __swig_setmethods__["idOpaque"] = ___init__.NodeIdIdentifier_idOpaque_set
    __swig_getmethods__["idOpaque"] = ___init__.NodeIdIdentifier_idOpaque_get
    if _newclass:idOpaque = _swig_property(___init__.NodeIdIdentifier_idOpaque_get, ___init__.NodeIdIdentifier_idOpaque_set)
    def __str__(self): return ___init__.NodeIdIdentifier___str__(self)
    def __repr__(self): return ___init__.NodeIdIdentifier___repr__(self)
    def __eq__(self, *args): return ___init__.NodeIdIdentifier___eq__(self, *args)
    def __ne__(self, *args): return ___init__.NodeIdIdentifier___ne__(self, *args)
    def __lt__(self, *args): return ___init__.NodeIdIdentifier___lt__(self, *args)
    def __gt__(self, *args): return ___init__.NodeIdIdentifier___gt__(self, *args)
    def __ge__(self, *args): return ___init__.NodeIdIdentifier___ge__(self, *args)
    def __le__(self, *args): return ___init__.NodeIdIdentifier___le__(self, *args)
    __swig_destroy__ = ___init__.delete_NodeIdIdentifier
    __del__ = lambda self : None;
NodeIdIdentifier_swigregister = ___init__.NodeIdIdentifier_swigregister
NodeIdIdentifier_swigregister(NodeIdIdentifier)

class NodeId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeId, name)
    def hasNameSpaceIndex(self): return ___init__.NodeId_hasNameSpaceIndex(self)
    def hasNameSpaceUri(self): return ___init__.NodeId_hasNameSpaceUri(self)
    def nameSpaceIndex(self): return ___init__.NodeId_nameSpaceIndex(self)
    def nameSpaceUri(self): return ___init__.NodeId_nameSpaceUri(self)
    def setNameSpaceIndex(self, *args): return ___init__.NodeId_setNameSpaceIndex(self, *args)
    def setNameSpaceUri(self, *args): return ___init__.NodeId_setNameSpaceUri(self, *args)
    def isNull(self): return ___init__.NodeId_isNull(self)
    def identifier(self): return ___init__.NodeId_identifier(self)
    def __str__(self): return ___init__.NodeId___str__(self)
    def __repr__(self): return ___init__.NodeId___repr__(self)
    def __eq__(self, *args): return ___init__.NodeId___eq__(self, *args)
    def __ne__(self, *args): return ___init__.NodeId___ne__(self, *args)
    def __lt__(self, *args): return ___init__.NodeId___lt__(self, *args)
    def __gt__(self, *args): return ___init__.NodeId___gt__(self, *args)
    def __ge__(self, *args): return ___init__.NodeId___ge__(self, *args)
    def __le__(self, *args): return ___init__.NodeId___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_NodeId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_NodeId
    __del__ = lambda self : None;
NodeId_swigregister = ___init__.NodeId_swigregister
NodeId_swigregister(NodeId)

class ExpandedNodeId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpandedNodeId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpandedNodeId, name)
    def hasServerIndex(self): return ___init__.ExpandedNodeId_hasServerIndex(self)
    def hasServerUri(self): return ___init__.ExpandedNodeId_hasServerUri(self)
    def serverIndex(self): return ___init__.ExpandedNodeId_serverIndex(self)
    def serverUri(self): return ___init__.ExpandedNodeId_serverUri(self)
    def nodeId(self, *args): return ___init__.ExpandedNodeId_nodeId(self, *args)
    def setServerUri(self, *args): return ___init__.ExpandedNodeId_setServerUri(self, *args)
    def __str__(self): return ___init__.ExpandedNodeId___str__(self)
    def __repr__(self): return ___init__.ExpandedNodeId___repr__(self)
    def __eq__(self, *args): return ___init__.ExpandedNodeId___eq__(self, *args)
    def __ne__(self, *args): return ___init__.ExpandedNodeId___ne__(self, *args)
    def __lt__(self, *args): return ___init__.ExpandedNodeId___lt__(self, *args)
    def __gt__(self, *args): return ___init__.ExpandedNodeId___gt__(self, *args)
    def __ge__(self, *args): return ___init__.ExpandedNodeId___ge__(self, *args)
    def __le__(self, *args): return ___init__.ExpandedNodeId___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ExpandedNodeId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ExpandedNodeId
    __del__ = lambda self : None;
ExpandedNodeId_swigregister = ___init__.ExpandedNodeId_swigregister
ExpandedNodeId_swigregister(ExpandedNodeId)

class ExpandedNodeIdVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpandedNodeIdVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpandedNodeIdVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.ExpandedNodeIdVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.ExpandedNodeIdVector___nonzero__(self)
    def __bool__(self): return ___init__.ExpandedNodeIdVector___bool__(self)
    def __len__(self): return ___init__.ExpandedNodeIdVector___len__(self)
    def pop(self): return ___init__.ExpandedNodeIdVector_pop(self)
    def __getslice__(self, *args): return ___init__.ExpandedNodeIdVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.ExpandedNodeIdVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.ExpandedNodeIdVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.ExpandedNodeIdVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.ExpandedNodeIdVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.ExpandedNodeIdVector___setitem__(self, *args)
    def append(self, *args): return ___init__.ExpandedNodeIdVector_append(self, *args)
    def empty(self): return ___init__.ExpandedNodeIdVector_empty(self)
    def size(self): return ___init__.ExpandedNodeIdVector_size(self)
    def clear(self): return ___init__.ExpandedNodeIdVector_clear(self)
    def swap(self, *args): return ___init__.ExpandedNodeIdVector_swap(self, *args)
    def get_allocator(self): return ___init__.ExpandedNodeIdVector_get_allocator(self)
    def begin(self): return ___init__.ExpandedNodeIdVector_begin(self)
    def end(self): return ___init__.ExpandedNodeIdVector_end(self)
    def rbegin(self): return ___init__.ExpandedNodeIdVector_rbegin(self)
    def rend(self): return ___init__.ExpandedNodeIdVector_rend(self)
    def pop_back(self): return ___init__.ExpandedNodeIdVector_pop_back(self)
    def erase(self, *args): return ___init__.ExpandedNodeIdVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ExpandedNodeIdVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.ExpandedNodeIdVector_push_back(self, *args)
    def front(self): return ___init__.ExpandedNodeIdVector_front(self)
    def back(self): return ___init__.ExpandedNodeIdVector_back(self)
    def assign(self, *args): return ___init__.ExpandedNodeIdVector_assign(self, *args)
    def resize(self, *args): return ___init__.ExpandedNodeIdVector_resize(self, *args)
    def insert(self, *args): return ___init__.ExpandedNodeIdVector_insert(self, *args)
    def reserve(self, *args): return ___init__.ExpandedNodeIdVector_reserve(self, *args)
    def capacity(self): return ___init__.ExpandedNodeIdVector_capacity(self)
    __swig_destroy__ = ___init__.delete_ExpandedNodeIdVector
    __del__ = lambda self : None;
ExpandedNodeIdVector_swigregister = ___init__.ExpandedNodeIdVector_swigregister
ExpandedNodeIdVector_swigregister(ExpandedNodeIdVector)

class QualifiedName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualifiedName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QualifiedName, name)
    def __str__(self): return ___init__.QualifiedName___str__(self)
    def setName(self, *args): return ___init__.QualifiedName_setName(self, *args)
    def setNameSpaceUri(self, *args): return ___init__.QualifiedName_setNameSpaceUri(self, *args)
    def setNameSpaceIndex(self, *args): return ___init__.QualifiedName_setNameSpaceIndex(self, *args)
    def hasNameSpaceIndex(self): return ___init__.QualifiedName_hasNameSpaceIndex(self)
    def hasNameSpaceUri(self): return ___init__.QualifiedName_hasNameSpaceUri(self)
    def isNull(self): return ___init__.QualifiedName_isNull(self)
    def name(self): return ___init__.QualifiedName_name(self)
    def nameSpaceUri(self): return ___init__.QualifiedName_nameSpaceUri(self)
    def nameSpaceIndex(self): return ___init__.QualifiedName_nameSpaceIndex(self)
    def __repr__(self): return ___init__.QualifiedName___repr__(self)
    def __eq__(self, *args): return ___init__.QualifiedName___eq__(self, *args)
    def __ne__(self, *args): return ___init__.QualifiedName___ne__(self, *args)
    def __lt__(self, *args): return ___init__.QualifiedName___lt__(self, *args)
    def __gt__(self, *args): return ___init__.QualifiedName___gt__(self, *args)
    def __ge__(self, *args): return ___init__.QualifiedName___ge__(self, *args)
    def __le__(self, *args): return ___init__.QualifiedName___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_QualifiedName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_QualifiedName
    __del__ = lambda self : None;
QualifiedName_swigregister = ___init__.QualifiedName_swigregister
QualifiedName_swigregister(QualifiedName)

class QualifiedNameVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QualifiedNameVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QualifiedNameVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.QualifiedNameVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.QualifiedNameVector___nonzero__(self)
    def __bool__(self): return ___init__.QualifiedNameVector___bool__(self)
    def __len__(self): return ___init__.QualifiedNameVector___len__(self)
    def pop(self): return ___init__.QualifiedNameVector_pop(self)
    def __getslice__(self, *args): return ___init__.QualifiedNameVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.QualifiedNameVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.QualifiedNameVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.QualifiedNameVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.QualifiedNameVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.QualifiedNameVector___setitem__(self, *args)
    def append(self, *args): return ___init__.QualifiedNameVector_append(self, *args)
    def empty(self): return ___init__.QualifiedNameVector_empty(self)
    def size(self): return ___init__.QualifiedNameVector_size(self)
    def clear(self): return ___init__.QualifiedNameVector_clear(self)
    def swap(self, *args): return ___init__.QualifiedNameVector_swap(self, *args)
    def get_allocator(self): return ___init__.QualifiedNameVector_get_allocator(self)
    def begin(self): return ___init__.QualifiedNameVector_begin(self)
    def end(self): return ___init__.QualifiedNameVector_end(self)
    def rbegin(self): return ___init__.QualifiedNameVector_rbegin(self)
    def rend(self): return ___init__.QualifiedNameVector_rend(self)
    def pop_back(self): return ___init__.QualifiedNameVector_pop_back(self)
    def erase(self, *args): return ___init__.QualifiedNameVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_QualifiedNameVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.QualifiedNameVector_push_back(self, *args)
    def front(self): return ___init__.QualifiedNameVector_front(self)
    def back(self): return ___init__.QualifiedNameVector_back(self)
    def assign(self, *args): return ___init__.QualifiedNameVector_assign(self, *args)
    def resize(self, *args): return ___init__.QualifiedNameVector_resize(self, *args)
    def insert(self, *args): return ___init__.QualifiedNameVector_insert(self, *args)
    def reserve(self, *args): return ___init__.QualifiedNameVector_reserve(self, *args)
    def capacity(self): return ___init__.QualifiedNameVector_capacity(self)
    __swig_destroy__ = ___init__.delete_QualifiedNameVector
    __del__ = lambda self : None;
QualifiedNameVector_swigregister = ___init__.QualifiedNameVector_swigregister
QualifiedNameVector_swigregister(QualifiedNameVector)

class RelativePathElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelativePathElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelativePathElement, name)
    __swig_setmethods__["targetName"] = ___init__.RelativePathElement_targetName_set
    __swig_getmethods__["targetName"] = ___init__.RelativePathElement_targetName_get
    if _newclass:targetName = _swig_property(___init__.RelativePathElement_targetName_get, ___init__.RelativePathElement_targetName_set)
    __swig_setmethods__["referenceType"] = ___init__.RelativePathElement_referenceType_set
    __swig_getmethods__["referenceType"] = ___init__.RelativePathElement_referenceType_get
    if _newclass:referenceType = _swig_property(___init__.RelativePathElement_referenceType_get, ___init__.RelativePathElement_referenceType_set)
    __swig_setmethods__["isInverse"] = ___init__.RelativePathElement_isInverse_set
    __swig_getmethods__["isInverse"] = ___init__.RelativePathElement_isInverse_get
    if _newclass:isInverse = _swig_property(___init__.RelativePathElement_isInverse_get, ___init__.RelativePathElement_isInverse_set)
    __swig_setmethods__["includeSubtypes"] = ___init__.RelativePathElement_includeSubtypes_set
    __swig_getmethods__["includeSubtypes"] = ___init__.RelativePathElement_includeSubtypes_get
    if _newclass:includeSubtypes = _swig_property(___init__.RelativePathElement_includeSubtypes_get, ___init__.RelativePathElement_includeSubtypes_set)
    def __str__(self, indent="", colon=16): return ___init__.RelativePathElement___str__(self, indent, colon)
    def __repr__(self): return ___init__.RelativePathElement___repr__(self)
    def __eq__(self, *args): return ___init__.RelativePathElement___eq__(self, *args)
    def __ne__(self, *args): return ___init__.RelativePathElement___ne__(self, *args)
    def __lt__(self, *args): return ___init__.RelativePathElement___lt__(self, *args)
    def __gt__(self, *args): return ___init__.RelativePathElement___gt__(self, *args)
    def __ge__(self, *args): return ___init__.RelativePathElement___ge__(self, *args)
    def __le__(self, *args): return ___init__.RelativePathElement___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_RelativePathElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_RelativePathElement
    __del__ = lambda self : None;
RelativePathElement_swigregister = ___init__.RelativePathElement_swigregister
RelativePathElement_swigregister(RelativePathElement)

class RelativePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelativePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelativePath, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.RelativePath_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.RelativePath___nonzero__(self)
    def __bool__(self): return ___init__.RelativePath___bool__(self)
    def __len__(self): return ___init__.RelativePath___len__(self)
    def pop(self): return ___init__.RelativePath_pop(self)
    def __getslice__(self, *args): return ___init__.RelativePath___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.RelativePath___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.RelativePath___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.RelativePath___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.RelativePath___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.RelativePath___setitem__(self, *args)
    def append(self, *args): return ___init__.RelativePath_append(self, *args)
    def empty(self): return ___init__.RelativePath_empty(self)
    def size(self): return ___init__.RelativePath_size(self)
    def clear(self): return ___init__.RelativePath_clear(self)
    def swap(self, *args): return ___init__.RelativePath_swap(self, *args)
    def get_allocator(self): return ___init__.RelativePath_get_allocator(self)
    def begin(self): return ___init__.RelativePath_begin(self)
    def end(self): return ___init__.RelativePath_end(self)
    def rbegin(self): return ___init__.RelativePath_rbegin(self)
    def rend(self): return ___init__.RelativePath_rend(self)
    def pop_back(self): return ___init__.RelativePath_pop_back(self)
    def erase(self, *args): return ___init__.RelativePath_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_RelativePath(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.RelativePath_push_back(self, *args)
    def front(self): return ___init__.RelativePath_front(self)
    def back(self): return ___init__.RelativePath_back(self)
    def assign(self, *args): return ___init__.RelativePath_assign(self, *args)
    def resize(self, *args): return ___init__.RelativePath_resize(self, *args)
    def insert(self, *args): return ___init__.RelativePath_insert(self, *args)
    def reserve(self, *args): return ___init__.RelativePath_reserve(self, *args)
    def capacity(self): return ___init__.RelativePath_capacity(self)
    __swig_destroy__ = ___init__.delete_RelativePath
    __del__ = lambda self : None;
RelativePath_swigregister = ___init__.RelativePath_swigregister
RelativePath_swigregister(RelativePath)

class BrowsePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowsePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowsePath, name)
    __swig_setmethods__["startingExpandedNodeId"] = ___init__.BrowsePath_startingExpandedNodeId_set
    __swig_getmethods__["startingExpandedNodeId"] = ___init__.BrowsePath_startingExpandedNodeId_get
    if _newclass:startingExpandedNodeId = _swig_property(___init__.BrowsePath_startingExpandedNodeId_get, ___init__.BrowsePath_startingExpandedNodeId_set)
    __swig_setmethods__["relativePath"] = ___init__.BrowsePath_relativePath_set
    __swig_getmethods__["relativePath"] = ___init__.BrowsePath_relativePath_get
    if _newclass:relativePath = _swig_property(___init__.BrowsePath_relativePath_get, ___init__.BrowsePath_relativePath_set)
    def __str__(self, delimiter="/"): return ___init__.BrowsePath___str__(self, delimiter)
    def __repr__(self): return ___init__.BrowsePath___repr__(self)
    def __eq__(self, *args): return ___init__.BrowsePath___eq__(self, *args)
    def __ne__(self, *args): return ___init__.BrowsePath___ne__(self, *args)
    def __lt__(self, *args): return ___init__.BrowsePath___lt__(self, *args)
    def __gt__(self, *args): return ___init__.BrowsePath___gt__(self, *args)
    def __ge__(self, *args): return ___init__.BrowsePath___ge__(self, *args)
    def __le__(self, *args): return ___init__.BrowsePath___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_BrowsePath(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_BrowsePath
    __del__ = lambda self : None;
BrowsePath_swigregister = ___init__.BrowsePath_swigregister
BrowsePath_swigregister(BrowsePath)

class ServerArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServerArray, name)
    def __str__(self): return ___init__.ServerArray___str__(self)
    def findServerUri(self, *args): return ___init__.ServerArray_findServerUri(self, *args)
    def update(self, *args): return ___init__.ServerArray_update(self, *args)
    def findServerIndex(self, *args): return ___init__.ServerArray_findServerIndex(self, *args)
    def fillExpandedNodeId(self, *args): return ___init__.ServerArray_fillExpandedNodeId(self, *args)
    def fillVariant(self, *args): return ___init__.ServerArray_fillVariant(self, *args)
    def __repr__(self): return ___init__.ServerArray___repr__(self)
    def __init__(self, *args): 
        this = ___init__.new_ServerArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ServerArray
    __del__ = lambda self : None;
ServerArray_swigregister = ___init__.ServerArray_swigregister
ServerArray_swigregister(ServerArray)

class SimpleAttributeOperand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleAttributeOperand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleAttributeOperand, name)
    def __str__(self, indent="", colon=20): return ___init__.SimpleAttributeOperand___str__(self, indent, colon)
    __swig_setmethods__["attributeId"] = ___init__.SimpleAttributeOperand_attributeId_set
    __swig_getmethods__["attributeId"] = ___init__.SimpleAttributeOperand_attributeId_get
    if _newclass:attributeId = _swig_property(___init__.SimpleAttributeOperand_attributeId_get, ___init__.SimpleAttributeOperand_attributeId_set)
    __swig_setmethods__["browsePath"] = ___init__.SimpleAttributeOperand_browsePath_set
    __swig_getmethods__["browsePath"] = ___init__.SimpleAttributeOperand_browsePath_get
    if _newclass:browsePath = _swig_property(___init__.SimpleAttributeOperand_browsePath_get, ___init__.SimpleAttributeOperand_browsePath_set)
    __swig_setmethods__["typeId"] = ___init__.SimpleAttributeOperand_typeId_set
    __swig_getmethods__["typeId"] = ___init__.SimpleAttributeOperand_typeId_get
    if _newclass:typeId = _swig_property(___init__.SimpleAttributeOperand_typeId_get, ___init__.SimpleAttributeOperand_typeId_set)
    __swig_setmethods__["indexRange"] = ___init__.SimpleAttributeOperand_indexRange_set
    __swig_getmethods__["indexRange"] = ___init__.SimpleAttributeOperand_indexRange_get
    if _newclass:indexRange = _swig_property(___init__.SimpleAttributeOperand_indexRange_get, ___init__.SimpleAttributeOperand_indexRange_set)
    def __repr__(self): return ___init__.SimpleAttributeOperand___repr__(self)
    def __eq__(self, *args): return ___init__.SimpleAttributeOperand___eq__(self, *args)
    def __ne__(self, *args): return ___init__.SimpleAttributeOperand___ne__(self, *args)
    def __lt__(self, *args): return ___init__.SimpleAttributeOperand___lt__(self, *args)
    def __gt__(self, *args): return ___init__.SimpleAttributeOperand___gt__(self, *args)
    def __ge__(self, *args): return ___init__.SimpleAttributeOperand___ge__(self, *args)
    def __le__(self, *args): return ___init__.SimpleAttributeOperand___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_SimpleAttributeOperand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_SimpleAttributeOperand
    __del__ = lambda self : None;
SimpleAttributeOperand_swigregister = ___init__.SimpleAttributeOperand_swigregister
SimpleAttributeOperand_swigregister(SimpleAttributeOperand)

class SimpleAttributeOperandVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleAttributeOperandVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleAttributeOperandVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.SimpleAttributeOperandVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.SimpleAttributeOperandVector___nonzero__(self)
    def __bool__(self): return ___init__.SimpleAttributeOperandVector___bool__(self)
    def __len__(self): return ___init__.SimpleAttributeOperandVector___len__(self)
    def pop(self): return ___init__.SimpleAttributeOperandVector_pop(self)
    def __getslice__(self, *args): return ___init__.SimpleAttributeOperandVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.SimpleAttributeOperandVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.SimpleAttributeOperandVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.SimpleAttributeOperandVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.SimpleAttributeOperandVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.SimpleAttributeOperandVector___setitem__(self, *args)
    def append(self, *args): return ___init__.SimpleAttributeOperandVector_append(self, *args)
    def empty(self): return ___init__.SimpleAttributeOperandVector_empty(self)
    def size(self): return ___init__.SimpleAttributeOperandVector_size(self)
    def clear(self): return ___init__.SimpleAttributeOperandVector_clear(self)
    def swap(self, *args): return ___init__.SimpleAttributeOperandVector_swap(self, *args)
    def get_allocator(self): return ___init__.SimpleAttributeOperandVector_get_allocator(self)
    def begin(self): return ___init__.SimpleAttributeOperandVector_begin(self)
    def end(self): return ___init__.SimpleAttributeOperandVector_end(self)
    def rbegin(self): return ___init__.SimpleAttributeOperandVector_rbegin(self)
    def rend(self): return ___init__.SimpleAttributeOperandVector_rend(self)
    def pop_back(self): return ___init__.SimpleAttributeOperandVector_pop_back(self)
    def erase(self, *args): return ___init__.SimpleAttributeOperandVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_SimpleAttributeOperandVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.SimpleAttributeOperandVector_push_back(self, *args)
    def front(self): return ___init__.SimpleAttributeOperandVector_front(self)
    def back(self): return ___init__.SimpleAttributeOperandVector_back(self)
    def assign(self, *args): return ___init__.SimpleAttributeOperandVector_assign(self, *args)
    def resize(self, *args): return ___init__.SimpleAttributeOperandVector_resize(self, *args)
    def insert(self, *args): return ___init__.SimpleAttributeOperandVector_insert(self, *args)
    def reserve(self, *args): return ___init__.SimpleAttributeOperandVector_reserve(self, *args)
    def capacity(self): return ___init__.SimpleAttributeOperandVector_capacity(self)
    __swig_destroy__ = ___init__.delete_SimpleAttributeOperandVector
    __del__ = lambda self : None;
SimpleAttributeOperandVector_swigregister = ___init__.SimpleAttributeOperandVector_swigregister
SimpleAttributeOperandVector_swigregister(SimpleAttributeOperandVector)

class DataChangeFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataChangeFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataChangeFilter, name)
    DataChangeTrigger_Status = ___init__.DataChangeFilter_DataChangeTrigger_Status
    DataChangeTrigger_StatusValue = ___init__.DataChangeFilter_DataChangeTrigger_StatusValue
    DataChangeTrigger_StatusValueTimestamp = ___init__.DataChangeFilter_DataChangeTrigger_StatusValueTimestamp
    DeadBandType_None = ___init__.DataChangeFilter_DeadBandType_None
    DeadBandType_Absolute = ___init__.DataChangeFilter_DeadBandType_Absolute
    DeadBandType_Percent = ___init__.DataChangeFilter_DeadBandType_Percent
    __swig_setmethods__["trigger"] = ___init__.DataChangeFilter_trigger_set
    __swig_getmethods__["trigger"] = ___init__.DataChangeFilter_trigger_get
    if _newclass:trigger = _swig_property(___init__.DataChangeFilter_trigger_get, ___init__.DataChangeFilter_trigger_set)
    __swig_setmethods__["deadBandType"] = ___init__.DataChangeFilter_deadBandType_set
    __swig_getmethods__["deadBandType"] = ___init__.DataChangeFilter_deadBandType_get
    if _newclass:deadBandType = _swig_property(___init__.DataChangeFilter_deadBandType_get, ___init__.DataChangeFilter_deadBandType_set)
    __swig_setmethods__["deadBandValue"] = ___init__.DataChangeFilter_deadBandValue_set
    __swig_getmethods__["deadBandValue"] = ___init__.DataChangeFilter_deadBandValue_get
    if _newclass:deadBandValue = _swig_property(___init__.DataChangeFilter_deadBandValue_get, ___init__.DataChangeFilter_deadBandValue_set)
    def __str__(self, indent="", colon=17): return ___init__.DataChangeFilter___str__(self, indent, colon)
    def __repr__(self): return ___init__.DataChangeFilter___repr__(self)
    def __eq__(self, *args): return ___init__.DataChangeFilter___eq__(self, *args)
    def __ne__(self, *args): return ___init__.DataChangeFilter___ne__(self, *args)
    def __lt__(self, *args): return ___init__.DataChangeFilter___lt__(self, *args)
    def __gt__(self, *args): return ___init__.DataChangeFilter___gt__(self, *args)
    def __ge__(self, *args): return ___init__.DataChangeFilter___ge__(self, *args)
    def __le__(self, *args): return ___init__.DataChangeFilter___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_DataChangeFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_DataChangeFilter
    __del__ = lambda self : None;
DataChangeFilter_swigregister = ___init__.DataChangeFilter_swigregister
DataChangeFilter_swigregister(DataChangeFilter)

class EventFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventFilter, name)
    __swig_setmethods__["selectClauses"] = ___init__.EventFilter_selectClauses_set
    __swig_getmethods__["selectClauses"] = ___init__.EventFilter_selectClauses_get
    if _newclass:selectClauses = _swig_property(___init__.EventFilter_selectClauses_get, ___init__.EventFilter_selectClauses_set)
    def __str__(self, indent="", colon=26): return ___init__.EventFilter___str__(self, indent, colon)
    def __repr__(self): return ___init__.EventFilter___repr__(self)
    def __eq__(self, *args): return ___init__.EventFilter___eq__(self, *args)
    def __ne__(self, *args): return ___init__.EventFilter___ne__(self, *args)
    def __lt__(self, *args): return ___init__.EventFilter___lt__(self, *args)
    def __gt__(self, *args): return ___init__.EventFilter___gt__(self, *args)
    def __ge__(self, *args): return ___init__.EventFilter___ge__(self, *args)
    def __le__(self, *args): return ___init__.EventFilter___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_EventFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_EventFilter
    __del__ = lambda self : None;
EventFilter_swigregister = ___init__.EventFilter_swigregister
EventFilter_swigregister(EventFilter)

class Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Address, name)
    def __init__(self, *args): 
        this = ___init__.new_Address(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Address
    __del__ = lambda self : None;
    def clear(self): return ___init__.Address_clear(self)
    def getRelativePath(self): return ___init__.Address_getRelativePath(self)
    def getStartingAddress(self): return ___init__.Address_getStartingAddress(self)
    def getExpandedNodeId(self): return ___init__.Address_getExpandedNodeId(self)
    def isExpandedNodeId(self): return ___init__.Address_isExpandedNodeId(self)
    def isRelativePath(self): return ___init__.Address_isRelativePath(self)
    def __str__(self, indent="", colon=20): return ___init__.Address___str__(self, indent, colon)
    def __repr__(self): return ___init__.Address___repr__(self)
    def __eq__(self, *args): return ___init__.Address___eq__(self, *args)
    def __ne__(self, *args): return ___init__.Address___ne__(self, *args)
    def __lt__(self, *args): return ___init__.Address___lt__(self, *args)
    def __gt__(self, *args): return ___init__.Address___gt__(self, *args)
    def __ge__(self, *args): return ___init__.Address___ge__(self, *args)
    def __le__(self, *args): return ___init__.Address___le__(self, *args)
Address_swigregister = ___init__.Address_swigregister
Address_swigregister(Address)

class AddressVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AddressVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.AddressVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.AddressVector___nonzero__(self)
    def __bool__(self): return ___init__.AddressVector___bool__(self)
    def __len__(self): return ___init__.AddressVector___len__(self)
    def pop(self): return ___init__.AddressVector_pop(self)
    def __getslice__(self, *args): return ___init__.AddressVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.AddressVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.AddressVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.AddressVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.AddressVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.AddressVector___setitem__(self, *args)
    def append(self, *args): return ___init__.AddressVector_append(self, *args)
    def empty(self): return ___init__.AddressVector_empty(self)
    def size(self): return ___init__.AddressVector_size(self)
    def clear(self): return ___init__.AddressVector_clear(self)
    def swap(self, *args): return ___init__.AddressVector_swap(self, *args)
    def get_allocator(self): return ___init__.AddressVector_get_allocator(self)
    def begin(self): return ___init__.AddressVector_begin(self)
    def end(self): return ___init__.AddressVector_end(self)
    def rbegin(self): return ___init__.AddressVector_rbegin(self)
    def rend(self): return ___init__.AddressVector_rend(self)
    def pop_back(self): return ___init__.AddressVector_pop_back(self)
    def erase(self, *args): return ___init__.AddressVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_AddressVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.AddressVector_push_back(self, *args)
    def front(self): return ___init__.AddressVector_front(self)
    def back(self): return ___init__.AddressVector_back(self)
    def assign(self, *args): return ___init__.AddressVector_assign(self, *args)
    def resize(self, *args): return ___init__.AddressVector_resize(self, *args)
    def insert(self, *args): return ___init__.AddressVector_insert(self, *args)
    def reserve(self, *args): return ___init__.AddressVector_reserve(self, *args)
    def capacity(self): return ___init__.AddressVector_capacity(self)
    __swig_destroy__ = ___init__.delete_AddressVector
    __del__ = lambda self : None;
AddressVector_swigregister = ___init__.AddressVector_swigregister
AddressVector_swigregister(AddressVector)

class UserTokenPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserTokenPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserTokenPolicy, name)
    __swig_setmethods__["policyId"] = ___init__.UserTokenPolicy_policyId_set
    __swig_getmethods__["policyId"] = ___init__.UserTokenPolicy_policyId_get
    if _newclass:policyId = _swig_property(___init__.UserTokenPolicy_policyId_get, ___init__.UserTokenPolicy_policyId_set)
    __swig_setmethods__["tokenType"] = ___init__.UserTokenPolicy_tokenType_set
    __swig_getmethods__["tokenType"] = ___init__.UserTokenPolicy_tokenType_get
    if _newclass:tokenType = _swig_property(___init__.UserTokenPolicy_tokenType_get, ___init__.UserTokenPolicy_tokenType_set)
    __swig_setmethods__["issuedTokenType"] = ___init__.UserTokenPolicy_issuedTokenType_set
    __swig_getmethods__["issuedTokenType"] = ___init__.UserTokenPolicy_issuedTokenType_get
    if _newclass:issuedTokenType = _swig_property(___init__.UserTokenPolicy_issuedTokenType_get, ___init__.UserTokenPolicy_issuedTokenType_set)
    __swig_setmethods__["issuerEndpointUrl"] = ___init__.UserTokenPolicy_issuerEndpointUrl_set
    __swig_getmethods__["issuerEndpointUrl"] = ___init__.UserTokenPolicy_issuerEndpointUrl_get
    if _newclass:issuerEndpointUrl = _swig_property(___init__.UserTokenPolicy_issuerEndpointUrl_get, ___init__.UserTokenPolicy_issuerEndpointUrl_set)
    __swig_setmethods__["securityPolicyUri"] = ___init__.UserTokenPolicy_securityPolicyUri_set
    __swig_getmethods__["securityPolicyUri"] = ___init__.UserTokenPolicy_securityPolicyUri_get
    if _newclass:securityPolicyUri = _swig_property(___init__.UserTokenPolicy_securityPolicyUri_get, ___init__.UserTokenPolicy_securityPolicyUri_set)
    def __str__(self, indentation="", colon=21): return ___init__.UserTokenPolicy___str__(self, indentation, colon)
    def __repr__(self): return ___init__.UserTokenPolicy___repr__(self)
    def __eq__(self, *args): return ___init__.UserTokenPolicy___eq__(self, *args)
    def __ne__(self, *args): return ___init__.UserTokenPolicy___ne__(self, *args)
    def __lt__(self, *args): return ___init__.UserTokenPolicy___lt__(self, *args)
    def __gt__(self, *args): return ___init__.UserTokenPolicy___gt__(self, *args)
    def __ge__(self, *args): return ___init__.UserTokenPolicy___ge__(self, *args)
    def __le__(self, *args): return ___init__.UserTokenPolicy___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_UserTokenPolicy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_UserTokenPolicy
    __del__ = lambda self : None;
UserTokenPolicy_swigregister = ___init__.UserTokenPolicy_swigregister
UserTokenPolicy_swigregister(UserTokenPolicy)

class UserTokenPolicyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserTokenPolicyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserTokenPolicyVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.UserTokenPolicyVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.UserTokenPolicyVector___nonzero__(self)
    def __bool__(self): return ___init__.UserTokenPolicyVector___bool__(self)
    def __len__(self): return ___init__.UserTokenPolicyVector___len__(self)
    def pop(self): return ___init__.UserTokenPolicyVector_pop(self)
    def __getslice__(self, *args): return ___init__.UserTokenPolicyVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.UserTokenPolicyVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.UserTokenPolicyVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.UserTokenPolicyVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.UserTokenPolicyVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.UserTokenPolicyVector___setitem__(self, *args)
    def append(self, *args): return ___init__.UserTokenPolicyVector_append(self, *args)
    def empty(self): return ___init__.UserTokenPolicyVector_empty(self)
    def size(self): return ___init__.UserTokenPolicyVector_size(self)
    def clear(self): return ___init__.UserTokenPolicyVector_clear(self)
    def swap(self, *args): return ___init__.UserTokenPolicyVector_swap(self, *args)
    def get_allocator(self): return ___init__.UserTokenPolicyVector_get_allocator(self)
    def begin(self): return ___init__.UserTokenPolicyVector_begin(self)
    def end(self): return ___init__.UserTokenPolicyVector_end(self)
    def rbegin(self): return ___init__.UserTokenPolicyVector_rbegin(self)
    def rend(self): return ___init__.UserTokenPolicyVector_rend(self)
    def pop_back(self): return ___init__.UserTokenPolicyVector_pop_back(self)
    def erase(self, *args): return ___init__.UserTokenPolicyVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_UserTokenPolicyVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.UserTokenPolicyVector_push_back(self, *args)
    def front(self): return ___init__.UserTokenPolicyVector_front(self)
    def back(self): return ___init__.UserTokenPolicyVector_back(self)
    def assign(self, *args): return ___init__.UserTokenPolicyVector_assign(self, *args)
    def resize(self, *args): return ___init__.UserTokenPolicyVector_resize(self, *args)
    def insert(self, *args): return ___init__.UserTokenPolicyVector_insert(self, *args)
    def reserve(self, *args): return ___init__.UserTokenPolicyVector_reserve(self, *args)
    def capacity(self): return ___init__.UserTokenPolicyVector_capacity(self)
    __swig_destroy__ = ___init__.delete_UserTokenPolicyVector
    __del__ = lambda self : None;
UserTokenPolicyVector_swigregister = ___init__.UserTokenPolicyVector_swigregister
UserTokenPolicyVector_swigregister(UserTokenPolicyVector)

class EndpointDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndpointDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndpointDescription, name)
    def isEmpty(self): return ___init__.EndpointDescription_isEmpty(self)
    __swig_setmethods__["endpointUrl"] = ___init__.EndpointDescription_endpointUrl_set
    __swig_getmethods__["endpointUrl"] = ___init__.EndpointDescription_endpointUrl_get
    if _newclass:endpointUrl = _swig_property(___init__.EndpointDescription_endpointUrl_get, ___init__.EndpointDescription_endpointUrl_set)
    __swig_setmethods__["server"] = ___init__.EndpointDescription_server_set
    __swig_getmethods__["server"] = ___init__.EndpointDescription_server_get
    if _newclass:server = _swig_property(___init__.EndpointDescription_server_get, ___init__.EndpointDescription_server_set)
    __swig_setmethods__["serverCertificate"] = ___init__.EndpointDescription_serverCertificate_set
    __swig_getmethods__["serverCertificate"] = ___init__.EndpointDescription_serverCertificate_get
    if _newclass:serverCertificate = _swig_property(___init__.EndpointDescription_serverCertificate_get, ___init__.EndpointDescription_serverCertificate_set)
    __swig_setmethods__["securityMode"] = ___init__.EndpointDescription_securityMode_set
    __swig_getmethods__["securityMode"] = ___init__.EndpointDescription_securityMode_get
    if _newclass:securityMode = _swig_property(___init__.EndpointDescription_securityMode_get, ___init__.EndpointDescription_securityMode_set)
    __swig_setmethods__["securityPolicyUri"] = ___init__.EndpointDescription_securityPolicyUri_set
    __swig_getmethods__["securityPolicyUri"] = ___init__.EndpointDescription_securityPolicyUri_get
    if _newclass:securityPolicyUri = _swig_property(___init__.EndpointDescription_securityPolicyUri_get, ___init__.EndpointDescription_securityPolicyUri_set)
    __swig_setmethods__["userIdentityTokens"] = ___init__.EndpointDescription_userIdentityTokens_set
    __swig_getmethods__["userIdentityTokens"] = ___init__.EndpointDescription_userIdentityTokens_get
    if _newclass:userIdentityTokens = _swig_property(___init__.EndpointDescription_userIdentityTokens_get, ___init__.EndpointDescription_userIdentityTokens_set)
    __swig_setmethods__["transportProfileUri"] = ___init__.EndpointDescription_transportProfileUri_set
    __swig_getmethods__["transportProfileUri"] = ___init__.EndpointDescription_transportProfileUri_get
    if _newclass:transportProfileUri = _swig_property(___init__.EndpointDescription_transportProfileUri_get, ___init__.EndpointDescription_transportProfileUri_set)
    __swig_setmethods__["securityLevel"] = ___init__.EndpointDescription_securityLevel_set
    __swig_getmethods__["securityLevel"] = ___init__.EndpointDescription_securityLevel_get
    if _newclass:securityLevel = _swig_property(___init__.EndpointDescription_securityLevel_get, ___init__.EndpointDescription_securityLevel_set)
    def __str__(self, indent="", colon=23): return ___init__.EndpointDescription___str__(self, indent, colon)
    def __repr__(self): return ___init__.EndpointDescription___repr__(self)
    def __eq__(self, *args): return ___init__.EndpointDescription___eq__(self, *args)
    def __ne__(self, *args): return ___init__.EndpointDescription___ne__(self, *args)
    def __lt__(self, *args): return ___init__.EndpointDescription___lt__(self, *args)
    def __gt__(self, *args): return ___init__.EndpointDescription___gt__(self, *args)
    def __ge__(self, *args): return ___init__.EndpointDescription___ge__(self, *args)
    def __le__(self, *args): return ___init__.EndpointDescription___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_EndpointDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_EndpointDescription
    __del__ = lambda self : None;
EndpointDescription_swigregister = ___init__.EndpointDescription_swigregister
EndpointDescription_swigregister(EndpointDescription)

class EndpointDescriptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndpointDescriptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndpointDescriptionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.EndpointDescriptionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.EndpointDescriptionVector___nonzero__(self)
    def __bool__(self): return ___init__.EndpointDescriptionVector___bool__(self)
    def __len__(self): return ___init__.EndpointDescriptionVector___len__(self)
    def pop(self): return ___init__.EndpointDescriptionVector_pop(self)
    def __getslice__(self, *args): return ___init__.EndpointDescriptionVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.EndpointDescriptionVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.EndpointDescriptionVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.EndpointDescriptionVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.EndpointDescriptionVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.EndpointDescriptionVector___setitem__(self, *args)
    def append(self, *args): return ___init__.EndpointDescriptionVector_append(self, *args)
    def empty(self): return ___init__.EndpointDescriptionVector_empty(self)
    def size(self): return ___init__.EndpointDescriptionVector_size(self)
    def clear(self): return ___init__.EndpointDescriptionVector_clear(self)
    def swap(self, *args): return ___init__.EndpointDescriptionVector_swap(self, *args)
    def get_allocator(self): return ___init__.EndpointDescriptionVector_get_allocator(self)
    def begin(self): return ___init__.EndpointDescriptionVector_begin(self)
    def end(self): return ___init__.EndpointDescriptionVector_end(self)
    def rbegin(self): return ___init__.EndpointDescriptionVector_rbegin(self)
    def rend(self): return ___init__.EndpointDescriptionVector_rend(self)
    def pop_back(self): return ___init__.EndpointDescriptionVector_pop_back(self)
    def erase(self, *args): return ___init__.EndpointDescriptionVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_EndpointDescriptionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.EndpointDescriptionVector_push_back(self, *args)
    def front(self): return ___init__.EndpointDescriptionVector_front(self)
    def back(self): return ___init__.EndpointDescriptionVector_back(self)
    def assign(self, *args): return ___init__.EndpointDescriptionVector_assign(self, *args)
    def resize(self, *args): return ___init__.EndpointDescriptionVector_resize(self, *args)
    def insert(self, *args): return ___init__.EndpointDescriptionVector_insert(self, *args)
    def reserve(self, *args): return ___init__.EndpointDescriptionVector_reserve(self, *args)
    def capacity(self): return ___init__.EndpointDescriptionVector_capacity(self)
    __swig_destroy__ = ___init__.delete_EndpointDescriptionVector
    __del__ = lambda self : None;
EndpointDescriptionVector_swigregister = ___init__.EndpointDescriptionVector_swigregister
EndpointDescriptionVector_swigregister(EndpointDescriptionVector)

class ViewDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewDescription, name)
    __swig_setmethods__["viewId"] = ___init__.ViewDescription_viewId_set
    __swig_getmethods__["viewId"] = ___init__.ViewDescription_viewId_get
    if _newclass:viewId = _swig_property(___init__.ViewDescription_viewId_get, ___init__.ViewDescription_viewId_set)
    def __str__(self, indent="", colon=10): return ___init__.ViewDescription___str__(self, indent, colon)
    def __repr__(self): return ___init__.ViewDescription___repr__(self)
    def __eq__(self, *args): return ___init__.ViewDescription___eq__(self, *args)
    def __ne__(self, *args): return ___init__.ViewDescription___ne__(self, *args)
    def __lt__(self, *args): return ___init__.ViewDescription___lt__(self, *args)
    def __gt__(self, *args): return ___init__.ViewDescription___gt__(self, *args)
    def __ge__(self, *args): return ___init__.ViewDescription___ge__(self, *args)
    def __le__(self, *args): return ___init__.ViewDescription___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ViewDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ViewDescription
    __del__ = lambda self : None;
ViewDescription_swigregister = ___init__.ViewDescription_swigregister
ViewDescription_swigregister(ViewDescription)

class ReferenceDescription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceDescription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceDescription, name)
    __swig_setmethods__["referenceTypeId"] = ___init__.ReferenceDescription_referenceTypeId_set
    __swig_getmethods__["referenceTypeId"] = ___init__.ReferenceDescription_referenceTypeId_get
    if _newclass:referenceTypeId = _swig_property(___init__.ReferenceDescription_referenceTypeId_get, ___init__.ReferenceDescription_referenceTypeId_set)
    __swig_setmethods__["isForward"] = ___init__.ReferenceDescription_isForward_set
    __swig_getmethods__["isForward"] = ___init__.ReferenceDescription_isForward_get
    if _newclass:isForward = _swig_property(___init__.ReferenceDescription_isForward_get, ___init__.ReferenceDescription_isForward_set)
    __swig_setmethods__["nodeId"] = ___init__.ReferenceDescription_nodeId_set
    __swig_getmethods__["nodeId"] = ___init__.ReferenceDescription_nodeId_get
    if _newclass:nodeId = _swig_property(___init__.ReferenceDescription_nodeId_get, ___init__.ReferenceDescription_nodeId_set)
    __swig_setmethods__["browseName"] = ___init__.ReferenceDescription_browseName_set
    __swig_getmethods__["browseName"] = ___init__.ReferenceDescription_browseName_get
    if _newclass:browseName = _swig_property(___init__.ReferenceDescription_browseName_get, ___init__.ReferenceDescription_browseName_set)
    __swig_setmethods__["displayName"] = ___init__.ReferenceDescription_displayName_set
    __swig_getmethods__["displayName"] = ___init__.ReferenceDescription_displayName_get
    if _newclass:displayName = _swig_property(___init__.ReferenceDescription_displayName_get, ___init__.ReferenceDescription_displayName_set)
    __swig_setmethods__["nodeClass"] = ___init__.ReferenceDescription_nodeClass_set
    __swig_getmethods__["nodeClass"] = ___init__.ReferenceDescription_nodeClass_get
    if _newclass:nodeClass = _swig_property(___init__.ReferenceDescription_nodeClass_get, ___init__.ReferenceDescription_nodeClass_set)
    __swig_setmethods__["typeDefinition"] = ___init__.ReferenceDescription_typeDefinition_set
    __swig_getmethods__["typeDefinition"] = ___init__.ReferenceDescription_typeDefinition_get
    if _newclass:typeDefinition = _swig_property(___init__.ReferenceDescription_typeDefinition_get, ___init__.ReferenceDescription_typeDefinition_set)
    def __str__(self, indent="", colon=19): return ___init__.ReferenceDescription___str__(self, indent, colon)
    def __repr__(self): return ___init__.ReferenceDescription___repr__(self)
    def __eq__(self, *args): return ___init__.ReferenceDescription___eq__(self, *args)
    def __ne__(self, *args): return ___init__.ReferenceDescription___ne__(self, *args)
    def __lt__(self, *args): return ___init__.ReferenceDescription___lt__(self, *args)
    def __gt__(self, *args): return ___init__.ReferenceDescription___gt__(self, *args)
    def __ge__(self, *args): return ___init__.ReferenceDescription___ge__(self, *args)
    def __le__(self, *args): return ___init__.ReferenceDescription___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ReferenceDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_ReferenceDescription
    __del__ = lambda self : None;
ReferenceDescription_swigregister = ___init__.ReferenceDescription_swigregister
ReferenceDescription_swigregister(ReferenceDescription)

class ReferenceDescriptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceDescriptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceDescriptionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.ReferenceDescriptionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.ReferenceDescriptionVector___nonzero__(self)
    def __bool__(self): return ___init__.ReferenceDescriptionVector___bool__(self)
    def __len__(self): return ___init__.ReferenceDescriptionVector___len__(self)
    def pop(self): return ___init__.ReferenceDescriptionVector_pop(self)
    def __getslice__(self, *args): return ___init__.ReferenceDescriptionVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.ReferenceDescriptionVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.ReferenceDescriptionVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.ReferenceDescriptionVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.ReferenceDescriptionVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.ReferenceDescriptionVector___setitem__(self, *args)
    def append(self, *args): return ___init__.ReferenceDescriptionVector_append(self, *args)
    def empty(self): return ___init__.ReferenceDescriptionVector_empty(self)
    def size(self): return ___init__.ReferenceDescriptionVector_size(self)
    def clear(self): return ___init__.ReferenceDescriptionVector_clear(self)
    def swap(self, *args): return ___init__.ReferenceDescriptionVector_swap(self, *args)
    def get_allocator(self): return ___init__.ReferenceDescriptionVector_get_allocator(self)
    def begin(self): return ___init__.ReferenceDescriptionVector_begin(self)
    def end(self): return ___init__.ReferenceDescriptionVector_end(self)
    def rbegin(self): return ___init__.ReferenceDescriptionVector_rbegin(self)
    def rend(self): return ___init__.ReferenceDescriptionVector_rend(self)
    def pop_back(self): return ___init__.ReferenceDescriptionVector_pop_back(self)
    def erase(self, *args): return ___init__.ReferenceDescriptionVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_ReferenceDescriptionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.ReferenceDescriptionVector_push_back(self, *args)
    def front(self): return ___init__.ReferenceDescriptionVector_front(self)
    def back(self): return ___init__.ReferenceDescriptionVector_back(self)
    def assign(self, *args): return ___init__.ReferenceDescriptionVector_assign(self, *args)
    def resize(self, *args): return ___init__.ReferenceDescriptionVector_resize(self, *args)
    def insert(self, *args): return ___init__.ReferenceDescriptionVector_insert(self, *args)
    def reserve(self, *args): return ___init__.ReferenceDescriptionVector_reserve(self, *args)
    def capacity(self): return ___init__.ReferenceDescriptionVector_capacity(self)
    __swig_destroy__ = ___init__.delete_ReferenceDescriptionVector
    __del__ = lambda self : None;
ReferenceDescriptionVector_swigregister = ___init__.ReferenceDescriptionVector_swigregister
ReferenceDescriptionVector_swigregister(ReferenceDescriptionVector)

class StatusDiagnostics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusDiagnostics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatusDiagnostics, name)
    def __init__(self, *args): 
        this = ___init__.new_StatusDiagnostics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_StatusDiagnostics
    __del__ = lambda self : None;
    def clear(self): return ___init__.StatusDiagnostics_clear(self)
    def isEmpty(self): return ___init__.StatusDiagnostics_isEmpty(self)
    def hasClientHandles(self): return ___init__.StatusDiagnostics_hasClientHandles(self)
    def getClientHandles(self): return ___init__.StatusDiagnostics_getClientHandles(self)
    def setClientHandles(self, *args): return ___init__.StatusDiagnostics_setClientHandles(self, *args)
    def hasDescription(self): return ___init__.StatusDiagnostics_hasDescription(self)
    def getDescription(self): return ___init__.StatusDiagnostics_getDescription(self)
    def setDescription(self, *args): return ___init__.StatusDiagnostics_setDescription(self, *args)
    def toCompactString(self): return ___init__.StatusDiagnostics_toCompactString(self)
    def __str__(self, indent="", colon=19): return ___init__.StatusDiagnostics___str__(self, indent, colon)
    def __repr__(self): return ___init__.StatusDiagnostics___repr__(self)
    def __eq__(self, *args): return ___init__.StatusDiagnostics___eq__(self, *args)
    def __ne__(self, *args): return ___init__.StatusDiagnostics___ne__(self, *args)
    def __lt__(self, *args): return ___init__.StatusDiagnostics___lt__(self, *args)
    def __gt__(self, *args): return ___init__.StatusDiagnostics___gt__(self, *args)
    def __ge__(self, *args): return ___init__.StatusDiagnostics___ge__(self, *args)
    def __le__(self, *args): return ___init__.StatusDiagnostics___le__(self, *args)
StatusDiagnostics_swigregister = ___init__.StatusDiagnostics_swigregister
StatusDiagnostics_swigregister(StatusDiagnostics)

class VectorIterator(object):
   
    def __init__(self, pointerToVector):
        self.pointerToVector = pointerToVector
        self.index = -1
    
    def next(self):
        self.index += 1
        if self.index < len(self.pointerToVector):
            return self.pointerToVector[self.index]
        else:
            raise StopIteration

class VariantVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariantVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariantVector, name)
    __repr__ = _swig_repr
    def __cpp_iterator(self): return ___init__.VariantVector___cpp_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.VariantVector___nonzero__(self)
    def __bool__(self): return ___init__.VariantVector___bool__(self)
    def __len__(self): return ___init__.VariantVector___len__(self)
    def pop(self): return ___init__.VariantVector_pop(self)
    def __getslice__(self, *args): return ___init__.VariantVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.VariantVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.VariantVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.VariantVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.VariantVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.VariantVector___setitem__(self, *args)
    def append(self, *args): return ___init__.VariantVector_append(self, *args)
    def empty(self): return ___init__.VariantVector_empty(self)
    def size(self): return ___init__.VariantVector_size(self)
    def clear(self): return ___init__.VariantVector_clear(self)
    def swap(self, *args): return ___init__.VariantVector_swap(self, *args)
    def get_allocator(self): return ___init__.VariantVector_get_allocator(self)
    def begin(self): return ___init__.VariantVector_begin(self)
    def end(self): return ___init__.VariantVector_end(self)
    def rbegin(self): return ___init__.VariantVector_rbegin(self)
    def rend(self): return ___init__.VariantVector_rend(self)
    def pop_back(self): return ___init__.VariantVector_pop_back(self)
    def erase(self, *args): return ___init__.VariantVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_VariantVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.VariantVector_push_back(self, *args)
    def front(self): return ___init__.VariantVector_front(self)
    def back(self): return ___init__.VariantVector_back(self)
    def assign(self, *args): return ___init__.VariantVector_assign(self, *args)
    def resize(self, *args): return ___init__.VariantVector_resize(self, *args)
    def __cpp_insert(self, *args): return ___init__.VariantVector___cpp_insert(self, *args)
    def reserve(self, *args): return ___init__.VariantVector_reserve(self, *args)
    def capacity(self): return ___init__.VariantVector_capacity(self)
    def iterator(self):
        return VectorIterator(self)
    def insert(self, i, x):
        if isinstance(i, int): # "insert" is used as if the vector is a Python list
            ___init__.VariantVector___cpp_insert(self, self.begin() + i, x)
        else: # "insert" is used as if the vector is a native C++ container
            return ___init__.VariantVector___cpp_insert(self, i, x)

    __swig_destroy__ = ___init__.delete_VariantVector
    __del__ = lambda self : None;
VariantVector_swigregister = ___init__.VariantVector_swigregister
VariantVector_swigregister(VariantVector)

import __unittesthelper__
class DataValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataValue, name)
    __swig_setmethods__["data"] = ___init__.DataValue_data_set
    __swig_getmethods__["data"] = ___init__.DataValue_data_get
    if _newclass:data = _swig_property(___init__.DataValue_data_get, ___init__.DataValue_data_set)
    __swig_setmethods__["status"] = ___init__.DataValue_status_set
    __swig_getmethods__["status"] = ___init__.DataValue_status_get
    if _newclass:status = _swig_property(___init__.DataValue_status_get, ___init__.DataValue_status_set)
    __swig_setmethods__["sourceTimestamp"] = ___init__.DataValue_sourceTimestamp_set
    __swig_getmethods__["sourceTimestamp"] = ___init__.DataValue_sourceTimestamp_get
    if _newclass:sourceTimestamp = _swig_property(___init__.DataValue_sourceTimestamp_get, ___init__.DataValue_sourceTimestamp_set)
    __swig_setmethods__["serverTimestamp"] = ___init__.DataValue_serverTimestamp_set
    __swig_getmethods__["serverTimestamp"] = ___init__.DataValue_serverTimestamp_get
    if _newclass:serverTimestamp = _swig_property(___init__.DataValue_serverTimestamp_get, ___init__.DataValue_serverTimestamp_set)
    __swig_setmethods__["sourcePicoseconds"] = ___init__.DataValue_sourcePicoseconds_set
    __swig_getmethods__["sourcePicoseconds"] = ___init__.DataValue_sourcePicoseconds_get
    if _newclass:sourcePicoseconds = _swig_property(___init__.DataValue_sourcePicoseconds_get, ___init__.DataValue_sourcePicoseconds_set)
    __swig_setmethods__["serverPicoseconds"] = ___init__.DataValue_serverPicoseconds_set
    __swig_getmethods__["serverPicoseconds"] = ___init__.DataValue_serverPicoseconds_get
    if _newclass:serverPicoseconds = _swig_property(___init__.DataValue_serverPicoseconds_get, ___init__.DataValue_serverPicoseconds_set)
    def __str__(self, indent="", colon=21): return ___init__.DataValue___str__(self, indent, colon)
    def toCompactString(self): return ___init__.DataValue_toCompactString(self)
    def __repr__(self): return ___init__.DataValue___repr__(self)
    def __eq__(self, *args): return ___init__.DataValue___eq__(self, *args)
    def __ne__(self, *args): return ___init__.DataValue___ne__(self, *args)
    def __lt__(self, *args): return ___init__.DataValue___lt__(self, *args)
    def __gt__(self, *args): return ___init__.DataValue___gt__(self, *args)
    def __ge__(self, *args): return ___init__.DataValue___ge__(self, *args)
    def __le__(self, *args): return ___init__.DataValue___le__(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_DataValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_DataValue
    __del__ = lambda self : None;
DataValue_swigregister = ___init__.DataValue_swigregister
DataValue_swigregister(DataValue)

class DataValueVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataValueVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataValueVector, name)
    __repr__ = _swig_repr
    def iterator(self): return ___init__.DataValueVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return ___init__.DataValueVector___nonzero__(self)
    def __bool__(self): return ___init__.DataValueVector___bool__(self)
    def __len__(self): return ___init__.DataValueVector___len__(self)
    def pop(self): return ___init__.DataValueVector_pop(self)
    def __getslice__(self, *args): return ___init__.DataValueVector___getslice__(self, *args)
    def __setslice__(self, *args): return ___init__.DataValueVector___setslice__(self, *args)
    def __delslice__(self, *args): return ___init__.DataValueVector___delslice__(self, *args)
    def __delitem__(self, *args): return ___init__.DataValueVector___delitem__(self, *args)
    def __getitem__(self, *args): return ___init__.DataValueVector___getitem__(self, *args)
    def __setitem__(self, *args): return ___init__.DataValueVector___setitem__(self, *args)
    def append(self, *args): return ___init__.DataValueVector_append(self, *args)
    def empty(self): return ___init__.DataValueVector_empty(self)
    def size(self): return ___init__.DataValueVector_size(self)
    def clear(self): return ___init__.DataValueVector_clear(self)
    def swap(self, *args): return ___init__.DataValueVector_swap(self, *args)
    def get_allocator(self): return ___init__.DataValueVector_get_allocator(self)
    def begin(self): return ___init__.DataValueVector_begin(self)
    def end(self): return ___init__.DataValueVector_end(self)
    def rbegin(self): return ___init__.DataValueVector_rbegin(self)
    def rend(self): return ___init__.DataValueVector_rend(self)
    def pop_back(self): return ___init__.DataValueVector_pop_back(self)
    def erase(self, *args): return ___init__.DataValueVector_erase(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_DataValueVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return ___init__.DataValueVector_push_back(self, *args)
    def front(self): return ___init__.DataValueVector_front(self)
    def back(self): return ___init__.DataValueVector_back(self)
    def assign(self, *args): return ___init__.DataValueVector_assign(self, *args)
    def resize(self, *args): return ___init__.DataValueVector_resize(self, *args)
    def insert(self, *args): return ___init__.DataValueVector_insert(self, *args)
    def reserve(self, *args): return ___init__.DataValueVector_reserve(self, *args)
    def capacity(self): return ___init__.DataValueVector_capacity(self)
    __swig_destroy__ = ___init__.delete_DataValueVector
    __del__ = lambda self : None;
DataValueVector_swigregister = ___init__.DataValueVector_swigregister
DataValueVector_swigregister(DataValueVector)

# This file is compatible with both classic and new-style classes.


