# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_settings', [dirname(__file__)])
        except ImportError:
            import _settings
            return _settings
        if fp is not None:
            try:
                _mod = imp.load_module('_settings', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _settings = swig_import_helper()
    del swig_import_helper
else:
    import _settings
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _settings.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _settings.SwigPyIterator_value(self)
    def incr(self, n=1): return _settings.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _settings.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _settings.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _settings.SwigPyIterator_equal(self, *args)
    def copy(self): return _settings.SwigPyIterator_copy(self)
    def next(self): return _settings.SwigPyIterator_next(self)
    def __next__(self): return _settings.SwigPyIterator___next__(self)
    def previous(self): return _settings.SwigPyIterator_previous(self)
    def advance(self, *args): return _settings.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _settings.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _settings.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _settings.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _settings.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _settings.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _settings.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _settings.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import pyuaf.util
import pyuaf.util.messagesecuritymodes
import pyuaf.util.usertokentypes
import pyuaf.util.loglevels
import pyuaf.util.applicationtypes
import pyuaf.util.attributeids
import pyuaf.util.constants
import pyuaf.util.nodeididentifiertypes
import pyuaf.util.statuscodes
import pyuaf.util.opcuatypes
import pyuaf.util.opcuaidentifiers
import pyuaf.util.primitives
import pyuaf.util.securitypolicies
import pyuaf.util.monitoringmodes
import pyuaf.util.browsedirections
import pyuaf.util.nodeclasses
import pyuaf.util.timestampstoreturn
import pyuaf.util.__unittesthelper__
class ClientSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientSettings, name)
    __swig_setmethods__["applicationName"] = _settings.ClientSettings_applicationName_set
    __swig_getmethods__["applicationName"] = _settings.ClientSettings_applicationName_get
    if _newclass:applicationName = _swig_property(_settings.ClientSettings_applicationName_get, _settings.ClientSettings_applicationName_set)
    __swig_setmethods__["applicationUri"] = _settings.ClientSettings_applicationUri_set
    __swig_getmethods__["applicationUri"] = _settings.ClientSettings_applicationUri_get
    if _newclass:applicationUri = _swig_property(_settings.ClientSettings_applicationUri_get, _settings.ClientSettings_applicationUri_set)
    __swig_setmethods__["productUri"] = _settings.ClientSettings_productUri_set
    __swig_getmethods__["productUri"] = _settings.ClientSettings_productUri_get
    if _newclass:productUri = _swig_property(_settings.ClientSettings_productUri_get, _settings.ClientSettings_productUri_set)
    __swig_setmethods__["localeId"] = _settings.ClientSettings_localeId_set
    __swig_getmethods__["localeId"] = _settings.ClientSettings_localeId_get
    if _newclass:localeId = _swig_property(_settings.ClientSettings_localeId_get, _settings.ClientSettings_localeId_set)
    __swig_setmethods__["logToStdOutLevel"] = _settings.ClientSettings_logToStdOutLevel_set
    __swig_getmethods__["logToStdOutLevel"] = _settings.ClientSettings_logToStdOutLevel_get
    if _newclass:logToStdOutLevel = _swig_property(_settings.ClientSettings_logToStdOutLevel_get, _settings.ClientSettings_logToStdOutLevel_set)
    __swig_setmethods__["logToCallbackLevel"] = _settings.ClientSettings_logToCallbackLevel_set
    __swig_getmethods__["logToCallbackLevel"] = _settings.ClientSettings_logToCallbackLevel_get
    if _newclass:logToCallbackLevel = _swig_property(_settings.ClientSettings_logToCallbackLevel_get, _settings.ClientSettings_logToCallbackLevel_set)
    __swig_setmethods__["discoveryUrls"] = _settings.ClientSettings_discoveryUrls_set
    __swig_getmethods__["discoveryUrls"] = _settings.ClientSettings_discoveryUrls_get
    if _newclass:discoveryUrls = _swig_property(_settings.ClientSettings_discoveryUrls_get, _settings.ClientSettings_discoveryUrls_set)
    __swig_setmethods__["discoveryFindServersTimeoutSec"] = _settings.ClientSettings_discoveryFindServersTimeoutSec_set
    __swig_getmethods__["discoveryFindServersTimeoutSec"] = _settings.ClientSettings_discoveryFindServersTimeoutSec_get
    if _newclass:discoveryFindServersTimeoutSec = _swig_property(_settings.ClientSettings_discoveryFindServersTimeoutSec_get, _settings.ClientSettings_discoveryFindServersTimeoutSec_set)
    __swig_setmethods__["discoveryGetEndpointsTimeoutSec"] = _settings.ClientSettings_discoveryGetEndpointsTimeoutSec_set
    __swig_getmethods__["discoveryGetEndpointsTimeoutSec"] = _settings.ClientSettings_discoveryGetEndpointsTimeoutSec_get
    if _newclass:discoveryGetEndpointsTimeoutSec = _swig_property(_settings.ClientSettings_discoveryGetEndpointsTimeoutSec_get, _settings.ClientSettings_discoveryGetEndpointsTimeoutSec_set)
    __swig_setmethods__["discoveryIntervalSec"] = _settings.ClientSettings_discoveryIntervalSec_set
    __swig_getmethods__["discoveryIntervalSec"] = _settings.ClientSettings_discoveryIntervalSec_get
    if _newclass:discoveryIntervalSec = _swig_property(_settings.ClientSettings_discoveryIntervalSec_get, _settings.ClientSettings_discoveryIntervalSec_set)
    __swig_setmethods__["certificateRevocationListAbsoluteFileName"] = _settings.ClientSettings_certificateRevocationListAbsoluteFileName_set
    __swig_getmethods__["certificateRevocationListAbsoluteFileName"] = _settings.ClientSettings_certificateRevocationListAbsoluteFileName_get
    if _newclass:certificateRevocationListAbsoluteFileName = _swig_property(_settings.ClientSettings_certificateRevocationListAbsoluteFileName_get, _settings.ClientSettings_certificateRevocationListAbsoluteFileName_set)
    __swig_setmethods__["certificateTrustAbsoluteDirectory"] = _settings.ClientSettings_certificateTrustAbsoluteDirectory_set
    __swig_getmethods__["certificateTrustAbsoluteDirectory"] = _settings.ClientSettings_certificateTrustAbsoluteDirectory_get
    if _newclass:certificateTrustAbsoluteDirectory = _swig_property(_settings.ClientSettings_certificateTrustAbsoluteDirectory_get, _settings.ClientSettings_certificateTrustAbsoluteDirectory_set)
    __swig_setmethods__["clientCertificateAbsoluteFileName"] = _settings.ClientSettings_clientCertificateAbsoluteFileName_set
    __swig_getmethods__["clientCertificateAbsoluteFileName"] = _settings.ClientSettings_clientCertificateAbsoluteFileName_get
    if _newclass:clientCertificateAbsoluteFileName = _swig_property(_settings.ClientSettings_clientCertificateAbsoluteFileName_get, _settings.ClientSettings_clientCertificateAbsoluteFileName_set)
    __swig_setmethods__["clientPrivateKeyAbsoluteFileName"] = _settings.ClientSettings_clientPrivateKeyAbsoluteFileName_set
    __swig_getmethods__["clientPrivateKeyAbsoluteFileName"] = _settings.ClientSettings_clientPrivateKeyAbsoluteFileName_get
    if _newclass:clientPrivateKeyAbsoluteFileName = _swig_property(_settings.ClientSettings_clientPrivateKeyAbsoluteFileName_get, _settings.ClientSettings_clientPrivateKeyAbsoluteFileName_set)
    __swig_setmethods__["serverCertificateAbsoluteFileName"] = _settings.ClientSettings_serverCertificateAbsoluteFileName_set
    __swig_getmethods__["serverCertificateAbsoluteFileName"] = _settings.ClientSettings_serverCertificateAbsoluteFileName_get
    if _newclass:serverCertificateAbsoluteFileName = _swig_property(_settings.ClientSettings_serverCertificateAbsoluteFileName_get, _settings.ClientSettings_serverCertificateAbsoluteFileName_set)
    def __str__(self, indent="", colon=50): return _settings.ClientSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.ClientSettings___repr__(self)
    def __eq__(self, *args): return _settings.ClientSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.ClientSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.ClientSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.ClientSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.ClientSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.ClientSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_ClientSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_ClientSettings
    __del__ = lambda self : None;
ClientSettings_swigregister = _settings.ClientSettings_swigregister
ClientSettings_swigregister(ClientSettings)

class ServiceSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceSettings, name)
    __swig_setmethods__["callTimeoutSec"] = _settings.ServiceSettings_callTimeoutSec_set
    __swig_getmethods__["callTimeoutSec"] = _settings.ServiceSettings_callTimeoutSec_get
    if _newclass:callTimeoutSec = _swig_property(_settings.ServiceSettings_callTimeoutSec_get, _settings.ServiceSettings_callTimeoutSec_set)
    def __str__(self, indent="", colon=18): return _settings.ServiceSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.ServiceSettings___repr__(self)
    def __eq__(self, *args): return _settings.ServiceSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.ServiceSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.ServiceSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.ServiceSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.ServiceSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.ServiceSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_ServiceSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_ServiceSettings
    __del__ = lambda self : None;
ServiceSettings_swigregister = _settings.ServiceSettings_swigregister
ServiceSettings_swigregister(ServiceSettings)

class SessionSecuritySettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSecuritySettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSecuritySettings, name)
    __swig_setmethods__["securityPolicy"] = _settings.SessionSecuritySettings_securityPolicy_set
    __swig_getmethods__["securityPolicy"] = _settings.SessionSecuritySettings_securityPolicy_get
    if _newclass:securityPolicy = _swig_property(_settings.SessionSecuritySettings_securityPolicy_get, _settings.SessionSecuritySettings_securityPolicy_set)
    __swig_setmethods__["messageSecurityMode"] = _settings.SessionSecuritySettings_messageSecurityMode_set
    __swig_getmethods__["messageSecurityMode"] = _settings.SessionSecuritySettings_messageSecurityMode_get
    if _newclass:messageSecurityMode = _swig_property(_settings.SessionSecuritySettings_messageSecurityMode_get, _settings.SessionSecuritySettings_messageSecurityMode_set)
    __swig_setmethods__["userTokenType"] = _settings.SessionSecuritySettings_userTokenType_set
    __swig_getmethods__["userTokenType"] = _settings.SessionSecuritySettings_userTokenType_get
    if _newclass:userTokenType = _swig_property(_settings.SessionSecuritySettings_userTokenType_get, _settings.SessionSecuritySettings_userTokenType_set)
    __swig_setmethods__["userName"] = _settings.SessionSecuritySettings_userName_set
    __swig_getmethods__["userName"] = _settings.SessionSecuritySettings_userName_get
    if _newclass:userName = _swig_property(_settings.SessionSecuritySettings_userName_get, _settings.SessionSecuritySettings_userName_set)
    __swig_setmethods__["userPassword"] = _settings.SessionSecuritySettings_userPassword_set
    __swig_getmethods__["userPassword"] = _settings.SessionSecuritySettings_userPassword_get
    if _newclass:userPassword = _swig_property(_settings.SessionSecuritySettings_userPassword_get, _settings.SessionSecuritySettings_userPassword_set)
    __swig_setmethods__["userCertificateFileName"] = _settings.SessionSecuritySettings_userCertificateFileName_set
    __swig_getmethods__["userCertificateFileName"] = _settings.SessionSecuritySettings_userCertificateFileName_get
    if _newclass:userCertificateFileName = _swig_property(_settings.SessionSecuritySettings_userCertificateFileName_get, _settings.SessionSecuritySettings_userCertificateFileName_set)
    __swig_setmethods__["userPrivateKeyFileName"] = _settings.SessionSecuritySettings_userPrivateKeyFileName_set
    __swig_getmethods__["userPrivateKeyFileName"] = _settings.SessionSecuritySettings_userPrivateKeyFileName_get
    if _newclass:userPrivateKeyFileName = _swig_property(_settings.SessionSecuritySettings_userPrivateKeyFileName_get, _settings.SessionSecuritySettings_userPrivateKeyFileName_set)
    def __str__(self, indent="", colon=28): return _settings.SessionSecuritySettings___str__(self, indent, colon)
    def __repr__(self): return _settings.SessionSecuritySettings___repr__(self)
    def __eq__(self, *args): return _settings.SessionSecuritySettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.SessionSecuritySettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.SessionSecuritySettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.SessionSecuritySettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.SessionSecuritySettings___ge__(self, *args)
    def __le__(self, *args): return _settings.SessionSecuritySettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_SessionSecuritySettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_SessionSecuritySettings
    __del__ = lambda self : None;
SessionSecuritySettings_swigregister = _settings.SessionSecuritySettings_swigregister
SessionSecuritySettings_swigregister(SessionSecuritySettings)


def match(*args):
  return _settings.match(*args)
match = _settings.match
class SessionSecuritySettingsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSecuritySettingsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSecuritySettingsVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _settings.SessionSecuritySettingsVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _settings.SessionSecuritySettingsVector___nonzero__(self)
    def __bool__(self): return _settings.SessionSecuritySettingsVector___bool__(self)
    def __len__(self): return _settings.SessionSecuritySettingsVector___len__(self)
    def pop(self): return _settings.SessionSecuritySettingsVector_pop(self)
    def __getslice__(self, *args): return _settings.SessionSecuritySettingsVector___getslice__(self, *args)
    def __setslice__(self, *args): return _settings.SessionSecuritySettingsVector___setslice__(self, *args)
    def __delslice__(self, *args): return _settings.SessionSecuritySettingsVector___delslice__(self, *args)
    def __delitem__(self, *args): return _settings.SessionSecuritySettingsVector___delitem__(self, *args)
    def __getitem__(self, *args): return _settings.SessionSecuritySettingsVector___getitem__(self, *args)
    def __setitem__(self, *args): return _settings.SessionSecuritySettingsVector___setitem__(self, *args)
    def append(self, *args): return _settings.SessionSecuritySettingsVector_append(self, *args)
    def empty(self): return _settings.SessionSecuritySettingsVector_empty(self)
    def size(self): return _settings.SessionSecuritySettingsVector_size(self)
    def clear(self): return _settings.SessionSecuritySettingsVector_clear(self)
    def swap(self, *args): return _settings.SessionSecuritySettingsVector_swap(self, *args)
    def get_allocator(self): return _settings.SessionSecuritySettingsVector_get_allocator(self)
    def begin(self): return _settings.SessionSecuritySettingsVector_begin(self)
    def end(self): return _settings.SessionSecuritySettingsVector_end(self)
    def rbegin(self): return _settings.SessionSecuritySettingsVector_rbegin(self)
    def rend(self): return _settings.SessionSecuritySettingsVector_rend(self)
    def pop_back(self): return _settings.SessionSecuritySettingsVector_pop_back(self)
    def erase(self, *args): return _settings.SessionSecuritySettingsVector_erase(self, *args)
    def __init__(self, *args): 
        this = _settings.new_SessionSecuritySettingsVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _settings.SessionSecuritySettingsVector_push_back(self, *args)
    def front(self): return _settings.SessionSecuritySettingsVector_front(self)
    def back(self): return _settings.SessionSecuritySettingsVector_back(self)
    def assign(self, *args): return _settings.SessionSecuritySettingsVector_assign(self, *args)
    def resize(self, *args): return _settings.SessionSecuritySettingsVector_resize(self, *args)
    def insert(self, *args): return _settings.SessionSecuritySettingsVector_insert(self, *args)
    def reserve(self, *args): return _settings.SessionSecuritySettingsVector_reserve(self, *args)
    def capacity(self): return _settings.SessionSecuritySettingsVector_capacity(self)
    __swig_destroy__ = _settings.delete_SessionSecuritySettingsVector
    __del__ = lambda self : None;
SessionSecuritySettingsVector_swigregister = _settings.SessionSecuritySettingsVector_swigregister
SessionSecuritySettingsVector_swigregister(SessionSecuritySettingsVector)

class SessionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSettings, name)
    __swig_setmethods__["sessionTimeoutSec"] = _settings.SessionSettings_sessionTimeoutSec_set
    __swig_getmethods__["sessionTimeoutSec"] = _settings.SessionSettings_sessionTimeoutSec_get
    if _newclass:sessionTimeoutSec = _swig_property(_settings.SessionSettings_sessionTimeoutSec_get, _settings.SessionSettings_sessionTimeoutSec_set)
    __swig_setmethods__["connectTimeoutSec"] = _settings.SessionSettings_connectTimeoutSec_set
    __swig_getmethods__["connectTimeoutSec"] = _settings.SessionSettings_connectTimeoutSec_get
    if _newclass:connectTimeoutSec = _swig_property(_settings.SessionSettings_connectTimeoutSec_get, _settings.SessionSettings_connectTimeoutSec_set)
    __swig_setmethods__["watchdogTimeSec"] = _settings.SessionSettings_watchdogTimeSec_set
    __swig_getmethods__["watchdogTimeSec"] = _settings.SessionSettings_watchdogTimeSec_get
    if _newclass:watchdogTimeSec = _swig_property(_settings.SessionSettings_watchdogTimeSec_get, _settings.SessionSettings_watchdogTimeSec_set)
    __swig_setmethods__["watchdogTimeoutSec"] = _settings.SessionSettings_watchdogTimeoutSec_set
    __swig_getmethods__["watchdogTimeoutSec"] = _settings.SessionSettings_watchdogTimeoutSec_get
    if _newclass:watchdogTimeoutSec = _swig_property(_settings.SessionSettings_watchdogTimeoutSec_get, _settings.SessionSettings_watchdogTimeoutSec_set)
    __swig_setmethods__["readServerInfoSettings"] = _settings.SessionSettings_readServerInfoSettings_set
    __swig_getmethods__["readServerInfoSettings"] = _settings.SessionSettings_readServerInfoSettings_get
    if _newclass:readServerInfoSettings = _swig_property(_settings.SessionSettings_readServerInfoSettings_get, _settings.SessionSettings_readServerInfoSettings_set)
    __swig_setmethods__["securitySettingsList"] = _settings.SessionSettings_securitySettingsList_set
    __swig_getmethods__["securitySettingsList"] = _settings.SessionSettings_securitySettingsList_get
    if _newclass:securitySettingsList = _swig_property(_settings.SessionSettings_securitySettingsList_get, _settings.SessionSettings_securitySettingsList_set)
    def __str__(self, indent="", colon=22): return _settings.SessionSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.SessionSettings___repr__(self)
    def __eq__(self, *args): return _settings.SessionSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.SessionSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.SessionSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.SessionSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.SessionSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.SessionSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_SessionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_SessionSettings
    __del__ = lambda self : None;
SessionSettings_swigregister = _settings.SessionSettings_swigregister
SessionSettings_swigregister(SessionSettings)

class SubscriptionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionSettings, name)
    __swig_setmethods__["unique"] = _settings.SubscriptionSettings_unique_set
    __swig_getmethods__["unique"] = _settings.SubscriptionSettings_unique_get
    if _newclass:unique = _swig_property(_settings.SubscriptionSettings_unique_get, _settings.SubscriptionSettings_unique_set)
    __swig_setmethods__["publishingIntervalSec"] = _settings.SubscriptionSettings_publishingIntervalSec_set
    __swig_getmethods__["publishingIntervalSec"] = _settings.SubscriptionSettings_publishingIntervalSec_get
    if _newclass:publishingIntervalSec = _swig_property(_settings.SubscriptionSettings_publishingIntervalSec_get, _settings.SubscriptionSettings_publishingIntervalSec_set)
    __swig_setmethods__["lifeTimeCount"] = _settings.SubscriptionSettings_lifeTimeCount_set
    __swig_getmethods__["lifeTimeCount"] = _settings.SubscriptionSettings_lifeTimeCount_get
    if _newclass:lifeTimeCount = _swig_property(_settings.SubscriptionSettings_lifeTimeCount_get, _settings.SubscriptionSettings_lifeTimeCount_set)
    __swig_setmethods__["maxKeepAliveCount"] = _settings.SubscriptionSettings_maxKeepAliveCount_set
    __swig_getmethods__["maxKeepAliveCount"] = _settings.SubscriptionSettings_maxKeepAliveCount_get
    if _newclass:maxKeepAliveCount = _swig_property(_settings.SubscriptionSettings_maxKeepAliveCount_get, _settings.SubscriptionSettings_maxKeepAliveCount_set)
    __swig_setmethods__["maxNotificationsPerPublish"] = _settings.SubscriptionSettings_maxNotificationsPerPublish_set
    __swig_getmethods__["maxNotificationsPerPublish"] = _settings.SubscriptionSettings_maxNotificationsPerPublish_get
    if _newclass:maxNotificationsPerPublish = _swig_property(_settings.SubscriptionSettings_maxNotificationsPerPublish_get, _settings.SubscriptionSettings_maxNotificationsPerPublish_set)
    __swig_setmethods__["priority"] = _settings.SubscriptionSettings_priority_set
    __swig_getmethods__["priority"] = _settings.SubscriptionSettings_priority_get
    if _newclass:priority = _swig_property(_settings.SubscriptionSettings_priority_get, _settings.SubscriptionSettings_priority_set)
    def __str__(self, indent="", colon=30): return _settings.SubscriptionSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.SubscriptionSettings___repr__(self)
    def __eq__(self, *args): return _settings.SubscriptionSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.SubscriptionSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.SubscriptionSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.SubscriptionSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.SubscriptionSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.SubscriptionSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_SubscriptionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_SubscriptionSettings
    __del__ = lambda self : None;
SubscriptionSettings_swigregister = _settings.SubscriptionSettings_swigregister
SubscriptionSettings_swigregister(SubscriptionSettings)

class MonitoredItemSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonitoredItemSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonitoredItemSettings, name)
    Data = _settings.MonitoredItemSettings_Data
    Event = _settings.MonitoredItemSettings_Event
    def __init__(self, *args): 
        this = _settings.new_MonitoredItemSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_MonitoredItemSettings
    __del__ = lambda self : None;
    __swig_setmethods__["dataChangeFilter"] = _settings.MonitoredItemSettings_dataChangeFilter_set
    __swig_getmethods__["dataChangeFilter"] = _settings.MonitoredItemSettings_dataChangeFilter_get
    if _newclass:dataChangeFilter = _swig_property(_settings.MonitoredItemSettings_dataChangeFilter_get, _settings.MonitoredItemSettings_dataChangeFilter_set)
    __swig_setmethods__["eventFilter"] = _settings.MonitoredItemSettings_eventFilter_set
    __swig_getmethods__["eventFilter"] = _settings.MonitoredItemSettings_eventFilter_get
    if _newclass:eventFilter = _swig_property(_settings.MonitoredItemSettings_eventFilter_get, _settings.MonitoredItemSettings_eventFilter_set)
    __swig_setmethods__["samplingIntervalSec"] = _settings.MonitoredItemSettings_samplingIntervalSec_set
    __swig_getmethods__["samplingIntervalSec"] = _settings.MonitoredItemSettings_samplingIntervalSec_get
    if _newclass:samplingIntervalSec = _swig_property(_settings.MonitoredItemSettings_samplingIntervalSec_get, _settings.MonitoredItemSettings_samplingIntervalSec_set)
    __swig_setmethods__["queueSize"] = _settings.MonitoredItemSettings_queueSize_set
    __swig_getmethods__["queueSize"] = _settings.MonitoredItemSettings_queueSize_get
    if _newclass:queueSize = _swig_property(_settings.MonitoredItemSettings_queueSize_get, _settings.MonitoredItemSettings_queueSize_set)
    __swig_setmethods__["discardOldest"] = _settings.MonitoredItemSettings_discardOldest_set
    __swig_getmethods__["discardOldest"] = _settings.MonitoredItemSettings_discardOldest_get
    if _newclass:discardOldest = _swig_property(_settings.MonitoredItemSettings_discardOldest_get, _settings.MonitoredItemSettings_discardOldest_set)
    def kind(self): return _settings.MonitoredItemSettings_kind(self)
    def __str__(self, indent="", colon=23): return _settings.MonitoredItemSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.MonitoredItemSettings___repr__(self)
    def __eq__(self, *args): return _settings.MonitoredItemSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.MonitoredItemSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.MonitoredItemSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.MonitoredItemSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.MonitoredItemSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.MonitoredItemSettings___le__(self, *args)
MonitoredItemSettings_swigregister = _settings.MonitoredItemSettings_swigregister
MonitoredItemSettings_swigregister(MonitoredItemSettings)

class ReadSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadSettings, name)
    __swig_destroy__ = _settings.delete_ReadSettings
    __del__ = lambda self : None;
    __swig_setmethods__["maxAgeSec"] = _settings.ReadSettings_maxAgeSec_set
    __swig_getmethods__["maxAgeSec"] = _settings.ReadSettings_maxAgeSec_get
    if _newclass:maxAgeSec = _swig_property(_settings.ReadSettings_maxAgeSec_get, _settings.ReadSettings_maxAgeSec_set)
    def __str__(self, indent="", colon=18): return _settings.ReadSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.ReadSettings___repr__(self)
    def __eq__(self, *args): return _settings.ReadSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.ReadSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.ReadSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.ReadSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.ReadSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.ReadSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_ReadSettings(*args)
        try: self.this.append(this)
        except: self.this = this
ReadSettings_swigregister = _settings.ReadSettings_swigregister
ReadSettings_swigregister(ReadSettings)

class WriteSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriteSettings, name)
    def __repr__(self): return _settings.WriteSettings___repr__(self)
    def __eq__(self, *args): return _settings.WriteSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.WriteSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.WriteSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.WriteSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.WriteSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.WriteSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_WriteSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_WriteSettings
    __del__ = lambda self : None;
WriteSettings_swigregister = _settings.WriteSettings_swigregister
WriteSettings_swigregister(WriteSettings)

class HistoryReadRawModifiedSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedSettings, name)
    __swig_destroy__ = _settings.delete_HistoryReadRawModifiedSettings
    __del__ = lambda self : None;
    __swig_setmethods__["startTime"] = _settings.HistoryReadRawModifiedSettings_startTime_set
    __swig_getmethods__["startTime"] = _settings.HistoryReadRawModifiedSettings_startTime_get
    if _newclass:startTime = _swig_property(_settings.HistoryReadRawModifiedSettings_startTime_get, _settings.HistoryReadRawModifiedSettings_startTime_set)
    __swig_setmethods__["endTime"] = _settings.HistoryReadRawModifiedSettings_endTime_set
    __swig_getmethods__["endTime"] = _settings.HistoryReadRawModifiedSettings_endTime_get
    if _newclass:endTime = _swig_property(_settings.HistoryReadRawModifiedSettings_endTime_get, _settings.HistoryReadRawModifiedSettings_endTime_set)
    __swig_setmethods__["isReadModified"] = _settings.HistoryReadRawModifiedSettings_isReadModified_set
    __swig_getmethods__["isReadModified"] = _settings.HistoryReadRawModifiedSettings_isReadModified_get
    if _newclass:isReadModified = _swig_property(_settings.HistoryReadRawModifiedSettings_isReadModified_get, _settings.HistoryReadRawModifiedSettings_isReadModified_set)
    __swig_setmethods__["maxAutoReadMore"] = _settings.HistoryReadRawModifiedSettings_maxAutoReadMore_set
    __swig_getmethods__["maxAutoReadMore"] = _settings.HistoryReadRawModifiedSettings_maxAutoReadMore_get
    if _newclass:maxAutoReadMore = _swig_property(_settings.HistoryReadRawModifiedSettings_maxAutoReadMore_get, _settings.HistoryReadRawModifiedSettings_maxAutoReadMore_set)
    __swig_setmethods__["numValuesPerNode"] = _settings.HistoryReadRawModifiedSettings_numValuesPerNode_set
    __swig_getmethods__["numValuesPerNode"] = _settings.HistoryReadRawModifiedSettings_numValuesPerNode_get
    if _newclass:numValuesPerNode = _swig_property(_settings.HistoryReadRawModifiedSettings_numValuesPerNode_get, _settings.HistoryReadRawModifiedSettings_numValuesPerNode_set)
    __swig_setmethods__["returnBounds"] = _settings.HistoryReadRawModifiedSettings_returnBounds_set
    __swig_getmethods__["returnBounds"] = _settings.HistoryReadRawModifiedSettings_returnBounds_get
    if _newclass:returnBounds = _swig_property(_settings.HistoryReadRawModifiedSettings_returnBounds_get, _settings.HistoryReadRawModifiedSettings_returnBounds_set)
    __swig_setmethods__["timestampsToReturn"] = _settings.HistoryReadRawModifiedSettings_timestampsToReturn_set
    __swig_getmethods__["timestampsToReturn"] = _settings.HistoryReadRawModifiedSettings_timestampsToReturn_get
    if _newclass:timestampsToReturn = _swig_property(_settings.HistoryReadRawModifiedSettings_timestampsToReturn_get, _settings.HistoryReadRawModifiedSettings_timestampsToReturn_set)
    __swig_setmethods__["releaseContinuationPoints"] = _settings.HistoryReadRawModifiedSettings_releaseContinuationPoints_set
    __swig_getmethods__["releaseContinuationPoints"] = _settings.HistoryReadRawModifiedSettings_releaseContinuationPoints_get
    if _newclass:releaseContinuationPoints = _swig_property(_settings.HistoryReadRawModifiedSettings_releaseContinuationPoints_get, _settings.HistoryReadRawModifiedSettings_releaseContinuationPoints_set)
    def __str__(self, indent="", colon=28): return _settings.HistoryReadRawModifiedSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.HistoryReadRawModifiedSettings___repr__(self)
    def __eq__(self, *args): return _settings.HistoryReadRawModifiedSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.HistoryReadRawModifiedSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.HistoryReadRawModifiedSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.HistoryReadRawModifiedSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.HistoryReadRawModifiedSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.HistoryReadRawModifiedSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_HistoryReadRawModifiedSettings(*args)
        try: self.this.append(this)
        except: self.this = this
HistoryReadRawModifiedSettings_swigregister = _settings.HistoryReadRawModifiedSettings_swigregister
HistoryReadRawModifiedSettings_swigregister(HistoryReadRawModifiedSettings)

class MethodCallSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallSettings, name)
    def __repr__(self): return _settings.MethodCallSettings___repr__(self)
    def __eq__(self, *args): return _settings.MethodCallSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.MethodCallSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.MethodCallSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.MethodCallSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.MethodCallSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.MethodCallSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_MethodCallSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_MethodCallSettings
    __del__ = lambda self : None;
MethodCallSettings_swigregister = _settings.MethodCallSettings_swigregister
MethodCallSettings_swigregister(MethodCallSettings)

class TranslateBrowsePathsToNodeIdsSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsSettings, name)
    def __repr__(self): return _settings.TranslateBrowsePathsToNodeIdsSettings___repr__(self)
    def __eq__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.TranslateBrowsePathsToNodeIdsSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_TranslateBrowsePathsToNodeIdsSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_TranslateBrowsePathsToNodeIdsSettings
    __del__ = lambda self : None;
TranslateBrowsePathsToNodeIdsSettings_swigregister = _settings.TranslateBrowsePathsToNodeIdsSettings_swigregister
TranslateBrowsePathsToNodeIdsSettings_swigregister(TranslateBrowsePathsToNodeIdsSettings)

class BrowseSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseSettings, name)
    __swig_destroy__ = _settings.delete_BrowseSettings
    __del__ = lambda self : None;
    __swig_setmethods__["maxReferencesToReturn"] = _settings.BrowseSettings_maxReferencesToReturn_set
    __swig_getmethods__["maxReferencesToReturn"] = _settings.BrowseSettings_maxReferencesToReturn_get
    if _newclass:maxReferencesToReturn = _swig_property(_settings.BrowseSettings_maxReferencesToReturn_get, _settings.BrowseSettings_maxReferencesToReturn_set)
    __swig_setmethods__["view"] = _settings.BrowseSettings_view_set
    __swig_getmethods__["view"] = _settings.BrowseSettings_view_get
    if _newclass:view = _swig_property(_settings.BrowseSettings_view_get, _settings.BrowseSettings_view_set)
    __swig_setmethods__["maxAutoBrowseNext"] = _settings.BrowseSettings_maxAutoBrowseNext_set
    __swig_getmethods__["maxAutoBrowseNext"] = _settings.BrowseSettings_maxAutoBrowseNext_get
    if _newclass:maxAutoBrowseNext = _swig_property(_settings.BrowseSettings_maxAutoBrowseNext_get, _settings.BrowseSettings_maxAutoBrowseNext_set)
    def __str__(self, indent="", colon=26): return _settings.BrowseSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.BrowseSettings___repr__(self)
    def __eq__(self, *args): return _settings.BrowseSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.BrowseSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.BrowseSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.BrowseSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.BrowseSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.BrowseSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_BrowseSettings(*args)
        try: self.this.append(this)
        except: self.this = this
BrowseSettings_swigregister = _settings.BrowseSettings_swigregister
BrowseSettings_swigregister(BrowseSettings)

class BrowseNextSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseNextSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseNextSettings, name)
    __swig_destroy__ = _settings.delete_BrowseNextSettings
    __del__ = lambda self : None;
    __swig_setmethods__["releaseContinuationPoints"] = _settings.BrowseNextSettings_releaseContinuationPoints_set
    __swig_getmethods__["releaseContinuationPoints"] = _settings.BrowseNextSettings_releaseContinuationPoints_get
    if _newclass:releaseContinuationPoints = _swig_property(_settings.BrowseNextSettings_releaseContinuationPoints_get, _settings.BrowseNextSettings_releaseContinuationPoints_set)
    def __str__(self, indent="", colon=29): return _settings.BrowseNextSettings___str__(self, indent, colon)
    def __repr__(self): return _settings.BrowseNextSettings___repr__(self)
    def __eq__(self, *args): return _settings.BrowseNextSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.BrowseNextSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.BrowseNextSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.BrowseNextSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.BrowseNextSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.BrowseNextSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_BrowseNextSettings(*args)
        try: self.this.append(this)
        except: self.this = this
BrowseNextSettings_swigregister = _settings.BrowseNextSettings_swigregister
BrowseNextSettings_swigregister(BrowseNextSettings)

class CreateMonitoredDataSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataSettings, name)
    def __repr__(self): return _settings.CreateMonitoredDataSettings___repr__(self)
    def __eq__(self, *args): return _settings.CreateMonitoredDataSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.CreateMonitoredDataSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.CreateMonitoredDataSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.CreateMonitoredDataSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.CreateMonitoredDataSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.CreateMonitoredDataSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_CreateMonitoredDataSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_CreateMonitoredDataSettings
    __del__ = lambda self : None;
CreateMonitoredDataSettings_swigregister = _settings.CreateMonitoredDataSettings_swigregister
CreateMonitoredDataSettings_swigregister(CreateMonitoredDataSettings)

class CreateMonitoredEventsSettings(ServiceSettings):
    __swig_setmethods__ = {}
    for _s in [ServiceSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [ServiceSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsSettings, name)
    def __repr__(self): return _settings.CreateMonitoredEventsSettings___repr__(self)
    def __eq__(self, *args): return _settings.CreateMonitoredEventsSettings___eq__(self, *args)
    def __ne__(self, *args): return _settings.CreateMonitoredEventsSettings___ne__(self, *args)
    def __lt__(self, *args): return _settings.CreateMonitoredEventsSettings___lt__(self, *args)
    def __gt__(self, *args): return _settings.CreateMonitoredEventsSettings___gt__(self, *args)
    def __ge__(self, *args): return _settings.CreateMonitoredEventsSettings___ge__(self, *args)
    def __le__(self, *args): return _settings.CreateMonitoredEventsSettings___le__(self, *args)
    def __init__(self, *args): 
        this = _settings.new_CreateMonitoredEventsSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _settings.delete_CreateMonitoredEventsSettings
    __del__ = lambda self : None;
CreateMonitoredEventsSettings_swigregister = _settings.CreateMonitoredEventsSettings_swigregister
CreateMonitoredEventsSettings_swigregister(CreateMonitoredEventsSettings)

class SpecificSessionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificSessionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificSessionSettings, name)
    __repr__ = _swig_repr
    def iterator(self): return _settings.SpecificSessionSettings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _settings.SpecificSessionSettings___nonzero__(self)
    def __bool__(self): return _settings.SpecificSessionSettings___bool__(self)
    def __len__(self): return _settings.SpecificSessionSettings___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _settings.SpecificSessionSettings___getitem__(self, *args)
    def __delitem__(self, *args): return _settings.SpecificSessionSettings___delitem__(self, *args)
    def has_key(self, *args): return _settings.SpecificSessionSettings_has_key(self, *args)
    def keys(self): return _settings.SpecificSessionSettings_keys(self)
    def values(self): return _settings.SpecificSessionSettings_values(self)
    def items(self): return _settings.SpecificSessionSettings_items(self)
    def __contains__(self, *args): return _settings.SpecificSessionSettings___contains__(self, *args)
    def key_iterator(self): return _settings.SpecificSessionSettings_key_iterator(self)
    def value_iterator(self): return _settings.SpecificSessionSettings_value_iterator(self)
    def __setitem__(self, *args): return _settings.SpecificSessionSettings___setitem__(self, *args)
    def asdict(self): return _settings.SpecificSessionSettings_asdict(self)
    def __init__(self, *args): 
        this = _settings.new_SpecificSessionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _settings.SpecificSessionSettings_empty(self)
    def size(self): return _settings.SpecificSessionSettings_size(self)
    def clear(self): return _settings.SpecificSessionSettings_clear(self)
    def swap(self, *args): return _settings.SpecificSessionSettings_swap(self, *args)
    def get_allocator(self): return _settings.SpecificSessionSettings_get_allocator(self)
    def begin(self): return _settings.SpecificSessionSettings_begin(self)
    def end(self): return _settings.SpecificSessionSettings_end(self)
    def rbegin(self): return _settings.SpecificSessionSettings_rbegin(self)
    def rend(self): return _settings.SpecificSessionSettings_rend(self)
    def count(self, *args): return _settings.SpecificSessionSettings_count(self, *args)
    def erase(self, *args): return _settings.SpecificSessionSettings_erase(self, *args)
    def find(self, *args): return _settings.SpecificSessionSettings_find(self, *args)
    def lower_bound(self, *args): return _settings.SpecificSessionSettings_lower_bound(self, *args)
    def upper_bound(self, *args): return _settings.SpecificSessionSettings_upper_bound(self, *args)
    __swig_destroy__ = _settings.delete_SpecificSessionSettings
    __del__ = lambda self : None;
SpecificSessionSettings_swigregister = _settings.SpecificSessionSettings_swigregister
SpecificSessionSettings_swigregister(SpecificSessionSettings)

class SpecificSubscriptionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificSubscriptionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificSubscriptionSettings, name)
    __repr__ = _swig_repr
    def iterator(self): return _settings.SpecificSubscriptionSettings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _settings.SpecificSubscriptionSettings___nonzero__(self)
    def __bool__(self): return _settings.SpecificSubscriptionSettings___bool__(self)
    def __len__(self): return _settings.SpecificSubscriptionSettings___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _settings.SpecificSubscriptionSettings___getitem__(self, *args)
    def __delitem__(self, *args): return _settings.SpecificSubscriptionSettings___delitem__(self, *args)
    def has_key(self, *args): return _settings.SpecificSubscriptionSettings_has_key(self, *args)
    def keys(self): return _settings.SpecificSubscriptionSettings_keys(self)
    def values(self): return _settings.SpecificSubscriptionSettings_values(self)
    def items(self): return _settings.SpecificSubscriptionSettings_items(self)
    def __contains__(self, *args): return _settings.SpecificSubscriptionSettings___contains__(self, *args)
    def key_iterator(self): return _settings.SpecificSubscriptionSettings_key_iterator(self)
    def value_iterator(self): return _settings.SpecificSubscriptionSettings_value_iterator(self)
    def __setitem__(self, *args): return _settings.SpecificSubscriptionSettings___setitem__(self, *args)
    def asdict(self): return _settings.SpecificSubscriptionSettings_asdict(self)
    def __init__(self, *args): 
        this = _settings.new_SpecificSubscriptionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _settings.SpecificSubscriptionSettings_empty(self)
    def size(self): return _settings.SpecificSubscriptionSettings_size(self)
    def clear(self): return _settings.SpecificSubscriptionSettings_clear(self)
    def swap(self, *args): return _settings.SpecificSubscriptionSettings_swap(self, *args)
    def get_allocator(self): return _settings.SpecificSubscriptionSettings_get_allocator(self)
    def begin(self): return _settings.SpecificSubscriptionSettings_begin(self)
    def end(self): return _settings.SpecificSubscriptionSettings_end(self)
    def rbegin(self): return _settings.SpecificSubscriptionSettings_rbegin(self)
    def rend(self): return _settings.SpecificSubscriptionSettings_rend(self)
    def count(self, *args): return _settings.SpecificSubscriptionSettings_count(self, *args)
    def erase(self, *args): return _settings.SpecificSubscriptionSettings_erase(self, *args)
    def find(self, *args): return _settings.SpecificSubscriptionSettings_find(self, *args)
    def lower_bound(self, *args): return _settings.SpecificSubscriptionSettings_lower_bound(self, *args)
    def upper_bound(self, *args): return _settings.SpecificSubscriptionSettings_upper_bound(self, *args)
    __swig_destroy__ = _settings.delete_SpecificSubscriptionSettings
    __del__ = lambda self : None;
SpecificSubscriptionSettings_swigregister = _settings.SpecificSubscriptionSettings_swigregister
SpecificSubscriptionSettings_swigregister(SpecificSubscriptionSettings)

# This file is compatible with both classic and new-style classes.


