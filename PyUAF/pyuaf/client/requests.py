# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_requests', [dirname(__file__)])
        except ImportError:
            import _requests
            return _requests
        if fp is not None:
            try:
                _mod = imp.load_module('_requests', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _requests = swig_import_helper()
    del swig_import_helper
else:
    import _requests
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _requests.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _requests.SwigPyIterator_value(self)
    def incr(self, n=1): return _requests.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _requests.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _requests.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _requests.SwigPyIterator_equal(self, *args)
    def copy(self): return _requests.SwigPyIterator_copy(self)
    def next(self): return _requests.SwigPyIterator_next(self)
    def __next__(self): return _requests.SwigPyIterator___next__(self)
    def previous(self): return _requests.SwigPyIterator_previous(self)
    def advance(self, *args): return _requests.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _requests.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _requests.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _requests.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _requests.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _requests.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _requests.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _requests.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import pyuaf.util.attributeids
import pyuaf.util.monitoringmodes
import pyuaf.util.primitives
import pyuaf.util.browsedirections
import pyuaf.util.nodeclasses
import pyuaf.util.timestampstoreturn
import pyuaf.util
import configs
import settings
import pyuaf.util.messagesecuritymodes
import pyuaf.util.usertokentypes
import pyuaf.util.loglevels
import pyuaf.util.applicationtypes
import pyuaf.util.constants
import pyuaf.util.nodeididentifiertypes
import pyuaf.util.statuscodes
import pyuaf.util.opcuatypes
import pyuaf.util.opcuaidentifiers
import pyuaf.util.securitypolicies
import pyuaf.util.__unittesthelper__
class BaseSessionRequestTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSessionRequestTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSessionRequestTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _requests.delete_BaseSessionRequestTarget
    __del__ = lambda self : None;
BaseSessionRequestTarget_swigregister = _requests.BaseSessionRequestTarget_swigregister
BaseSessionRequestTarget_swigregister(BaseSessionRequestTarget)

class BaseSubscriptionRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSubscriptionRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSubscriptionRequestTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getServerUri(self, *args): return _requests.BaseSubscriptionRequestTarget_getServerUri(self, *args)
    __swig_destroy__ = _requests.delete_BaseSubscriptionRequestTarget
    __del__ = lambda self : None;
BaseSubscriptionRequestTarget_swigregister = _requests.BaseSubscriptionRequestTarget_swigregister
BaseSubscriptionRequestTarget_swigregister(BaseSubscriptionRequestTarget)

class BrowseRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseRequestTarget, name)
    __swig_destroy__ = _requests.delete_BrowseRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.BrowseRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.BrowseRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.BrowseRequestTarget_address_get, _requests.BrowseRequestTarget_address_set)
    __swig_setmethods__["browseDirection"] = _requests.BrowseRequestTarget_browseDirection_set
    __swig_getmethods__["browseDirection"] = _requests.BrowseRequestTarget_browseDirection_get
    if _newclass:browseDirection = _swig_property(_requests.BrowseRequestTarget_browseDirection_get, _requests.BrowseRequestTarget_browseDirection_set)
    __swig_setmethods__["referenceTypeId"] = _requests.BrowseRequestTarget_referenceTypeId_set
    __swig_getmethods__["referenceTypeId"] = _requests.BrowseRequestTarget_referenceTypeId_get
    if _newclass:referenceTypeId = _swig_property(_requests.BrowseRequestTarget_referenceTypeId_get, _requests.BrowseRequestTarget_referenceTypeId_set)
    __swig_setmethods__["includeSubtypes"] = _requests.BrowseRequestTarget_includeSubtypes_set
    __swig_getmethods__["includeSubtypes"] = _requests.BrowseRequestTarget_includeSubtypes_get
    if _newclass:includeSubtypes = _swig_property(_requests.BrowseRequestTarget_includeSubtypes_get, _requests.BrowseRequestTarget_includeSubtypes_set)
    __swig_setmethods__["nodeClassMask"] = _requests.BrowseRequestTarget_nodeClassMask_set
    __swig_getmethods__["nodeClassMask"] = _requests.BrowseRequestTarget_nodeClassMask_get
    if _newclass:nodeClassMask = _swig_property(_requests.BrowseRequestTarget_nodeClassMask_get, _requests.BrowseRequestTarget_nodeClassMask_set)
    __swig_setmethods__["resultMask"] = _requests.BrowseRequestTarget_resultMask_set
    __swig_getmethods__["resultMask"] = _requests.BrowseRequestTarget_resultMask_get
    if _newclass:resultMask = _swig_property(_requests.BrowseRequestTarget_resultMask_get, _requests.BrowseRequestTarget_resultMask_set)
    def getServerUri(self, *args): return _requests.BrowseRequestTarget_getServerUri(self, *args)
    def __str__(self, indent="", colon=22): return _requests.BrowseRequestTarget___str__(self, indent, colon)
    def __repr__(self): return _requests.BrowseRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.BrowseRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.BrowseRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.BrowseRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.BrowseRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.BrowseRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.BrowseRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_BrowseRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
BrowseRequestTarget_swigregister = _requests.BrowseRequestTarget_swigregister
BrowseRequestTarget_swigregister(BrowseRequestTarget)

class BrowseRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.BrowseRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.BrowseRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.BrowseRequestTargetVector___bool__(self)
    def __len__(self): return _requests.BrowseRequestTargetVector___len__(self)
    def pop(self): return _requests.BrowseRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.BrowseRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.BrowseRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.BrowseRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.BrowseRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.BrowseRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.BrowseRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.BrowseRequestTargetVector_append(self, *args)
    def empty(self): return _requests.BrowseRequestTargetVector_empty(self)
    def size(self): return _requests.BrowseRequestTargetVector_size(self)
    def clear(self): return _requests.BrowseRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.BrowseRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.BrowseRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.BrowseRequestTargetVector_begin(self)
    def end(self): return _requests.BrowseRequestTargetVector_end(self)
    def rbegin(self): return _requests.BrowseRequestTargetVector_rbegin(self)
    def rend(self): return _requests.BrowseRequestTargetVector_rend(self)
    def pop_back(self): return _requests.BrowseRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.BrowseRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_BrowseRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.BrowseRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.BrowseRequestTargetVector_front(self)
    def back(self): return _requests.BrowseRequestTargetVector_back(self)
    def assign(self, *args): return _requests.BrowseRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.BrowseRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.BrowseRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.BrowseRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.BrowseRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_BrowseRequestTargetVector
    __del__ = lambda self : None;
BrowseRequestTargetVector_swigregister = _requests.BrowseRequestTargetVector_swigregister
BrowseRequestTargetVector_swigregister(BrowseRequestTargetVector)

class BrowseNextRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseNextRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseNextRequestTarget, name)
    __swig_setmethods__["address"] = _requests.BrowseNextRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.BrowseNextRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.BrowseNextRequestTarget_address_get, _requests.BrowseNextRequestTarget_address_set)
    __swig_setmethods__["continuationPoint"] = _requests.BrowseNextRequestTarget_continuationPoint_set
    __swig_getmethods__["continuationPoint"] = _requests.BrowseNextRequestTarget_continuationPoint_get
    if _newclass:continuationPoint = _swig_property(_requests.BrowseNextRequestTarget_continuationPoint_get, _requests.BrowseNextRequestTarget_continuationPoint_set)
    def getServerUri(self, *args): return _requests.BrowseNextRequestTarget_getServerUri(self, *args)
    def __str__(self, indent="", colon=22): return _requests.BrowseNextRequestTarget___str__(self, indent, colon)
    def __repr__(self): return _requests.BrowseNextRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.BrowseNextRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.BrowseNextRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.BrowseNextRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.BrowseNextRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.BrowseNextRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.BrowseNextRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_BrowseNextRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete_BrowseNextRequestTarget
    __del__ = lambda self : None;
BrowseNextRequestTarget_swigregister = _requests.BrowseNextRequestTarget_swigregister
BrowseNextRequestTarget_swigregister(BrowseNextRequestTarget)

class BrowseNextRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseNextRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseNextRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.BrowseNextRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.BrowseNextRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.BrowseNextRequestTargetVector___bool__(self)
    def __len__(self): return _requests.BrowseNextRequestTargetVector___len__(self)
    def pop(self): return _requests.BrowseNextRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.BrowseNextRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.BrowseNextRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.BrowseNextRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.BrowseNextRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.BrowseNextRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.BrowseNextRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.BrowseNextRequestTargetVector_append(self, *args)
    def empty(self): return _requests.BrowseNextRequestTargetVector_empty(self)
    def size(self): return _requests.BrowseNextRequestTargetVector_size(self)
    def clear(self): return _requests.BrowseNextRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.BrowseNextRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.BrowseNextRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.BrowseNextRequestTargetVector_begin(self)
    def end(self): return _requests.BrowseNextRequestTargetVector_end(self)
    def rbegin(self): return _requests.BrowseNextRequestTargetVector_rbegin(self)
    def rend(self): return _requests.BrowseNextRequestTargetVector_rend(self)
    def pop_back(self): return _requests.BrowseNextRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.BrowseNextRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_BrowseNextRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.BrowseNextRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.BrowseNextRequestTargetVector_front(self)
    def back(self): return _requests.BrowseNextRequestTargetVector_back(self)
    def assign(self, *args): return _requests.BrowseNextRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.BrowseNextRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.BrowseNextRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.BrowseNextRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.BrowseNextRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_BrowseNextRequestTargetVector
    __del__ = lambda self : None;
BrowseNextRequestTargetVector_swigregister = _requests.BrowseNextRequestTargetVector_swigregister
BrowseNextRequestTargetVector_swigregister(BrowseNextRequestTargetVector)

class CreateMonitoredDataRequestTarget(BaseSubscriptionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSubscriptionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSubscriptionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataRequestTarget, name)
    __swig_destroy__ = _requests.delete_CreateMonitoredDataRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.CreateMonitoredDataRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.CreateMonitoredDataRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.CreateMonitoredDataRequestTarget_address_get, _requests.CreateMonitoredDataRequestTarget_address_set)
    __swig_setmethods__["attributeId"] = _requests.CreateMonitoredDataRequestTarget_attributeId_set
    __swig_getmethods__["attributeId"] = _requests.CreateMonitoredDataRequestTarget_attributeId_get
    if _newclass:attributeId = _swig_property(_requests.CreateMonitoredDataRequestTarget_attributeId_get, _requests.CreateMonitoredDataRequestTarget_attributeId_set)
    __swig_setmethods__["indexRange"] = _requests.CreateMonitoredDataRequestTarget_indexRange_set
    __swig_getmethods__["indexRange"] = _requests.CreateMonitoredDataRequestTarget_indexRange_get
    if _newclass:indexRange = _swig_property(_requests.CreateMonitoredDataRequestTarget_indexRange_get, _requests.CreateMonitoredDataRequestTarget_indexRange_set)
    __swig_setmethods__["monitoringMode"] = _requests.CreateMonitoredDataRequestTarget_monitoringMode_set
    __swig_getmethods__["monitoringMode"] = _requests.CreateMonitoredDataRequestTarget_monitoringMode_get
    if _newclass:monitoringMode = _swig_property(_requests.CreateMonitoredDataRequestTarget_monitoringMode_get, _requests.CreateMonitoredDataRequestTarget_monitoringMode_set)
    __swig_setmethods__["samplingIntervalSec"] = _requests.CreateMonitoredDataRequestTarget_samplingIntervalSec_set
    __swig_getmethods__["samplingIntervalSec"] = _requests.CreateMonitoredDataRequestTarget_samplingIntervalSec_get
    if _newclass:samplingIntervalSec = _swig_property(_requests.CreateMonitoredDataRequestTarget_samplingIntervalSec_get, _requests.CreateMonitoredDataRequestTarget_samplingIntervalSec_set)
    __swig_setmethods__["queueSize"] = _requests.CreateMonitoredDataRequestTarget_queueSize_set
    __swig_getmethods__["queueSize"] = _requests.CreateMonitoredDataRequestTarget_queueSize_get
    if _newclass:queueSize = _swig_property(_requests.CreateMonitoredDataRequestTarget_queueSize_get, _requests.CreateMonitoredDataRequestTarget_queueSize_set)
    __swig_setmethods__["discardOldest"] = _requests.CreateMonitoredDataRequestTarget_discardOldest_set
    __swig_getmethods__["discardOldest"] = _requests.CreateMonitoredDataRequestTarget_discardOldest_get
    if _newclass:discardOldest = _swig_property(_requests.CreateMonitoredDataRequestTarget_discardOldest_get, _requests.CreateMonitoredDataRequestTarget_discardOldest_set)
    __swig_setmethods__["dataChangeFilter"] = _requests.CreateMonitoredDataRequestTarget_dataChangeFilter_set
    __swig_getmethods__["dataChangeFilter"] = _requests.CreateMonitoredDataRequestTarget_dataChangeFilter_get
    if _newclass:dataChangeFilter = _swig_property(_requests.CreateMonitoredDataRequestTarget_dataChangeFilter_get, _requests.CreateMonitoredDataRequestTarget_dataChangeFilter_set)
    def __str__(self, indent="", colon=23): return _requests.CreateMonitoredDataRequestTarget___str__(self, indent, colon)
    def getServerUri(self, *args): return _requests.CreateMonitoredDataRequestTarget_getServerUri(self, *args)
    def __repr__(self): return _requests.CreateMonitoredDataRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.CreateMonitoredDataRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.CreateMonitoredDataRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.CreateMonitoredDataRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.CreateMonitoredDataRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.CreateMonitoredDataRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.CreateMonitoredDataRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_CreateMonitoredDataRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
CreateMonitoredDataRequestTarget_swigregister = _requests.CreateMonitoredDataRequestTarget_swigregister
CreateMonitoredDataRequestTarget_swigregister(CreateMonitoredDataRequestTarget)

class CreateMonitoredDataRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.CreateMonitoredDataRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.CreateMonitoredDataRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.CreateMonitoredDataRequestTargetVector___bool__(self)
    def __len__(self): return _requests.CreateMonitoredDataRequestTargetVector___len__(self)
    def pop(self): return _requests.CreateMonitoredDataRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.CreateMonitoredDataRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_append(self, *args)
    def empty(self): return _requests.CreateMonitoredDataRequestTargetVector_empty(self)
    def size(self): return _requests.CreateMonitoredDataRequestTargetVector_size(self)
    def clear(self): return _requests.CreateMonitoredDataRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.CreateMonitoredDataRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.CreateMonitoredDataRequestTargetVector_begin(self)
    def end(self): return _requests.CreateMonitoredDataRequestTargetVector_end(self)
    def rbegin(self): return _requests.CreateMonitoredDataRequestTargetVector_rbegin(self)
    def rend(self): return _requests.CreateMonitoredDataRequestTargetVector_rend(self)
    def pop_back(self): return _requests.CreateMonitoredDataRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_CreateMonitoredDataRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.CreateMonitoredDataRequestTargetVector_front(self)
    def back(self): return _requests.CreateMonitoredDataRequestTargetVector_back(self)
    def assign(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.CreateMonitoredDataRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.CreateMonitoredDataRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_CreateMonitoredDataRequestTargetVector
    __del__ = lambda self : None;
CreateMonitoredDataRequestTargetVector_swigregister = _requests.CreateMonitoredDataRequestTargetVector_swigregister
CreateMonitoredDataRequestTargetVector_swigregister(CreateMonitoredDataRequestTargetVector)

class CreateMonitoredEventsRequestTarget(BaseSubscriptionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSubscriptionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSubscriptionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsRequestTarget, name)
    __swig_destroy__ = _requests.delete_CreateMonitoredEventsRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.CreateMonitoredEventsRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.CreateMonitoredEventsRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.CreateMonitoredEventsRequestTarget_address_get, _requests.CreateMonitoredEventsRequestTarget_address_set)
    __swig_setmethods__["monitoringMode"] = _requests.CreateMonitoredEventsRequestTarget_monitoringMode_set
    __swig_getmethods__["monitoringMode"] = _requests.CreateMonitoredEventsRequestTarget_monitoringMode_get
    if _newclass:monitoringMode = _swig_property(_requests.CreateMonitoredEventsRequestTarget_monitoringMode_get, _requests.CreateMonitoredEventsRequestTarget_monitoringMode_set)
    __swig_setmethods__["samplingIntervalSec"] = _requests.CreateMonitoredEventsRequestTarget_samplingIntervalSec_set
    __swig_getmethods__["samplingIntervalSec"] = _requests.CreateMonitoredEventsRequestTarget_samplingIntervalSec_get
    if _newclass:samplingIntervalSec = _swig_property(_requests.CreateMonitoredEventsRequestTarget_samplingIntervalSec_get, _requests.CreateMonitoredEventsRequestTarget_samplingIntervalSec_set)
    __swig_setmethods__["queueSize"] = _requests.CreateMonitoredEventsRequestTarget_queueSize_set
    __swig_getmethods__["queueSize"] = _requests.CreateMonitoredEventsRequestTarget_queueSize_get
    if _newclass:queueSize = _swig_property(_requests.CreateMonitoredEventsRequestTarget_queueSize_get, _requests.CreateMonitoredEventsRequestTarget_queueSize_set)
    __swig_setmethods__["discardOldest"] = _requests.CreateMonitoredEventsRequestTarget_discardOldest_set
    __swig_getmethods__["discardOldest"] = _requests.CreateMonitoredEventsRequestTarget_discardOldest_get
    if _newclass:discardOldest = _swig_property(_requests.CreateMonitoredEventsRequestTarget_discardOldest_get, _requests.CreateMonitoredEventsRequestTarget_discardOldest_set)
    __swig_setmethods__["eventFilter"] = _requests.CreateMonitoredEventsRequestTarget_eventFilter_set
    __swig_getmethods__["eventFilter"] = _requests.CreateMonitoredEventsRequestTarget_eventFilter_get
    if _newclass:eventFilter = _swig_property(_requests.CreateMonitoredEventsRequestTarget_eventFilter_get, _requests.CreateMonitoredEventsRequestTarget_eventFilter_set)
    def __str__(self, indent="", colon=23): return _requests.CreateMonitoredEventsRequestTarget___str__(self, indent, colon)
    def __repr__(self): return _requests.CreateMonitoredEventsRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.CreateMonitoredEventsRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_CreateMonitoredEventsRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
CreateMonitoredEventsRequestTarget_swigregister = _requests.CreateMonitoredEventsRequestTarget_swigregister
CreateMonitoredEventsRequestTarget_swigregister(CreateMonitoredEventsRequestTarget)

class CreateMonitoredEventsRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.CreateMonitoredEventsRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.CreateMonitoredEventsRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.CreateMonitoredEventsRequestTargetVector___bool__(self)
    def __len__(self): return _requests.CreateMonitoredEventsRequestTargetVector___len__(self)
    def pop(self): return _requests.CreateMonitoredEventsRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_append(self, *args)
    def empty(self): return _requests.CreateMonitoredEventsRequestTargetVector_empty(self)
    def size(self): return _requests.CreateMonitoredEventsRequestTargetVector_size(self)
    def clear(self): return _requests.CreateMonitoredEventsRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.CreateMonitoredEventsRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.CreateMonitoredEventsRequestTargetVector_begin(self)
    def end(self): return _requests.CreateMonitoredEventsRequestTargetVector_end(self)
    def rbegin(self): return _requests.CreateMonitoredEventsRequestTargetVector_rbegin(self)
    def rend(self): return _requests.CreateMonitoredEventsRequestTargetVector_rend(self)
    def pop_back(self): return _requests.CreateMonitoredEventsRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_CreateMonitoredEventsRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.CreateMonitoredEventsRequestTargetVector_front(self)
    def back(self): return _requests.CreateMonitoredEventsRequestTargetVector_back(self)
    def assign(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.CreateMonitoredEventsRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.CreateMonitoredEventsRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_CreateMonitoredEventsRequestTargetVector
    __del__ = lambda self : None;
CreateMonitoredEventsRequestTargetVector_swigregister = _requests.CreateMonitoredEventsRequestTargetVector_swigregister
CreateMonitoredEventsRequestTargetVector_swigregister(CreateMonitoredEventsRequestTargetVector)

class MethodCallRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallRequestTarget, name)
    __swig_destroy__ = _requests.delete_MethodCallRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["objectAddress"] = _requests.MethodCallRequestTarget_objectAddress_set
    __swig_getmethods__["objectAddress"] = _requests.MethodCallRequestTarget_objectAddress_get
    if _newclass:objectAddress = _swig_property(_requests.MethodCallRequestTarget_objectAddress_get, _requests.MethodCallRequestTarget_objectAddress_set)
    __swig_setmethods__["methodAddress"] = _requests.MethodCallRequestTarget_methodAddress_set
    __swig_getmethods__["methodAddress"] = _requests.MethodCallRequestTarget_methodAddress_get
    if _newclass:methodAddress = _swig_property(_requests.MethodCallRequestTarget_methodAddress_get, _requests.MethodCallRequestTarget_methodAddress_set)
    __swig_setmethods__["inputArguments"] = _requests.MethodCallRequestTarget_inputArguments_set
    __swig_getmethods__["inputArguments"] = _requests.MethodCallRequestTarget_inputArguments_get
    if _newclass:inputArguments = _swig_property(_requests.MethodCallRequestTarget_inputArguments_get, _requests.MethodCallRequestTarget_inputArguments_set)
    def __str__(self, indent="", colon=10): return _requests.MethodCallRequestTarget___str__(self, indent, colon)
    def getServerUri(self, *args): return _requests.MethodCallRequestTarget_getServerUri(self, *args)
    def __repr__(self): return _requests.MethodCallRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.MethodCallRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.MethodCallRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.MethodCallRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.MethodCallRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.MethodCallRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.MethodCallRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_MethodCallRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
MethodCallRequestTarget_swigregister = _requests.MethodCallRequestTarget_swigregister
MethodCallRequestTarget_swigregister(MethodCallRequestTarget)

class MethodCallRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.MethodCallRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.MethodCallRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.MethodCallRequestTargetVector___bool__(self)
    def __len__(self): return _requests.MethodCallRequestTargetVector___len__(self)
    def pop(self): return _requests.MethodCallRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.MethodCallRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.MethodCallRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.MethodCallRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.MethodCallRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.MethodCallRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.MethodCallRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.MethodCallRequestTargetVector_append(self, *args)
    def empty(self): return _requests.MethodCallRequestTargetVector_empty(self)
    def size(self): return _requests.MethodCallRequestTargetVector_size(self)
    def clear(self): return _requests.MethodCallRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.MethodCallRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.MethodCallRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.MethodCallRequestTargetVector_begin(self)
    def end(self): return _requests.MethodCallRequestTargetVector_end(self)
    def rbegin(self): return _requests.MethodCallRequestTargetVector_rbegin(self)
    def rend(self): return _requests.MethodCallRequestTargetVector_rend(self)
    def pop_back(self): return _requests.MethodCallRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.MethodCallRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_MethodCallRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.MethodCallRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.MethodCallRequestTargetVector_front(self)
    def back(self): return _requests.MethodCallRequestTargetVector_back(self)
    def assign(self, *args): return _requests.MethodCallRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.MethodCallRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.MethodCallRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.MethodCallRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.MethodCallRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_MethodCallRequestTargetVector
    __del__ = lambda self : None;
MethodCallRequestTargetVector_swigregister = _requests.MethodCallRequestTargetVector_swigregister
MethodCallRequestTargetVector_swigregister(MethodCallRequestTargetVector)

class ReadRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadRequestTarget, name)
    __swig_destroy__ = _requests.delete_ReadRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.ReadRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.ReadRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.ReadRequestTarget_address_get, _requests.ReadRequestTarget_address_set)
    __swig_setmethods__["attributeId"] = _requests.ReadRequestTarget_attributeId_set
    __swig_getmethods__["attributeId"] = _requests.ReadRequestTarget_attributeId_get
    if _newclass:attributeId = _swig_property(_requests.ReadRequestTarget_attributeId_get, _requests.ReadRequestTarget_attributeId_set)
    __swig_setmethods__["indexRange"] = _requests.ReadRequestTarget_indexRange_set
    __swig_getmethods__["indexRange"] = _requests.ReadRequestTarget_indexRange_get
    if _newclass:indexRange = _swig_property(_requests.ReadRequestTarget_indexRange_get, _requests.ReadRequestTarget_indexRange_set)
    def getServerUri(self, *args): return _requests.ReadRequestTarget_getServerUri(self, *args)
    def __str__(self, indent="", colon=22): return _requests.ReadRequestTarget___str__(self, indent, colon)
    def __repr__(self): return _requests.ReadRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.ReadRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.ReadRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.ReadRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.ReadRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.ReadRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.ReadRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_ReadRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
ReadRequestTarget_swigregister = _requests.ReadRequestTarget_swigregister
ReadRequestTarget_swigregister(ReadRequestTarget)

class ReadRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.ReadRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.ReadRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.ReadRequestTargetVector___bool__(self)
    def __len__(self): return _requests.ReadRequestTargetVector___len__(self)
    def pop(self): return _requests.ReadRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.ReadRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.ReadRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.ReadRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.ReadRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.ReadRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.ReadRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.ReadRequestTargetVector_append(self, *args)
    def empty(self): return _requests.ReadRequestTargetVector_empty(self)
    def size(self): return _requests.ReadRequestTargetVector_size(self)
    def clear(self): return _requests.ReadRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.ReadRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.ReadRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.ReadRequestTargetVector_begin(self)
    def end(self): return _requests.ReadRequestTargetVector_end(self)
    def rbegin(self): return _requests.ReadRequestTargetVector_rbegin(self)
    def rend(self): return _requests.ReadRequestTargetVector_rend(self)
    def pop_back(self): return _requests.ReadRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.ReadRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_ReadRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.ReadRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.ReadRequestTargetVector_front(self)
    def back(self): return _requests.ReadRequestTargetVector_back(self)
    def assign(self, *args): return _requests.ReadRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.ReadRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.ReadRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.ReadRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.ReadRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_ReadRequestTargetVector
    __del__ = lambda self : None;
ReadRequestTargetVector_swigregister = _requests.ReadRequestTargetVector_swigregister
ReadRequestTargetVector_swigregister(ReadRequestTargetVector)

class TranslateBrowsePathsToNodeIdsRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsRequestTarget, name)
    __swig_destroy__ = _requests.delete_TranslateBrowsePathsToNodeIdsRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["browsePath"] = _requests.TranslateBrowsePathsToNodeIdsRequestTarget_browsePath_set
    __swig_getmethods__["browsePath"] = _requests.TranslateBrowsePathsToNodeIdsRequestTarget_browsePath_get
    if _newclass:browsePath = _swig_property(_requests.TranslateBrowsePathsToNodeIdsRequestTarget_browsePath_get, _requests.TranslateBrowsePathsToNodeIdsRequestTarget_browsePath_set)
    def __str__(self, indent="", colon=20): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___str__(self, indent, colon)
    def getServerUri(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget_getServerUri(self, *args)
    def __repr__(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_TranslateBrowsePathsToNodeIdsRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
TranslateBrowsePathsToNodeIdsRequestTarget_swigregister = _requests.TranslateBrowsePathsToNodeIdsRequestTarget_swigregister
TranslateBrowsePathsToNodeIdsRequestTarget_swigregister(TranslateBrowsePathsToNodeIdsRequestTarget)

class TranslateBrowsePathsToNodeIdsRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___bool__(self)
    def __len__(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___len__(self)
    def pop(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_append(self, *args)
    def empty(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_empty(self)
    def size(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_size(self)
    def clear(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_begin(self)
    def end(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_end(self)
    def rbegin(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_rbegin(self)
    def rend(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_rend(self)
    def pop_back(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_TranslateBrowsePathsToNodeIdsRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_front(self)
    def back(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_back(self)
    def assign(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_TranslateBrowsePathsToNodeIdsRequestTargetVector
    __del__ = lambda self : None;
TranslateBrowsePathsToNodeIdsRequestTargetVector_swigregister = _requests.TranslateBrowsePathsToNodeIdsRequestTargetVector_swigregister
TranslateBrowsePathsToNodeIdsRequestTargetVector_swigregister(TranslateBrowsePathsToNodeIdsRequestTargetVector)

class WriteRequestTarget(BaseSessionRequestTarget,pyuaf.util.DataValue):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget,pyuaf.util.DataValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget,pyuaf.util.DataValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriteRequestTarget, name)
    __swig_destroy__ = _requests.delete_WriteRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.WriteRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.WriteRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.WriteRequestTarget_address_get, _requests.WriteRequestTarget_address_set)
    __swig_setmethods__["attributeId"] = _requests.WriteRequestTarget_attributeId_set
    __swig_getmethods__["attributeId"] = _requests.WriteRequestTarget_attributeId_get
    if _newclass:attributeId = _swig_property(_requests.WriteRequestTarget_attributeId_get, _requests.WriteRequestTarget_attributeId_set)
    __swig_setmethods__["indexRange"] = _requests.WriteRequestTarget_indexRange_set
    __swig_getmethods__["indexRange"] = _requests.WriteRequestTarget_indexRange_get
    if _newclass:indexRange = _swig_property(_requests.WriteRequestTarget_indexRange_get, _requests.WriteRequestTarget_indexRange_set)
    def __str__(self, indent="", colon=30): return _requests.WriteRequestTarget___str__(self, indent, colon)
    def getServerUri(self, *args): return _requests.WriteRequestTarget_getServerUri(self, *args)
    def __repr__(self): return _requests.WriteRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.WriteRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.WriteRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.WriteRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.WriteRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.WriteRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.WriteRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_WriteRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
WriteRequestTarget_swigregister = _requests.WriteRequestTarget_swigregister
WriteRequestTarget_swigregister(WriteRequestTarget)

class WriteRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.WriteRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.WriteRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.WriteRequestTargetVector___bool__(self)
    def __len__(self): return _requests.WriteRequestTargetVector___len__(self)
    def pop(self): return _requests.WriteRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.WriteRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.WriteRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.WriteRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.WriteRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.WriteRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.WriteRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.WriteRequestTargetVector_append(self, *args)
    def empty(self): return _requests.WriteRequestTargetVector_empty(self)
    def size(self): return _requests.WriteRequestTargetVector_size(self)
    def clear(self): return _requests.WriteRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.WriteRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.WriteRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.WriteRequestTargetVector_begin(self)
    def end(self): return _requests.WriteRequestTargetVector_end(self)
    def rbegin(self): return _requests.WriteRequestTargetVector_rbegin(self)
    def rend(self): return _requests.WriteRequestTargetVector_rend(self)
    def pop_back(self): return _requests.WriteRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.WriteRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_WriteRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.WriteRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.WriteRequestTargetVector_front(self)
    def back(self): return _requests.WriteRequestTargetVector_back(self)
    def assign(self, *args): return _requests.WriteRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.WriteRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.WriteRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.WriteRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.WriteRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_WriteRequestTargetVector
    __del__ = lambda self : None;
WriteRequestTargetVector_swigregister = _requests.WriteRequestTargetVector_swigregister
WriteRequestTargetVector_swigregister(WriteRequestTargetVector)

class HistoryReadRawModifiedRequestTarget(BaseSessionRequestTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedRequestTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionRequestTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedRequestTarget, name)
    __swig_destroy__ = _requests.delete_HistoryReadRawModifiedRequestTarget
    __del__ = lambda self : None;
    __swig_setmethods__["address"] = _requests.HistoryReadRawModifiedRequestTarget_address_set
    __swig_getmethods__["address"] = _requests.HistoryReadRawModifiedRequestTarget_address_get
    if _newclass:address = _swig_property(_requests.HistoryReadRawModifiedRequestTarget_address_get, _requests.HistoryReadRawModifiedRequestTarget_address_set)
    __swig_setmethods__["continuationPoint"] = _requests.HistoryReadRawModifiedRequestTarget_continuationPoint_set
    __swig_getmethods__["continuationPoint"] = _requests.HistoryReadRawModifiedRequestTarget_continuationPoint_get
    if _newclass:continuationPoint = _swig_property(_requests.HistoryReadRawModifiedRequestTarget_continuationPoint_get, _requests.HistoryReadRawModifiedRequestTarget_continuationPoint_set)
    __swig_setmethods__["indexRange"] = _requests.HistoryReadRawModifiedRequestTarget_indexRange_set
    __swig_getmethods__["indexRange"] = _requests.HistoryReadRawModifiedRequestTarget_indexRange_get
    if _newclass:indexRange = _swig_property(_requests.HistoryReadRawModifiedRequestTarget_indexRange_get, _requests.HistoryReadRawModifiedRequestTarget_indexRange_set)
    __swig_setmethods__["dataEncoding"] = _requests.HistoryReadRawModifiedRequestTarget_dataEncoding_set
    __swig_getmethods__["dataEncoding"] = _requests.HistoryReadRawModifiedRequestTarget_dataEncoding_get
    if _newclass:dataEncoding = _swig_property(_requests.HistoryReadRawModifiedRequestTarget_dataEncoding_get, _requests.HistoryReadRawModifiedRequestTarget_dataEncoding_set)
    def __str__(self, indent="", colon=21): return _requests.HistoryReadRawModifiedRequestTarget___str__(self, indent, colon)
    def getServerUri(self, *args): return _requests.HistoryReadRawModifiedRequestTarget_getServerUri(self, *args)
    def __repr__(self): return _requests.HistoryReadRawModifiedRequestTarget___repr__(self)
    def __eq__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___eq__(self, *args)
    def __ne__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___ne__(self, *args)
    def __lt__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___lt__(self, *args)
    def __gt__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___gt__(self, *args)
    def __ge__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___ge__(self, *args)
    def __le__(self, *args): return _requests.HistoryReadRawModifiedRequestTarget___le__(self, *args)
    def __init__(self, *args): 
        this = _requests.new_HistoryReadRawModifiedRequestTarget(*args)
        try: self.this.append(this)
        except: self.this = this
HistoryReadRawModifiedRequestTarget_swigregister = _requests.HistoryReadRawModifiedRequestTarget_swigregister
HistoryReadRawModifiedRequestTarget_swigregister(HistoryReadRawModifiedRequestTarget)

class HistoryReadRawModifiedRequestTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedRequestTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedRequestTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _requests.HistoryReadRawModifiedRequestTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _requests.HistoryReadRawModifiedRequestTargetVector___nonzero__(self)
    def __bool__(self): return _requests.HistoryReadRawModifiedRequestTargetVector___bool__(self)
    def __len__(self): return _requests.HistoryReadRawModifiedRequestTargetVector___len__(self)
    def pop(self): return _requests.HistoryReadRawModifiedRequestTargetVector_pop(self)
    def __getslice__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector___setitem__(self, *args)
    def append(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_append(self, *args)
    def empty(self): return _requests.HistoryReadRawModifiedRequestTargetVector_empty(self)
    def size(self): return _requests.HistoryReadRawModifiedRequestTargetVector_size(self)
    def clear(self): return _requests.HistoryReadRawModifiedRequestTargetVector_clear(self)
    def swap(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_swap(self, *args)
    def get_allocator(self): return _requests.HistoryReadRawModifiedRequestTargetVector_get_allocator(self)
    def begin(self): return _requests.HistoryReadRawModifiedRequestTargetVector_begin(self)
    def end(self): return _requests.HistoryReadRawModifiedRequestTargetVector_end(self)
    def rbegin(self): return _requests.HistoryReadRawModifiedRequestTargetVector_rbegin(self)
    def rend(self): return _requests.HistoryReadRawModifiedRequestTargetVector_rend(self)
    def pop_back(self): return _requests.HistoryReadRawModifiedRequestTargetVector_pop_back(self)
    def erase(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _requests.new_HistoryReadRawModifiedRequestTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_push_back(self, *args)
    def front(self): return _requests.HistoryReadRawModifiedRequestTargetVector_front(self)
    def back(self): return _requests.HistoryReadRawModifiedRequestTargetVector_back(self)
    def assign(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_assign(self, *args)
    def resize(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_resize(self, *args)
    def insert(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_insert(self, *args)
    def reserve(self, *args): return _requests.HistoryReadRawModifiedRequestTargetVector_reserve(self, *args)
    def capacity(self): return _requests.HistoryReadRawModifiedRequestTargetVector_capacity(self)
    __swig_destroy__ = _requests.delete_HistoryReadRawModifiedRequestTargetVector
    __del__ = lambda self : None;
HistoryReadRawModifiedRequestTargetVector_swigregister = _requests.HistoryReadRawModifiedRequestTargetVector_swigregister
HistoryReadRawModifiedRequestTargetVector_swigregister(HistoryReadRawModifiedRequestTargetVector)

class _ReadRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ReadRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _ReadRequest, name)
    __swig_setmethods__["targets"] = _requests._ReadRequest_targets_set
    __swig_getmethods__["targets"] = _requests._ReadRequest_targets_get
    if _newclass:targets = _swig_property(_requests._ReadRequest_targets_get, _requests._ReadRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._ReadRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._ReadRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._ReadRequest_serviceConfig_get, _requests._ReadRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._ReadRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._ReadRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._ReadRequest_sessionConfig_get, _requests._ReadRequest_sessionConfig_set)
    asynchronous = _requests._ReadRequest_asynchronous
    def requestHandle(self): return _requests._ReadRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._ReadRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._ReadRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__ReadRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__ReadRequest
    __del__ = lambda self : None;
_ReadRequest_swigregister = _requests._ReadRequest_swigregister
_ReadRequest_swigregister(_ReadRequest)

class ReadRequest(_ReadRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.ReadConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _ReadRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"Read" + "Request", str(self))

class _WriteRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _WriteRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _WriteRequest, name)
    __swig_setmethods__["targets"] = _requests._WriteRequest_targets_set
    __swig_getmethods__["targets"] = _requests._WriteRequest_targets_get
    if _newclass:targets = _swig_property(_requests._WriteRequest_targets_get, _requests._WriteRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._WriteRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._WriteRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._WriteRequest_serviceConfig_get, _requests._WriteRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._WriteRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._WriteRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._WriteRequest_sessionConfig_get, _requests._WriteRequest_sessionConfig_set)
    asynchronous = _requests._WriteRequest_asynchronous
    def requestHandle(self): return _requests._WriteRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._WriteRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._WriteRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__WriteRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__WriteRequest
    __del__ = lambda self : None;
_WriteRequest_swigregister = _requests._WriteRequest_swigregister
_WriteRequest_swigregister(_WriteRequest)

class WriteRequest(_WriteRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.WriteConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _WriteRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"Write" + "Request", str(self))

class _MethodCallRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MethodCallRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MethodCallRequest, name)
    __swig_setmethods__["targets"] = _requests._MethodCallRequest_targets_set
    __swig_getmethods__["targets"] = _requests._MethodCallRequest_targets_get
    if _newclass:targets = _swig_property(_requests._MethodCallRequest_targets_get, _requests._MethodCallRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._MethodCallRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._MethodCallRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._MethodCallRequest_serviceConfig_get, _requests._MethodCallRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._MethodCallRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._MethodCallRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._MethodCallRequest_sessionConfig_get, _requests._MethodCallRequest_sessionConfig_set)
    asynchronous = _requests._MethodCallRequest_asynchronous
    def requestHandle(self): return _requests._MethodCallRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._MethodCallRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._MethodCallRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__MethodCallRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__MethodCallRequest
    __del__ = lambda self : None;
_MethodCallRequest_swigregister = _requests._MethodCallRequest_swigregister
_MethodCallRequest_swigregister(_MethodCallRequest)

class MethodCallRequest(_MethodCallRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.MethodCallConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _MethodCallRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"MethodCall" + "Request", str(self))

class _TranslateBrowsePathsToNodeIdsRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _TranslateBrowsePathsToNodeIdsRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _TranslateBrowsePathsToNodeIdsRequest, name)
    __swig_setmethods__["targets"] = _requests._TranslateBrowsePathsToNodeIdsRequest_targets_set
    __swig_getmethods__["targets"] = _requests._TranslateBrowsePathsToNodeIdsRequest_targets_get
    if _newclass:targets = _swig_property(_requests._TranslateBrowsePathsToNodeIdsRequest_targets_get, _requests._TranslateBrowsePathsToNodeIdsRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._TranslateBrowsePathsToNodeIdsRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._TranslateBrowsePathsToNodeIdsRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._TranslateBrowsePathsToNodeIdsRequest_serviceConfig_get, _requests._TranslateBrowsePathsToNodeIdsRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._TranslateBrowsePathsToNodeIdsRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._TranslateBrowsePathsToNodeIdsRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._TranslateBrowsePathsToNodeIdsRequest_sessionConfig_get, _requests._TranslateBrowsePathsToNodeIdsRequest_sessionConfig_set)
    asynchronous = _requests._TranslateBrowsePathsToNodeIdsRequest_asynchronous
    def requestHandle(self): return _requests._TranslateBrowsePathsToNodeIdsRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._TranslateBrowsePathsToNodeIdsRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._TranslateBrowsePathsToNodeIdsRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__TranslateBrowsePathsToNodeIdsRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__TranslateBrowsePathsToNodeIdsRequest
    __del__ = lambda self : None;
_TranslateBrowsePathsToNodeIdsRequest_swigregister = _requests._TranslateBrowsePathsToNodeIdsRequest_swigregister
_TranslateBrowsePathsToNodeIdsRequest_swigregister(_TranslateBrowsePathsToNodeIdsRequest)

class TranslateBrowsePathsToNodeIdsRequest(_TranslateBrowsePathsToNodeIdsRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.TranslateBrowsePathsToNodeIdsConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _TranslateBrowsePathsToNodeIdsRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"TranslateBrowsePathsToNodeIds" + "Request", str(self))

class _BrowseRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _BrowseRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _BrowseRequest, name)
    __swig_setmethods__["targets"] = _requests._BrowseRequest_targets_set
    __swig_getmethods__["targets"] = _requests._BrowseRequest_targets_get
    if _newclass:targets = _swig_property(_requests._BrowseRequest_targets_get, _requests._BrowseRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._BrowseRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._BrowseRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._BrowseRequest_serviceConfig_get, _requests._BrowseRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._BrowseRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._BrowseRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._BrowseRequest_sessionConfig_get, _requests._BrowseRequest_sessionConfig_set)
    asynchronous = _requests._BrowseRequest_asynchronous
    def requestHandle(self): return _requests._BrowseRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._BrowseRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._BrowseRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__BrowseRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__BrowseRequest
    __del__ = lambda self : None;
_BrowseRequest_swigregister = _requests._BrowseRequest_swigregister
_BrowseRequest_swigregister(_BrowseRequest)

class BrowseRequest(_BrowseRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.BrowseConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _BrowseRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"Browse" + "Request", str(self))

class _BrowseNextRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _BrowseNextRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _BrowseNextRequest, name)
    __swig_setmethods__["targets"] = _requests._BrowseNextRequest_targets_set
    __swig_getmethods__["targets"] = _requests._BrowseNextRequest_targets_get
    if _newclass:targets = _swig_property(_requests._BrowseNextRequest_targets_get, _requests._BrowseNextRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._BrowseNextRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._BrowseNextRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._BrowseNextRequest_serviceConfig_get, _requests._BrowseNextRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._BrowseNextRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._BrowseNextRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._BrowseNextRequest_sessionConfig_get, _requests._BrowseNextRequest_sessionConfig_set)
    asynchronous = _requests._BrowseNextRequest_asynchronous
    def requestHandle(self): return _requests._BrowseNextRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._BrowseNextRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._BrowseNextRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__BrowseNextRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__BrowseNextRequest
    __del__ = lambda self : None;
_BrowseNextRequest_swigregister = _requests._BrowseNextRequest_swigregister
_BrowseNextRequest_swigregister(_BrowseNextRequest)

class BrowseNextRequest(_BrowseNextRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.BrowseNextConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _BrowseNextRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"BrowseNext" + "Request", str(self))

class _HistoryReadRawModifiedRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _HistoryReadRawModifiedRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _HistoryReadRawModifiedRequest, name)
    __swig_setmethods__["targets"] = _requests._HistoryReadRawModifiedRequest_targets_set
    __swig_getmethods__["targets"] = _requests._HistoryReadRawModifiedRequest_targets_get
    if _newclass:targets = _swig_property(_requests._HistoryReadRawModifiedRequest_targets_get, _requests._HistoryReadRawModifiedRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._HistoryReadRawModifiedRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._HistoryReadRawModifiedRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._HistoryReadRawModifiedRequest_serviceConfig_get, _requests._HistoryReadRawModifiedRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._HistoryReadRawModifiedRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._HistoryReadRawModifiedRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._HistoryReadRawModifiedRequest_sessionConfig_get, _requests._HistoryReadRawModifiedRequest_sessionConfig_set)
    asynchronous = _requests._HistoryReadRawModifiedRequest_asynchronous
    def requestHandle(self): return _requests._HistoryReadRawModifiedRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._HistoryReadRawModifiedRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._HistoryReadRawModifiedRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__HistoryReadRawModifiedRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__HistoryReadRawModifiedRequest
    __del__ = lambda self : None;
_HistoryReadRawModifiedRequest_swigregister = _requests._HistoryReadRawModifiedRequest_swigregister
_HistoryReadRawModifiedRequest_swigregister(_HistoryReadRawModifiedRequest)

class HistoryReadRawModifiedRequest(_HistoryReadRawModifiedRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.HistoryReadRawModifiedConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _HistoryReadRawModifiedRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"HistoryReadRawModified" + "Request", str(self))

class _AsyncReadRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _AsyncReadRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _AsyncReadRequest, name)
    __swig_setmethods__["targets"] = _requests._AsyncReadRequest_targets_set
    __swig_getmethods__["targets"] = _requests._AsyncReadRequest_targets_get
    if _newclass:targets = _swig_property(_requests._AsyncReadRequest_targets_get, _requests._AsyncReadRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._AsyncReadRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._AsyncReadRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._AsyncReadRequest_serviceConfig_get, _requests._AsyncReadRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._AsyncReadRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._AsyncReadRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._AsyncReadRequest_sessionConfig_get, _requests._AsyncReadRequest_sessionConfig_set)
    asynchronous = _requests._AsyncReadRequest_asynchronous
    def requestHandle(self): return _requests._AsyncReadRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._AsyncReadRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._AsyncReadRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__AsyncReadRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__AsyncReadRequest
    __del__ = lambda self : None;
_AsyncReadRequest_swigregister = _requests._AsyncReadRequest_swigregister
_AsyncReadRequest_swigregister(_AsyncReadRequest)

class AsyncReadRequest(_AsyncReadRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.ReadConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _AsyncReadRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests.Async" +"Read" + "Request", str(self))

class _AsyncWriteRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _AsyncWriteRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _AsyncWriteRequest, name)
    __swig_setmethods__["targets"] = _requests._AsyncWriteRequest_targets_set
    __swig_getmethods__["targets"] = _requests._AsyncWriteRequest_targets_get
    if _newclass:targets = _swig_property(_requests._AsyncWriteRequest_targets_get, _requests._AsyncWriteRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._AsyncWriteRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._AsyncWriteRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._AsyncWriteRequest_serviceConfig_get, _requests._AsyncWriteRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._AsyncWriteRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._AsyncWriteRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._AsyncWriteRequest_sessionConfig_get, _requests._AsyncWriteRequest_sessionConfig_set)
    asynchronous = _requests._AsyncWriteRequest_asynchronous
    def requestHandle(self): return _requests._AsyncWriteRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._AsyncWriteRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._AsyncWriteRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__AsyncWriteRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__AsyncWriteRequest
    __del__ = lambda self : None;
_AsyncWriteRequest_swigregister = _requests._AsyncWriteRequest_swigregister
_AsyncWriteRequest_swigregister(_AsyncWriteRequest)

class AsyncWriteRequest(_AsyncWriteRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.WriteConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _AsyncWriteRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests.Async" +"Write" + "Request", str(self))

class _AsyncMethodCallRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _AsyncMethodCallRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _AsyncMethodCallRequest, name)
    __swig_setmethods__["targets"] = _requests._AsyncMethodCallRequest_targets_set
    __swig_getmethods__["targets"] = _requests._AsyncMethodCallRequest_targets_get
    if _newclass:targets = _swig_property(_requests._AsyncMethodCallRequest_targets_get, _requests._AsyncMethodCallRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests._AsyncMethodCallRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests._AsyncMethodCallRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests._AsyncMethodCallRequest_serviceConfig_get, _requests._AsyncMethodCallRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests._AsyncMethodCallRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests._AsyncMethodCallRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests._AsyncMethodCallRequest_sessionConfig_get, _requests._AsyncMethodCallRequest_sessionConfig_set)
    asynchronous = _requests._AsyncMethodCallRequest_asynchronous
    def requestHandle(self): return _requests._AsyncMethodCallRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests._AsyncMethodCallRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._AsyncMethodCallRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__AsyncMethodCallRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__AsyncMethodCallRequest
    __del__ = lambda self : None;
_AsyncMethodCallRequest_swigregister = _requests._AsyncMethodCallRequest_swigregister
_AsyncMethodCallRequest_swigregister(_AsyncMethodCallRequest)

class AsyncMethodCallRequest(_AsyncMethodCallRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.MethodCallConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        _AsyncMethodCallRequest.__init__(self, targets, serviceConfig, sessionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests.Async" +"MethodCall" + "Request", str(self))

class BaseCreateMonitoredDataRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCreateMonitoredDataRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCreateMonitoredDataRequest, name)
    __swig_setmethods__["targets"] = _requests.BaseCreateMonitoredDataRequest_targets_set
    __swig_getmethods__["targets"] = _requests.BaseCreateMonitoredDataRequest_targets_get
    if _newclass:targets = _swig_property(_requests.BaseCreateMonitoredDataRequest_targets_get, _requests.BaseCreateMonitoredDataRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests.BaseCreateMonitoredDataRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests.BaseCreateMonitoredDataRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests.BaseCreateMonitoredDataRequest_serviceConfig_get, _requests.BaseCreateMonitoredDataRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests.BaseCreateMonitoredDataRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests.BaseCreateMonitoredDataRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests.BaseCreateMonitoredDataRequest_sessionConfig_get, _requests.BaseCreateMonitoredDataRequest_sessionConfig_set)
    asynchronous = _requests.BaseCreateMonitoredDataRequest_asynchronous
    def requestHandle(self): return _requests.BaseCreateMonitoredDataRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests.BaseCreateMonitoredDataRequest___str__(self, indent, colon)
    def __repr__(self): return _requests.BaseCreateMonitoredDataRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new_BaseCreateMonitoredDataRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete_BaseCreateMonitoredDataRequest
    __del__ = lambda self : None;
BaseCreateMonitoredDataRequest_swigregister = _requests.BaseCreateMonitoredDataRequest_swigregister
BaseCreateMonitoredDataRequest_swigregister(BaseCreateMonitoredDataRequest)

class _CreateMonitoredDataRequest(BaseCreateMonitoredDataRequest):
    __swig_setmethods__ = {}
    for _s in [BaseCreateMonitoredDataRequest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CreateMonitoredDataRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCreateMonitoredDataRequest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _CreateMonitoredDataRequest, name)
    __swig_setmethods__["subscriptionConfig"] = _requests._CreateMonitoredDataRequest_subscriptionConfig_set
    __swig_getmethods__["subscriptionConfig"] = _requests._CreateMonitoredDataRequest_subscriptionConfig_get
    if _newclass:subscriptionConfig = _swig_property(_requests._CreateMonitoredDataRequest_subscriptionConfig_get, _requests._CreateMonitoredDataRequest_subscriptionConfig_set)
    def __str__(self, indent="", colon=36): return _requests._CreateMonitoredDataRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._CreateMonitoredDataRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__CreateMonitoredDataRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__CreateMonitoredDataRequest
    __del__ = lambda self : None;
_CreateMonitoredDataRequest_swigregister = _requests._CreateMonitoredDataRequest_swigregister
_CreateMonitoredDataRequest_swigregister(_CreateMonitoredDataRequest)

class CreateMonitoredDataRequest(_CreateMonitoredDataRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None, subscriptionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.CreateMonitoredDataConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        if subscriptionConfig is None:
            subscriptionConfig = configs.SubscriptionConfig()
        _CreateMonitoredDataRequest.__init__(self, targets, serviceConfig, sessionConfig, subscriptionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"CreateMonitoredData" + "Request", str(self))

class BaseCreateMonitoredEventsRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCreateMonitoredEventsRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCreateMonitoredEventsRequest, name)
    __swig_setmethods__["targets"] = _requests.BaseCreateMonitoredEventsRequest_targets_set
    __swig_getmethods__["targets"] = _requests.BaseCreateMonitoredEventsRequest_targets_get
    if _newclass:targets = _swig_property(_requests.BaseCreateMonitoredEventsRequest_targets_get, _requests.BaseCreateMonitoredEventsRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests.BaseCreateMonitoredEventsRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests.BaseCreateMonitoredEventsRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests.BaseCreateMonitoredEventsRequest_serviceConfig_get, _requests.BaseCreateMonitoredEventsRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests.BaseCreateMonitoredEventsRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests.BaseCreateMonitoredEventsRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests.BaseCreateMonitoredEventsRequest_sessionConfig_get, _requests.BaseCreateMonitoredEventsRequest_sessionConfig_set)
    asynchronous = _requests.BaseCreateMonitoredEventsRequest_asynchronous
    def requestHandle(self): return _requests.BaseCreateMonitoredEventsRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests.BaseCreateMonitoredEventsRequest___str__(self, indent, colon)
    def __repr__(self): return _requests.BaseCreateMonitoredEventsRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new_BaseCreateMonitoredEventsRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete_BaseCreateMonitoredEventsRequest
    __del__ = lambda self : None;
BaseCreateMonitoredEventsRequest_swigregister = _requests.BaseCreateMonitoredEventsRequest_swigregister
BaseCreateMonitoredEventsRequest_swigregister(BaseCreateMonitoredEventsRequest)

class _CreateMonitoredEventsRequest(BaseCreateMonitoredEventsRequest):
    __swig_setmethods__ = {}
    for _s in [BaseCreateMonitoredEventsRequest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CreateMonitoredEventsRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCreateMonitoredEventsRequest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _CreateMonitoredEventsRequest, name)
    __swig_setmethods__["subscriptionConfig"] = _requests._CreateMonitoredEventsRequest_subscriptionConfig_set
    __swig_getmethods__["subscriptionConfig"] = _requests._CreateMonitoredEventsRequest_subscriptionConfig_get
    if _newclass:subscriptionConfig = _swig_property(_requests._CreateMonitoredEventsRequest_subscriptionConfig_get, _requests._CreateMonitoredEventsRequest_subscriptionConfig_set)
    def __str__(self, indent="", colon=36): return _requests._CreateMonitoredEventsRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._CreateMonitoredEventsRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__CreateMonitoredEventsRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__CreateMonitoredEventsRequest
    __del__ = lambda self : None;
_CreateMonitoredEventsRequest_swigregister = _requests._CreateMonitoredEventsRequest_swigregister
_CreateMonitoredEventsRequest_swigregister(_CreateMonitoredEventsRequest)

class CreateMonitoredEventsRequest(_CreateMonitoredEventsRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None, subscriptionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.CreateMonitoredEventsConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        if subscriptionConfig is None:
            subscriptionConfig = configs.SubscriptionConfig()
        _CreateMonitoredEventsRequest.__init__(self, targets, serviceConfig, sessionConfig, subscriptionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests." +"CreateMonitoredEvents" + "Request", str(self))

class BaseAsyncCreateMonitoredDataRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseAsyncCreateMonitoredDataRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseAsyncCreateMonitoredDataRequest, name)
    __swig_setmethods__["targets"] = _requests.BaseAsyncCreateMonitoredDataRequest_targets_set
    __swig_getmethods__["targets"] = _requests.BaseAsyncCreateMonitoredDataRequest_targets_get
    if _newclass:targets = _swig_property(_requests.BaseAsyncCreateMonitoredDataRequest_targets_get, _requests.BaseAsyncCreateMonitoredDataRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests.BaseAsyncCreateMonitoredDataRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests.BaseAsyncCreateMonitoredDataRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests.BaseAsyncCreateMonitoredDataRequest_serviceConfig_get, _requests.BaseAsyncCreateMonitoredDataRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests.BaseAsyncCreateMonitoredDataRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests.BaseAsyncCreateMonitoredDataRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests.BaseAsyncCreateMonitoredDataRequest_sessionConfig_get, _requests.BaseAsyncCreateMonitoredDataRequest_sessionConfig_set)
    asynchronous = _requests.BaseAsyncCreateMonitoredDataRequest_asynchronous
    def requestHandle(self): return _requests.BaseAsyncCreateMonitoredDataRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests.BaseAsyncCreateMonitoredDataRequest___str__(self, indent, colon)
    def __repr__(self): return _requests.BaseAsyncCreateMonitoredDataRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new_BaseAsyncCreateMonitoredDataRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete_BaseAsyncCreateMonitoredDataRequest
    __del__ = lambda self : None;
BaseAsyncCreateMonitoredDataRequest_swigregister = _requests.BaseAsyncCreateMonitoredDataRequest_swigregister
BaseAsyncCreateMonitoredDataRequest_swigregister(BaseAsyncCreateMonitoredDataRequest)

class _AsyncCreateMonitoredDataRequest(BaseAsyncCreateMonitoredDataRequest):
    __swig_setmethods__ = {}
    for _s in [BaseAsyncCreateMonitoredDataRequest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _AsyncCreateMonitoredDataRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseAsyncCreateMonitoredDataRequest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _AsyncCreateMonitoredDataRequest, name)
    __swig_setmethods__["subscriptionConfig"] = _requests._AsyncCreateMonitoredDataRequest_subscriptionConfig_set
    __swig_getmethods__["subscriptionConfig"] = _requests._AsyncCreateMonitoredDataRequest_subscriptionConfig_get
    if _newclass:subscriptionConfig = _swig_property(_requests._AsyncCreateMonitoredDataRequest_subscriptionConfig_get, _requests._AsyncCreateMonitoredDataRequest_subscriptionConfig_set)
    def __str__(self, indent="", colon=36): return _requests._AsyncCreateMonitoredDataRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._AsyncCreateMonitoredDataRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__AsyncCreateMonitoredDataRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__AsyncCreateMonitoredDataRequest
    __del__ = lambda self : None;
_AsyncCreateMonitoredDataRequest_swigregister = _requests._AsyncCreateMonitoredDataRequest_swigregister
_AsyncCreateMonitoredDataRequest_swigregister(_AsyncCreateMonitoredDataRequest)

class AsyncCreateMonitoredDataRequest(_AsyncCreateMonitoredDataRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None, subscriptionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.CreateMonitoredDataConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        if subscriptionConfig is None:
            subscriptionConfig = configs.SubscriptionConfig()
        _AsyncCreateMonitoredDataRequest.__init__(self, targets, serviceConfig, sessionConfig, subscriptionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests.Async" +"CreateMonitoredData" + "Request", str(self))

class BaseAsyncCreateMonitoredEventsRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseAsyncCreateMonitoredEventsRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseAsyncCreateMonitoredEventsRequest, name)
    __swig_setmethods__["targets"] = _requests.BaseAsyncCreateMonitoredEventsRequest_targets_set
    __swig_getmethods__["targets"] = _requests.BaseAsyncCreateMonitoredEventsRequest_targets_get
    if _newclass:targets = _swig_property(_requests.BaseAsyncCreateMonitoredEventsRequest_targets_get, _requests.BaseAsyncCreateMonitoredEventsRequest_targets_set)
    __swig_setmethods__["serviceConfig"] = _requests.BaseAsyncCreateMonitoredEventsRequest_serviceConfig_set
    __swig_getmethods__["serviceConfig"] = _requests.BaseAsyncCreateMonitoredEventsRequest_serviceConfig_get
    if _newclass:serviceConfig = _swig_property(_requests.BaseAsyncCreateMonitoredEventsRequest_serviceConfig_get, _requests.BaseAsyncCreateMonitoredEventsRequest_serviceConfig_set)
    __swig_setmethods__["sessionConfig"] = _requests.BaseAsyncCreateMonitoredEventsRequest_sessionConfig_set
    __swig_getmethods__["sessionConfig"] = _requests.BaseAsyncCreateMonitoredEventsRequest_sessionConfig_get
    if _newclass:sessionConfig = _swig_property(_requests.BaseAsyncCreateMonitoredEventsRequest_sessionConfig_get, _requests.BaseAsyncCreateMonitoredEventsRequest_sessionConfig_set)
    asynchronous = _requests.BaseAsyncCreateMonitoredEventsRequest_asynchronous
    def requestHandle(self): return _requests.BaseAsyncCreateMonitoredEventsRequest_requestHandle(self)
    def __str__(self, indent="", colon=36): return _requests.BaseAsyncCreateMonitoredEventsRequest___str__(self, indent, colon)
    def __repr__(self): return _requests.BaseAsyncCreateMonitoredEventsRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new_BaseAsyncCreateMonitoredEventsRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete_BaseAsyncCreateMonitoredEventsRequest
    __del__ = lambda self : None;
BaseAsyncCreateMonitoredEventsRequest_swigregister = _requests.BaseAsyncCreateMonitoredEventsRequest_swigregister
BaseAsyncCreateMonitoredEventsRequest_swigregister(BaseAsyncCreateMonitoredEventsRequest)

class _AsyncCreateMonitoredEventsRequest(BaseAsyncCreateMonitoredEventsRequest):
    __swig_setmethods__ = {}
    for _s in [BaseAsyncCreateMonitoredEventsRequest]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _AsyncCreateMonitoredEventsRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseAsyncCreateMonitoredEventsRequest]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _AsyncCreateMonitoredEventsRequest, name)
    __swig_setmethods__["subscriptionConfig"] = _requests._AsyncCreateMonitoredEventsRequest_subscriptionConfig_set
    __swig_getmethods__["subscriptionConfig"] = _requests._AsyncCreateMonitoredEventsRequest_subscriptionConfig_get
    if _newclass:subscriptionConfig = _swig_property(_requests._AsyncCreateMonitoredEventsRequest_subscriptionConfig_get, _requests._AsyncCreateMonitoredEventsRequest_subscriptionConfig_set)
    def __str__(self, indent="", colon=36): return _requests._AsyncCreateMonitoredEventsRequest___str__(self, indent, colon)
    def __repr__(self): return _requests._AsyncCreateMonitoredEventsRequest___repr__(self)
    def __init__(self, *args): 
        this = _requests.new__AsyncCreateMonitoredEventsRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _requests.delete__AsyncCreateMonitoredEventsRequest
    __del__ = lambda self : None;
_AsyncCreateMonitoredEventsRequest_swigregister = _requests._AsyncCreateMonitoredEventsRequest_swigregister
_AsyncCreateMonitoredEventsRequest_swigregister(_AsyncCreateMonitoredEventsRequest)

class AsyncCreateMonitoredEventsRequest(_AsyncCreateMonitoredEventsRequest):
    def __init__(self, targets=0, serviceConfig=None, sessionConfig=None, subscriptionConfig=None):
        if serviceConfig is None:
            serviceConfig = configs.CreateMonitoredEventsConfig()
        if sessionConfig is None:
            sessionConfig = configs.SessionConfig()
        if subscriptionConfig is None:
            subscriptionConfig = configs.SubscriptionConfig()
        _AsyncCreateMonitoredEventsRequest.__init__(self, targets, serviceConfig, sessionConfig, subscriptionConfig)
    def __repr__(self):
        return pyuaf.util.__get__repr__("pyuaf.client.requests.Async" +"CreateMonitoredEvents" + "Request", str(self))

# This file is compatible with both classic and new-style classes.


