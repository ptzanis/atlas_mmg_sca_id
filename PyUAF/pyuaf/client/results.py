# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_results', [dirname(__file__)])
        except ImportError:
            import _results
            return _results
        if fp is not None:
            try:
                _mod = imp.load_module('_results', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _results = swig_import_helper()
    del swig_import_helper
else:
    import _results
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _results.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _results.SwigPyIterator_value(self)
    def incr(self, n=1): return _results.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _results.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _results.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _results.SwigPyIterator_equal(self, *args)
    def copy(self): return _results.SwigPyIterator_copy(self)
    def next(self): return _results.SwigPyIterator_next(self)
    def __next__(self): return _results.SwigPyIterator___next__(self)
    def previous(self): return _results.SwigPyIterator_previous(self)
    def advance(self, *args): return _results.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _results.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _results.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _results.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _results.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _results.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _results.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _results.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import pyuaf.util.attributeids
import pyuaf.util.monitoringmodes
import pyuaf.util.primitives
import pyuaf.util.browsedirections
import pyuaf.util.nodeclasses
import pyuaf.util.timestampstoreturn
import pyuaf.util
class BaseSessionResultTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSessionResultTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSessionResultTarget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _results.new_BaseSessionResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["clientConnectionId"] = _results.BaseSessionResultTarget_clientConnectionId_set
    __swig_getmethods__["clientConnectionId"] = _results.BaseSessionResultTarget_clientConnectionId_get
    if _newclass:clientConnectionId = _swig_property(_results.BaseSessionResultTarget_clientConnectionId_get, _results.BaseSessionResultTarget_clientConnectionId_set)
    __swig_destroy__ = _results.delete_BaseSessionResultTarget
    __del__ = lambda self : None;
BaseSessionResultTarget_swigregister = _results.BaseSessionResultTarget_swigregister
BaseSessionResultTarget_swigregister(BaseSessionResultTarget)

class BaseSubscriptionResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSubscriptionResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSubscriptionResultTarget, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _results.new_BaseSubscriptionResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["clientSubscriptionHandle"] = _results.BaseSubscriptionResultTarget_clientSubscriptionHandle_set
    __swig_getmethods__["clientSubscriptionHandle"] = _results.BaseSubscriptionResultTarget_clientSubscriptionHandle_get
    if _newclass:clientSubscriptionHandle = _swig_property(_results.BaseSubscriptionResultTarget_clientSubscriptionHandle_get, _results.BaseSubscriptionResultTarget_clientSubscriptionHandle_set)
    __swig_destroy__ = _results.delete_BaseSubscriptionResultTarget
    __del__ = lambda self : None;
BaseSubscriptionResultTarget_swigregister = _results.BaseSubscriptionResultTarget_swigregister
BaseSubscriptionResultTarget_swigregister(BaseSubscriptionResultTarget)

class AsyncResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncResultTarget, name)
    __swig_setmethods__["status"] = _results.AsyncResultTarget_status_set
    __swig_getmethods__["status"] = _results.AsyncResultTarget_status_get
    if _newclass:status = _swig_property(_results.AsyncResultTarget_status_get, _results.AsyncResultTarget_status_set)
    def __str__(self, indent="", colon=10): return _results.AsyncResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.AsyncResultTarget___repr__(self)
    def __eq__(self, *args): return _results.AsyncResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.AsyncResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.AsyncResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.AsyncResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.AsyncResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.AsyncResultTarget___le__(self, *args)
    def __init__(self): 
        this = _results.new_AsyncResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncResultTarget
    __del__ = lambda self : None;
AsyncResultTarget_swigregister = _results.AsyncResultTarget_swigregister
AsyncResultTarget_swigregister(AsyncResultTarget)

class AsyncResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.AsyncResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.AsyncResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.AsyncResultTargetVector___bool__(self)
    def __len__(self): return _results.AsyncResultTargetVector___len__(self)
    def pop(self): return _results.AsyncResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.AsyncResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.AsyncResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.AsyncResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.AsyncResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.AsyncResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.AsyncResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.AsyncResultTargetVector_append(self, *args)
    def empty(self): return _results.AsyncResultTargetVector_empty(self)
    def size(self): return _results.AsyncResultTargetVector_size(self)
    def clear(self): return _results.AsyncResultTargetVector_clear(self)
    def swap(self, *args): return _results.AsyncResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.AsyncResultTargetVector_get_allocator(self)
    def begin(self): return _results.AsyncResultTargetVector_begin(self)
    def end(self): return _results.AsyncResultTargetVector_end(self)
    def rbegin(self): return _results.AsyncResultTargetVector_rbegin(self)
    def rend(self): return _results.AsyncResultTargetVector_rend(self)
    def pop_back(self): return _results.AsyncResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.AsyncResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_AsyncResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.AsyncResultTargetVector_push_back(self, *args)
    def front(self): return _results.AsyncResultTargetVector_front(self)
    def back(self): return _results.AsyncResultTargetVector_back(self)
    def assign(self, *args): return _results.AsyncResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.AsyncResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.AsyncResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.AsyncResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.AsyncResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_AsyncResultTargetVector
    __del__ = lambda self : None;
AsyncResultTargetVector_swigregister = _results.AsyncResultTargetVector_swigregister
AsyncResultTargetVector_swigregister(AsyncResultTargetVector)

class BrowseResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseResultTarget, name)
    def __init__(self): 
        this = _results.new_BrowseResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.BrowseResultTarget_status_set
    __swig_getmethods__["status"] = _results.BrowseResultTarget_status_get
    if _newclass:status = _swig_property(_results.BrowseResultTarget_status_get, _results.BrowseResultTarget_status_set)
    __swig_setmethods__["autoBrowsedNext"] = _results.BrowseResultTarget_autoBrowsedNext_set
    __swig_getmethods__["autoBrowsedNext"] = _results.BrowseResultTarget_autoBrowsedNext_get
    if _newclass:autoBrowsedNext = _swig_property(_results.BrowseResultTarget_autoBrowsedNext_get, _results.BrowseResultTarget_autoBrowsedNext_set)
    __swig_setmethods__["continuationPoint"] = _results.BrowseResultTarget_continuationPoint_set
    __swig_getmethods__["continuationPoint"] = _results.BrowseResultTarget_continuationPoint_get
    if _newclass:continuationPoint = _swig_property(_results.BrowseResultTarget_continuationPoint_get, _results.BrowseResultTarget_continuationPoint_set)
    __swig_setmethods__["references"] = _results.BrowseResultTarget_references_set
    __swig_getmethods__["references"] = _results.BrowseResultTarget_references_get
    if _newclass:references = _swig_property(_results.BrowseResultTarget_references_get, _results.BrowseResultTarget_references_set)
    def __str__(self, indent="", colon=22): return _results.BrowseResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.BrowseResultTarget___repr__(self)
    def __eq__(self, *args): return _results.BrowseResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.BrowseResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.BrowseResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.BrowseResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.BrowseResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.BrowseResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_BrowseResultTarget
    __del__ = lambda self : None;
BrowseResultTarget_swigregister = _results.BrowseResultTarget_swigregister
BrowseResultTarget_swigregister(BrowseResultTarget)

class BrowseResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.BrowseResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.BrowseResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.BrowseResultTargetVector___bool__(self)
    def __len__(self): return _results.BrowseResultTargetVector___len__(self)
    def pop(self): return _results.BrowseResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.BrowseResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.BrowseResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.BrowseResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.BrowseResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.BrowseResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.BrowseResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.BrowseResultTargetVector_append(self, *args)
    def empty(self): return _results.BrowseResultTargetVector_empty(self)
    def size(self): return _results.BrowseResultTargetVector_size(self)
    def clear(self): return _results.BrowseResultTargetVector_clear(self)
    def swap(self, *args): return _results.BrowseResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.BrowseResultTargetVector_get_allocator(self)
    def begin(self): return _results.BrowseResultTargetVector_begin(self)
    def end(self): return _results.BrowseResultTargetVector_end(self)
    def rbegin(self): return _results.BrowseResultTargetVector_rbegin(self)
    def rend(self): return _results.BrowseResultTargetVector_rend(self)
    def pop_back(self): return _results.BrowseResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.BrowseResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_BrowseResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.BrowseResultTargetVector_push_back(self, *args)
    def front(self): return _results.BrowseResultTargetVector_front(self)
    def back(self): return _results.BrowseResultTargetVector_back(self)
    def assign(self, *args): return _results.BrowseResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.BrowseResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.BrowseResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.BrowseResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.BrowseResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_BrowseResultTargetVector
    __del__ = lambda self : None;
BrowseResultTargetVector_swigregister = _results.BrowseResultTargetVector_swigregister
BrowseResultTargetVector_swigregister(BrowseResultTargetVector)

class CreateMonitoredDataResultTarget(BaseSubscriptionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSubscriptionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSubscriptionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataResultTarget, name)
    def __init__(self): 
        this = _results.new_CreateMonitoredDataResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.CreateMonitoredDataResultTarget_status_set
    __swig_getmethods__["status"] = _results.CreateMonitoredDataResultTarget_status_get
    if _newclass:status = _swig_property(_results.CreateMonitoredDataResultTarget_status_get, _results.CreateMonitoredDataResultTarget_status_set)
    __swig_setmethods__["clientHandle"] = _results.CreateMonitoredDataResultTarget_clientHandle_set
    __swig_getmethods__["clientHandle"] = _results.CreateMonitoredDataResultTarget_clientHandle_get
    if _newclass:clientHandle = _swig_property(_results.CreateMonitoredDataResultTarget_clientHandle_get, _results.CreateMonitoredDataResultTarget_clientHandle_set)
    __swig_setmethods__["monitoredItemId"] = _results.CreateMonitoredDataResultTarget_monitoredItemId_set
    __swig_getmethods__["monitoredItemId"] = _results.CreateMonitoredDataResultTarget_monitoredItemId_get
    if _newclass:monitoredItemId = _swig_property(_results.CreateMonitoredDataResultTarget_monitoredItemId_get, _results.CreateMonitoredDataResultTarget_monitoredItemId_set)
    __swig_setmethods__["revisedSamplingIntervalSec"] = _results.CreateMonitoredDataResultTarget_revisedSamplingIntervalSec_set
    __swig_getmethods__["revisedSamplingIntervalSec"] = _results.CreateMonitoredDataResultTarget_revisedSamplingIntervalSec_get
    if _newclass:revisedSamplingIntervalSec = _swig_property(_results.CreateMonitoredDataResultTarget_revisedSamplingIntervalSec_get, _results.CreateMonitoredDataResultTarget_revisedSamplingIntervalSec_set)
    __swig_setmethods__["revisedQueueSize"] = _results.CreateMonitoredDataResultTarget_revisedQueueSize_set
    __swig_getmethods__["revisedQueueSize"] = _results.CreateMonitoredDataResultTarget_revisedQueueSize_get
    if _newclass:revisedQueueSize = _swig_property(_results.CreateMonitoredDataResultTarget_revisedQueueSize_get, _results.CreateMonitoredDataResultTarget_revisedQueueSize_set)
    def __str__(self, indent="", colon=32): return _results.CreateMonitoredDataResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.CreateMonitoredDataResultTarget___repr__(self)
    def __eq__(self, *args): return _results.CreateMonitoredDataResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.CreateMonitoredDataResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.CreateMonitoredDataResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.CreateMonitoredDataResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.CreateMonitoredDataResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.CreateMonitoredDataResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_CreateMonitoredDataResultTarget
    __del__ = lambda self : None;
CreateMonitoredDataResultTarget_swigregister = _results.CreateMonitoredDataResultTarget_swigregister
CreateMonitoredDataResultTarget_swigregister(CreateMonitoredDataResultTarget)

class CreateMonitoredDataResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.CreateMonitoredDataResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.CreateMonitoredDataResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.CreateMonitoredDataResultTargetVector___bool__(self)
    def __len__(self): return _results.CreateMonitoredDataResultTargetVector___len__(self)
    def pop(self): return _results.CreateMonitoredDataResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.CreateMonitoredDataResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.CreateMonitoredDataResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.CreateMonitoredDataResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.CreateMonitoredDataResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.CreateMonitoredDataResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.CreateMonitoredDataResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.CreateMonitoredDataResultTargetVector_append(self, *args)
    def empty(self): return _results.CreateMonitoredDataResultTargetVector_empty(self)
    def size(self): return _results.CreateMonitoredDataResultTargetVector_size(self)
    def clear(self): return _results.CreateMonitoredDataResultTargetVector_clear(self)
    def swap(self, *args): return _results.CreateMonitoredDataResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.CreateMonitoredDataResultTargetVector_get_allocator(self)
    def begin(self): return _results.CreateMonitoredDataResultTargetVector_begin(self)
    def end(self): return _results.CreateMonitoredDataResultTargetVector_end(self)
    def rbegin(self): return _results.CreateMonitoredDataResultTargetVector_rbegin(self)
    def rend(self): return _results.CreateMonitoredDataResultTargetVector_rend(self)
    def pop_back(self): return _results.CreateMonitoredDataResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.CreateMonitoredDataResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_CreateMonitoredDataResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.CreateMonitoredDataResultTargetVector_push_back(self, *args)
    def front(self): return _results.CreateMonitoredDataResultTargetVector_front(self)
    def back(self): return _results.CreateMonitoredDataResultTargetVector_back(self)
    def assign(self, *args): return _results.CreateMonitoredDataResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.CreateMonitoredDataResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.CreateMonitoredDataResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.CreateMonitoredDataResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.CreateMonitoredDataResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_CreateMonitoredDataResultTargetVector
    __del__ = lambda self : None;
CreateMonitoredDataResultTargetVector_swigregister = _results.CreateMonitoredDataResultTargetVector_swigregister
CreateMonitoredDataResultTargetVector_swigregister(CreateMonitoredDataResultTargetVector)

class CreateMonitoredEventsResultTarget(BaseSubscriptionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSubscriptionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSubscriptionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsResultTarget, name)
    def __init__(self): 
        this = _results.new_CreateMonitoredEventsResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.CreateMonitoredEventsResultTarget_status_set
    __swig_getmethods__["status"] = _results.CreateMonitoredEventsResultTarget_status_get
    if _newclass:status = _swig_property(_results.CreateMonitoredEventsResultTarget_status_get, _results.CreateMonitoredEventsResultTarget_status_set)
    __swig_setmethods__["clientHandle"] = _results.CreateMonitoredEventsResultTarget_clientHandle_set
    __swig_getmethods__["clientHandle"] = _results.CreateMonitoredEventsResultTarget_clientHandle_get
    if _newclass:clientHandle = _swig_property(_results.CreateMonitoredEventsResultTarget_clientHandle_get, _results.CreateMonitoredEventsResultTarget_clientHandle_set)
    __swig_setmethods__["monitoredItemId"] = _results.CreateMonitoredEventsResultTarget_monitoredItemId_set
    __swig_getmethods__["monitoredItemId"] = _results.CreateMonitoredEventsResultTarget_monitoredItemId_get
    if _newclass:monitoredItemId = _swig_property(_results.CreateMonitoredEventsResultTarget_monitoredItemId_get, _results.CreateMonitoredEventsResultTarget_monitoredItemId_set)
    __swig_setmethods__["revisedSamplingIntervalSec"] = _results.CreateMonitoredEventsResultTarget_revisedSamplingIntervalSec_set
    __swig_getmethods__["revisedSamplingIntervalSec"] = _results.CreateMonitoredEventsResultTarget_revisedSamplingIntervalSec_get
    if _newclass:revisedSamplingIntervalSec = _swig_property(_results.CreateMonitoredEventsResultTarget_revisedSamplingIntervalSec_get, _results.CreateMonitoredEventsResultTarget_revisedSamplingIntervalSec_set)
    __swig_setmethods__["revisedQueueSize"] = _results.CreateMonitoredEventsResultTarget_revisedQueueSize_set
    __swig_getmethods__["revisedQueueSize"] = _results.CreateMonitoredEventsResultTarget_revisedQueueSize_get
    if _newclass:revisedQueueSize = _swig_property(_results.CreateMonitoredEventsResultTarget_revisedQueueSize_get, _results.CreateMonitoredEventsResultTarget_revisedQueueSize_set)
    def __str__(self, indent="", colon=32): return _results.CreateMonitoredEventsResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.CreateMonitoredEventsResultTarget___repr__(self)
    def __eq__(self, *args): return _results.CreateMonitoredEventsResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.CreateMonitoredEventsResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.CreateMonitoredEventsResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.CreateMonitoredEventsResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.CreateMonitoredEventsResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.CreateMonitoredEventsResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_CreateMonitoredEventsResultTarget
    __del__ = lambda self : None;
CreateMonitoredEventsResultTarget_swigregister = _results.CreateMonitoredEventsResultTarget_swigregister
CreateMonitoredEventsResultTarget_swigregister(CreateMonitoredEventsResultTarget)

class CreateMonitoredEventsResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.CreateMonitoredEventsResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.CreateMonitoredEventsResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.CreateMonitoredEventsResultTargetVector___bool__(self)
    def __len__(self): return _results.CreateMonitoredEventsResultTargetVector___len__(self)
    def pop(self): return _results.CreateMonitoredEventsResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.CreateMonitoredEventsResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.CreateMonitoredEventsResultTargetVector_append(self, *args)
    def empty(self): return _results.CreateMonitoredEventsResultTargetVector_empty(self)
    def size(self): return _results.CreateMonitoredEventsResultTargetVector_size(self)
    def clear(self): return _results.CreateMonitoredEventsResultTargetVector_clear(self)
    def swap(self, *args): return _results.CreateMonitoredEventsResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.CreateMonitoredEventsResultTargetVector_get_allocator(self)
    def begin(self): return _results.CreateMonitoredEventsResultTargetVector_begin(self)
    def end(self): return _results.CreateMonitoredEventsResultTargetVector_end(self)
    def rbegin(self): return _results.CreateMonitoredEventsResultTargetVector_rbegin(self)
    def rend(self): return _results.CreateMonitoredEventsResultTargetVector_rend(self)
    def pop_back(self): return _results.CreateMonitoredEventsResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.CreateMonitoredEventsResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_CreateMonitoredEventsResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.CreateMonitoredEventsResultTargetVector_push_back(self, *args)
    def front(self): return _results.CreateMonitoredEventsResultTargetVector_front(self)
    def back(self): return _results.CreateMonitoredEventsResultTargetVector_back(self)
    def assign(self, *args): return _results.CreateMonitoredEventsResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.CreateMonitoredEventsResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.CreateMonitoredEventsResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.CreateMonitoredEventsResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.CreateMonitoredEventsResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_CreateMonitoredEventsResultTargetVector
    __del__ = lambda self : None;
CreateMonitoredEventsResultTargetVector_swigregister = _results.CreateMonitoredEventsResultTargetVector_swigregister
CreateMonitoredEventsResultTargetVector_swigregister(CreateMonitoredEventsResultTargetVector)

class MethodCallResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallResultTarget, name)
    __swig_setmethods__["status"] = _results.MethodCallResultTarget_status_set
    __swig_getmethods__["status"] = _results.MethodCallResultTarget_status_get
    if _newclass:status = _swig_property(_results.MethodCallResultTarget_status_get, _results.MethodCallResultTarget_status_set)
    __swig_setmethods__["outputArguments"] = _results.MethodCallResultTarget_outputArguments_set
    __swig_getmethods__["outputArguments"] = _results.MethodCallResultTarget_outputArguments_get
    if _newclass:outputArguments = _swig_property(_results.MethodCallResultTarget_outputArguments_get, _results.MethodCallResultTarget_outputArguments_set)
    __swig_setmethods__["inputArgumentStatuses"] = _results.MethodCallResultTarget_inputArgumentStatuses_set
    __swig_getmethods__["inputArgumentStatuses"] = _results.MethodCallResultTarget_inputArgumentStatuses_get
    if _newclass:inputArgumentStatuses = _swig_property(_results.MethodCallResultTarget_inputArgumentStatuses_get, _results.MethodCallResultTarget_inputArgumentStatuses_set)
    def __str__(self, indent="", colon=23): return _results.MethodCallResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.MethodCallResultTarget___repr__(self)
    def __eq__(self, *args): return _results.MethodCallResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.MethodCallResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.MethodCallResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.MethodCallResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.MethodCallResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.MethodCallResultTarget___le__(self, *args)
    def __init__(self): 
        this = _results.new_MethodCallResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_MethodCallResultTarget
    __del__ = lambda self : None;
MethodCallResultTarget_swigregister = _results.MethodCallResultTarget_swigregister
MethodCallResultTarget_swigregister(MethodCallResultTarget)

class MethodCallResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.MethodCallResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.MethodCallResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.MethodCallResultTargetVector___bool__(self)
    def __len__(self): return _results.MethodCallResultTargetVector___len__(self)
    def pop(self): return _results.MethodCallResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.MethodCallResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.MethodCallResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.MethodCallResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.MethodCallResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.MethodCallResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.MethodCallResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.MethodCallResultTargetVector_append(self, *args)
    def empty(self): return _results.MethodCallResultTargetVector_empty(self)
    def size(self): return _results.MethodCallResultTargetVector_size(self)
    def clear(self): return _results.MethodCallResultTargetVector_clear(self)
    def swap(self, *args): return _results.MethodCallResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.MethodCallResultTargetVector_get_allocator(self)
    def begin(self): return _results.MethodCallResultTargetVector_begin(self)
    def end(self): return _results.MethodCallResultTargetVector_end(self)
    def rbegin(self): return _results.MethodCallResultTargetVector_rbegin(self)
    def rend(self): return _results.MethodCallResultTargetVector_rend(self)
    def pop_back(self): return _results.MethodCallResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.MethodCallResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_MethodCallResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.MethodCallResultTargetVector_push_back(self, *args)
    def front(self): return _results.MethodCallResultTargetVector_front(self)
    def back(self): return _results.MethodCallResultTargetVector_back(self)
    def assign(self, *args): return _results.MethodCallResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.MethodCallResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.MethodCallResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.MethodCallResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.MethodCallResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_MethodCallResultTargetVector
    __del__ = lambda self : None;
MethodCallResultTargetVector_swigregister = _results.MethodCallResultTargetVector_swigregister
MethodCallResultTargetVector_swigregister(MethodCallResultTargetVector)

class ReadResultTarget(BaseSessionResultTarget,pyuaf.util.DataValue):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget,pyuaf.util.DataValue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget,pyuaf.util.DataValue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadResultTarget, name)
    def __init__(self): 
        this = _results.new_ReadResultTarget()
        try: self.this.append(this)
        except: self.this = this
    def __str__(self, indent="", colon=22): return _results.ReadResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.ReadResultTarget___repr__(self)
    def __eq__(self, *args): return _results.ReadResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.ReadResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.ReadResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.ReadResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.ReadResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.ReadResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_ReadResultTarget
    __del__ = lambda self : None;
ReadResultTarget_swigregister = _results.ReadResultTarget_swigregister
ReadResultTarget_swigregister(ReadResultTarget)

class ReadResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.ReadResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.ReadResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.ReadResultTargetVector___bool__(self)
    def __len__(self): return _results.ReadResultTargetVector___len__(self)
    def pop(self): return _results.ReadResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.ReadResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.ReadResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.ReadResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.ReadResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.ReadResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.ReadResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.ReadResultTargetVector_append(self, *args)
    def empty(self): return _results.ReadResultTargetVector_empty(self)
    def size(self): return _results.ReadResultTargetVector_size(self)
    def clear(self): return _results.ReadResultTargetVector_clear(self)
    def swap(self, *args): return _results.ReadResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.ReadResultTargetVector_get_allocator(self)
    def begin(self): return _results.ReadResultTargetVector_begin(self)
    def end(self): return _results.ReadResultTargetVector_end(self)
    def rbegin(self): return _results.ReadResultTargetVector_rbegin(self)
    def rend(self): return _results.ReadResultTargetVector_rend(self)
    def pop_back(self): return _results.ReadResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.ReadResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_ReadResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.ReadResultTargetVector_push_back(self, *args)
    def front(self): return _results.ReadResultTargetVector_front(self)
    def back(self): return _results.ReadResultTargetVector_back(self)
    def assign(self, *args): return _results.ReadResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.ReadResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.ReadResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.ReadResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.ReadResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_ReadResultTargetVector
    __del__ = lambda self : None;
ReadResultTargetVector_swigregister = _results.ReadResultTargetVector_swigregister
ReadResultTargetVector_swigregister(ReadResultTargetVector)

class TranslateBrowsePathsToNodeIdsResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsResultTarget, name)
    def __init__(self): 
        this = _results.new_TranslateBrowsePathsToNodeIdsResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_status_set
    __swig_getmethods__["status"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_status_get
    if _newclass:status = _swig_property(_results.TranslateBrowsePathsToNodeIdsResultTarget_status_get, _results.TranslateBrowsePathsToNodeIdsResultTarget_status_set)
    __swig_setmethods__["expandedNodeIds"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_expandedNodeIds_set
    __swig_getmethods__["expandedNodeIds"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_expandedNodeIds_get
    if _newclass:expandedNodeIds = _swig_property(_results.TranslateBrowsePathsToNodeIdsResultTarget_expandedNodeIds_get, _results.TranslateBrowsePathsToNodeIdsResultTarget_expandedNodeIds_set)
    __swig_setmethods__["remainingPathIndexes"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_remainingPathIndexes_set
    __swig_getmethods__["remainingPathIndexes"] = _results.TranslateBrowsePathsToNodeIdsResultTarget_remainingPathIndexes_get
    if _newclass:remainingPathIndexes = _swig_property(_results.TranslateBrowsePathsToNodeIdsResultTarget_remainingPathIndexes_get, _results.TranslateBrowsePathsToNodeIdsResultTarget_remainingPathIndexes_set)
    def __str__(self, indent="", colon=29): return _results.TranslateBrowsePathsToNodeIdsResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.TranslateBrowsePathsToNodeIdsResultTarget___repr__(self)
    def __eq__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_TranslateBrowsePathsToNodeIdsResultTarget
    __del__ = lambda self : None;
TranslateBrowsePathsToNodeIdsResultTarget_swigregister = _results.TranslateBrowsePathsToNodeIdsResultTarget_swigregister
TranslateBrowsePathsToNodeIdsResultTarget_swigregister(TranslateBrowsePathsToNodeIdsResultTarget)

class TranslateBrowsePathsToNodeIdsResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___bool__(self)
    def __len__(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___len__(self)
    def pop(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_append(self, *args)
    def empty(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_empty(self)
    def size(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_size(self)
    def clear(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_clear(self)
    def swap(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_get_allocator(self)
    def begin(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_begin(self)
    def end(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_end(self)
    def rbegin(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_rbegin(self)
    def rend(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_rend(self)
    def pop_back(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_TranslateBrowsePathsToNodeIdsResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_push_back(self, *args)
    def front(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_front(self)
    def back(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_back(self)
    def assign(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.TranslateBrowsePathsToNodeIdsResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_TranslateBrowsePathsToNodeIdsResultTargetVector
    __del__ = lambda self : None;
TranslateBrowsePathsToNodeIdsResultTargetVector_swigregister = _results.TranslateBrowsePathsToNodeIdsResultTargetVector_swigregister
TranslateBrowsePathsToNodeIdsResultTargetVector_swigregister(TranslateBrowsePathsToNodeIdsResultTargetVector)

class WriteResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WriteResultTarget, name)
    def __init__(self): 
        this = _results.new_WriteResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.WriteResultTarget_status_set
    __swig_getmethods__["status"] = _results.WriteResultTarget_status_get
    if _newclass:status = _swig_property(_results.WriteResultTarget_status_get, _results.WriteResultTarget_status_set)
    def __str__(self, indent="", colon=10): return _results.WriteResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.WriteResultTarget___repr__(self)
    def __eq__(self, *args): return _results.WriteResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.WriteResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.WriteResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.WriteResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.WriteResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.WriteResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_WriteResultTarget
    __del__ = lambda self : None;
WriteResultTarget_swigregister = _results.WriteResultTarget_swigregister
WriteResultTarget_swigregister(WriteResultTarget)

class WriteResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.WriteResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.WriteResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.WriteResultTargetVector___bool__(self)
    def __len__(self): return _results.WriteResultTargetVector___len__(self)
    def pop(self): return _results.WriteResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.WriteResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.WriteResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.WriteResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.WriteResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.WriteResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.WriteResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.WriteResultTargetVector_append(self, *args)
    def empty(self): return _results.WriteResultTargetVector_empty(self)
    def size(self): return _results.WriteResultTargetVector_size(self)
    def clear(self): return _results.WriteResultTargetVector_clear(self)
    def swap(self, *args): return _results.WriteResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.WriteResultTargetVector_get_allocator(self)
    def begin(self): return _results.WriteResultTargetVector_begin(self)
    def end(self): return _results.WriteResultTargetVector_end(self)
    def rbegin(self): return _results.WriteResultTargetVector_rbegin(self)
    def rend(self): return _results.WriteResultTargetVector_rend(self)
    def pop_back(self): return _results.WriteResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.WriteResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_WriteResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.WriteResultTargetVector_push_back(self, *args)
    def front(self): return _results.WriteResultTargetVector_front(self)
    def back(self): return _results.WriteResultTargetVector_back(self)
    def assign(self, *args): return _results.WriteResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.WriteResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.WriteResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.WriteResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.WriteResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_WriteResultTargetVector
    __del__ = lambda self : None;
WriteResultTargetVector_swigregister = _results.WriteResultTargetVector_swigregister
WriteResultTargetVector_swigregister(WriteResultTargetVector)

class HistoryReadRawModifiedResultTarget(BaseSessionResultTarget):
    __swig_setmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedResultTarget, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSessionResultTarget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedResultTarget, name)
    def __init__(self): 
        this = _results.new_HistoryReadRawModifiedResultTarget()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["status"] = _results.HistoryReadRawModifiedResultTarget_status_set
    __swig_getmethods__["status"] = _results.HistoryReadRawModifiedResultTarget_status_get
    if _newclass:status = _swig_property(_results.HistoryReadRawModifiedResultTarget_status_get, _results.HistoryReadRawModifiedResultTarget_status_set)
    __swig_setmethods__["continuationPoint"] = _results.HistoryReadRawModifiedResultTarget_continuationPoint_set
    __swig_getmethods__["continuationPoint"] = _results.HistoryReadRawModifiedResultTarget_continuationPoint_get
    if _newclass:continuationPoint = _swig_property(_results.HistoryReadRawModifiedResultTarget_continuationPoint_get, _results.HistoryReadRawModifiedResultTarget_continuationPoint_set)
    __swig_setmethods__["autoReadMore"] = _results.HistoryReadRawModifiedResultTarget_autoReadMore_set
    __swig_getmethods__["autoReadMore"] = _results.HistoryReadRawModifiedResultTarget_autoReadMore_get
    if _newclass:autoReadMore = _swig_property(_results.HistoryReadRawModifiedResultTarget_autoReadMore_get, _results.HistoryReadRawModifiedResultTarget_autoReadMore_set)
    __swig_setmethods__["dataValues"] = _results.HistoryReadRawModifiedResultTarget_dataValues_set
    __swig_getmethods__["dataValues"] = _results.HistoryReadRawModifiedResultTarget_dataValues_get
    if _newclass:dataValues = _swig_property(_results.HistoryReadRawModifiedResultTarget_dataValues_get, _results.HistoryReadRawModifiedResultTarget_dataValues_set)
    __swig_setmethods__["modificationInfos"] = _results.HistoryReadRawModifiedResultTarget_modificationInfos_set
    __swig_getmethods__["modificationInfos"] = _results.HistoryReadRawModifiedResultTarget_modificationInfos_get
    if _newclass:modificationInfos = _swig_property(_results.HistoryReadRawModifiedResultTarget_modificationInfos_get, _results.HistoryReadRawModifiedResultTarget_modificationInfos_set)
    def __str__(self, indent="", colon=22): return _results.HistoryReadRawModifiedResultTarget___str__(self, indent, colon)
    def __repr__(self): return _results.HistoryReadRawModifiedResultTarget___repr__(self)
    def __eq__(self, *args): return _results.HistoryReadRawModifiedResultTarget___eq__(self, *args)
    def __ne__(self, *args): return _results.HistoryReadRawModifiedResultTarget___ne__(self, *args)
    def __lt__(self, *args): return _results.HistoryReadRawModifiedResultTarget___lt__(self, *args)
    def __gt__(self, *args): return _results.HistoryReadRawModifiedResultTarget___gt__(self, *args)
    def __ge__(self, *args): return _results.HistoryReadRawModifiedResultTarget___ge__(self, *args)
    def __le__(self, *args): return _results.HistoryReadRawModifiedResultTarget___le__(self, *args)
    __swig_destroy__ = _results.delete_HistoryReadRawModifiedResultTarget
    __del__ = lambda self : None;
HistoryReadRawModifiedResultTarget_swigregister = _results.HistoryReadRawModifiedResultTarget_swigregister
HistoryReadRawModifiedResultTarget_swigregister(HistoryReadRawModifiedResultTarget)

class HistoryReadRawModifiedResultTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedResultTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedResultTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _results.HistoryReadRawModifiedResultTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _results.HistoryReadRawModifiedResultTargetVector___nonzero__(self)
    def __bool__(self): return _results.HistoryReadRawModifiedResultTargetVector___bool__(self)
    def __len__(self): return _results.HistoryReadRawModifiedResultTargetVector___len__(self)
    def pop(self): return _results.HistoryReadRawModifiedResultTargetVector_pop(self)
    def __getslice__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___getslice__(self, *args)
    def __setslice__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___setslice__(self, *args)
    def __delslice__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___delslice__(self, *args)
    def __delitem__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___delitem__(self, *args)
    def __getitem__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___getitem__(self, *args)
    def __setitem__(self, *args): return _results.HistoryReadRawModifiedResultTargetVector___setitem__(self, *args)
    def append(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_append(self, *args)
    def empty(self): return _results.HistoryReadRawModifiedResultTargetVector_empty(self)
    def size(self): return _results.HistoryReadRawModifiedResultTargetVector_size(self)
    def clear(self): return _results.HistoryReadRawModifiedResultTargetVector_clear(self)
    def swap(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_swap(self, *args)
    def get_allocator(self): return _results.HistoryReadRawModifiedResultTargetVector_get_allocator(self)
    def begin(self): return _results.HistoryReadRawModifiedResultTargetVector_begin(self)
    def end(self): return _results.HistoryReadRawModifiedResultTargetVector_end(self)
    def rbegin(self): return _results.HistoryReadRawModifiedResultTargetVector_rbegin(self)
    def rend(self): return _results.HistoryReadRawModifiedResultTargetVector_rend(self)
    def pop_back(self): return _results.HistoryReadRawModifiedResultTargetVector_pop_back(self)
    def erase(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _results.new_HistoryReadRawModifiedResultTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_push_back(self, *args)
    def front(self): return _results.HistoryReadRawModifiedResultTargetVector_front(self)
    def back(self): return _results.HistoryReadRawModifiedResultTargetVector_back(self)
    def assign(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_assign(self, *args)
    def resize(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_resize(self, *args)
    def insert(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_insert(self, *args)
    def reserve(self, *args): return _results.HistoryReadRawModifiedResultTargetVector_reserve(self, *args)
    def capacity(self): return _results.HistoryReadRawModifiedResultTargetVector_capacity(self)
    __swig_destroy__ = _results.delete_HistoryReadRawModifiedResultTargetVector
    __del__ = lambda self : None;
HistoryReadRawModifiedResultTargetVector_swigregister = _results.HistoryReadRawModifiedResultTargetVector_swigregister
HistoryReadRawModifiedResultTargetVector_swigregister(HistoryReadRawModifiedResultTargetVector)

class ReadResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.ReadResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.ReadResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.ReadResult_requestHandle_get, _results.ReadResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.ReadResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.ReadResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.ReadResult_overallStatus_get, _results.ReadResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.ReadResult_targets_set
    __swig_getmethods__["targets"] = _results.ReadResult_targets_get
    if _newclass:targets = _swig_property(_results.ReadResult_targets_get, _results.ReadResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.ReadResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_ReadResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_ReadResult
    __del__ = lambda self : None;
ReadResult_swigregister = _results.ReadResult_swigregister
ReadResult_swigregister(ReadResult)

class WriteResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WriteResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WriteResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.WriteResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.WriteResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.WriteResult_requestHandle_get, _results.WriteResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.WriteResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.WriteResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.WriteResult_overallStatus_get, _results.WriteResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.WriteResult_targets_set
    __swig_getmethods__["targets"] = _results.WriteResult_targets_get
    if _newclass:targets = _swig_property(_results.WriteResult_targets_get, _results.WriteResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.WriteResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_WriteResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_WriteResult
    __del__ = lambda self : None;
WriteResult_swigregister = _results.WriteResult_swigregister
WriteResult_swigregister(WriteResult)

class MethodCallResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodCallResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodCallResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.MethodCallResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.MethodCallResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.MethodCallResult_requestHandle_get, _results.MethodCallResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.MethodCallResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.MethodCallResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.MethodCallResult_overallStatus_get, _results.MethodCallResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.MethodCallResult_targets_set
    __swig_getmethods__["targets"] = _results.MethodCallResult_targets_get
    if _newclass:targets = _swig_property(_results.MethodCallResult_targets_get, _results.MethodCallResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.MethodCallResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_MethodCallResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_MethodCallResult
    __del__ = lambda self : None;
MethodCallResult_swigregister = _results.MethodCallResult_swigregister
MethodCallResult_swigregister(MethodCallResult)

class TranslateBrowsePathsToNodeIdsResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateBrowsePathsToNodeIdsResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateBrowsePathsToNodeIdsResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.TranslateBrowsePathsToNodeIdsResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.TranslateBrowsePathsToNodeIdsResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.TranslateBrowsePathsToNodeIdsResult_requestHandle_get, _results.TranslateBrowsePathsToNodeIdsResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.TranslateBrowsePathsToNodeIdsResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.TranslateBrowsePathsToNodeIdsResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.TranslateBrowsePathsToNodeIdsResult_overallStatus_get, _results.TranslateBrowsePathsToNodeIdsResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.TranslateBrowsePathsToNodeIdsResult_targets_set
    __swig_getmethods__["targets"] = _results.TranslateBrowsePathsToNodeIdsResult_targets_get
    if _newclass:targets = _swig_property(_results.TranslateBrowsePathsToNodeIdsResult_targets_get, _results.TranslateBrowsePathsToNodeIdsResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.TranslateBrowsePathsToNodeIdsResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_TranslateBrowsePathsToNodeIdsResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_TranslateBrowsePathsToNodeIdsResult
    __del__ = lambda self : None;
TranslateBrowsePathsToNodeIdsResult_swigregister = _results.TranslateBrowsePathsToNodeIdsResult_swigregister
TranslateBrowsePathsToNodeIdsResult_swigregister(TranslateBrowsePathsToNodeIdsResult)

class BrowseResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BrowseResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BrowseResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BrowseResult_requestHandle_get, _results.BrowseResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BrowseResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BrowseResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BrowseResult_overallStatus_get, _results.BrowseResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BrowseResult_targets_set
    __swig_getmethods__["targets"] = _results.BrowseResult_targets_get
    if _newclass:targets = _swig_property(_results.BrowseResult_targets_get, _results.BrowseResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BrowseResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BrowseResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BrowseResult
    __del__ = lambda self : None;
BrowseResult_swigregister = _results.BrowseResult_swigregister
BrowseResult_swigregister(BrowseResult)

class BrowseNextResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrowseNextResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrowseNextResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BrowseNextResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BrowseNextResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BrowseNextResult_requestHandle_get, _results.BrowseNextResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BrowseNextResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BrowseNextResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BrowseNextResult_overallStatus_get, _results.BrowseNextResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BrowseNextResult_targets_set
    __swig_getmethods__["targets"] = _results.BrowseNextResult_targets_get
    if _newclass:targets = _swig_property(_results.BrowseNextResult_targets_get, _results.BrowseNextResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BrowseNextResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BrowseNextResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BrowseNextResult
    __del__ = lambda self : None;
BrowseNextResult_swigregister = _results.BrowseNextResult_swigregister
BrowseNextResult_swigregister(BrowseNextResult)

class HistoryReadRawModifiedResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryReadRawModifiedResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryReadRawModifiedResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.HistoryReadRawModifiedResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.HistoryReadRawModifiedResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.HistoryReadRawModifiedResult_requestHandle_get, _results.HistoryReadRawModifiedResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.HistoryReadRawModifiedResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.HistoryReadRawModifiedResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.HistoryReadRawModifiedResult_overallStatus_get, _results.HistoryReadRawModifiedResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.HistoryReadRawModifiedResult_targets_set
    __swig_getmethods__["targets"] = _results.HistoryReadRawModifiedResult_targets_get
    if _newclass:targets = _swig_property(_results.HistoryReadRawModifiedResult_targets_get, _results.HistoryReadRawModifiedResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.HistoryReadRawModifiedResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_HistoryReadRawModifiedResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_HistoryReadRawModifiedResult
    __del__ = lambda self : None;
HistoryReadRawModifiedResult_swigregister = _results.HistoryReadRawModifiedResult_swigregister
HistoryReadRawModifiedResult_swigregister(HistoryReadRawModifiedResult)

class AsyncReadResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncReadResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncReadResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.AsyncReadResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.AsyncReadResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.AsyncReadResult_requestHandle_get, _results.AsyncReadResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.AsyncReadResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.AsyncReadResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.AsyncReadResult_overallStatus_get, _results.AsyncReadResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.AsyncReadResult_targets_set
    __swig_getmethods__["targets"] = _results.AsyncReadResult_targets_get
    if _newclass:targets = _swig_property(_results.AsyncReadResult_targets_get, _results.AsyncReadResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.AsyncReadResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_AsyncReadResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncReadResult
    __del__ = lambda self : None;
AsyncReadResult_swigregister = _results.AsyncReadResult_swigregister
AsyncReadResult_swigregister(AsyncReadResult)

class AsyncWriteResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncWriteResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncWriteResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.AsyncWriteResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.AsyncWriteResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.AsyncWriteResult_requestHandle_get, _results.AsyncWriteResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.AsyncWriteResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.AsyncWriteResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.AsyncWriteResult_overallStatus_get, _results.AsyncWriteResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.AsyncWriteResult_targets_set
    __swig_getmethods__["targets"] = _results.AsyncWriteResult_targets_get
    if _newclass:targets = _swig_property(_results.AsyncWriteResult_targets_get, _results.AsyncWriteResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.AsyncWriteResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_AsyncWriteResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncWriteResult
    __del__ = lambda self : None;
AsyncWriteResult_swigregister = _results.AsyncWriteResult_swigregister
AsyncWriteResult_swigregister(AsyncWriteResult)

class AsyncMethodCallResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncMethodCallResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncMethodCallResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.AsyncMethodCallResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.AsyncMethodCallResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.AsyncMethodCallResult_requestHandle_get, _results.AsyncMethodCallResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.AsyncMethodCallResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.AsyncMethodCallResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.AsyncMethodCallResult_overallStatus_get, _results.AsyncMethodCallResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.AsyncMethodCallResult_targets_set
    __swig_getmethods__["targets"] = _results.AsyncMethodCallResult_targets_get
    if _newclass:targets = _swig_property(_results.AsyncMethodCallResult_targets_get, _results.AsyncMethodCallResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.AsyncMethodCallResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_AsyncMethodCallResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncMethodCallResult
    __del__ = lambda self : None;
AsyncMethodCallResult_swigregister = _results.AsyncMethodCallResult_swigregister
AsyncMethodCallResult_swigregister(AsyncMethodCallResult)

class BaseCreateMonitoredDataResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCreateMonitoredDataResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCreateMonitoredDataResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BaseCreateMonitoredDataResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BaseCreateMonitoredDataResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BaseCreateMonitoredDataResult_requestHandle_get, _results.BaseCreateMonitoredDataResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BaseCreateMonitoredDataResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BaseCreateMonitoredDataResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BaseCreateMonitoredDataResult_overallStatus_get, _results.BaseCreateMonitoredDataResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BaseCreateMonitoredDataResult_targets_set
    __swig_getmethods__["targets"] = _results.BaseCreateMonitoredDataResult_targets_get
    if _newclass:targets = _swig_property(_results.BaseCreateMonitoredDataResult_targets_get, _results.BaseCreateMonitoredDataResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BaseCreateMonitoredDataResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BaseCreateMonitoredDataResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BaseCreateMonitoredDataResult
    __del__ = lambda self : None;
BaseCreateMonitoredDataResult_swigregister = _results.BaseCreateMonitoredDataResult_swigregister
BaseCreateMonitoredDataResult_swigregister(BaseCreateMonitoredDataResult)

class CreateMonitoredDataResult(BaseCreateMonitoredDataResult):
    __swig_setmethods__ = {}
    for _s in [BaseCreateMonitoredDataResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredDataResult, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCreateMonitoredDataResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredDataResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _results.new_CreateMonitoredDataResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_CreateMonitoredDataResult
    __del__ = lambda self : None;
CreateMonitoredDataResult_swigregister = _results.CreateMonitoredDataResult_swigregister
CreateMonitoredDataResult_swigregister(CreateMonitoredDataResult)

class BaseCreateMonitoredEventsResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseCreateMonitoredEventsResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseCreateMonitoredEventsResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BaseCreateMonitoredEventsResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BaseCreateMonitoredEventsResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BaseCreateMonitoredEventsResult_requestHandle_get, _results.BaseCreateMonitoredEventsResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BaseCreateMonitoredEventsResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BaseCreateMonitoredEventsResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BaseCreateMonitoredEventsResult_overallStatus_get, _results.BaseCreateMonitoredEventsResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BaseCreateMonitoredEventsResult_targets_set
    __swig_getmethods__["targets"] = _results.BaseCreateMonitoredEventsResult_targets_get
    if _newclass:targets = _swig_property(_results.BaseCreateMonitoredEventsResult_targets_get, _results.BaseCreateMonitoredEventsResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BaseCreateMonitoredEventsResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BaseCreateMonitoredEventsResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BaseCreateMonitoredEventsResult
    __del__ = lambda self : None;
BaseCreateMonitoredEventsResult_swigregister = _results.BaseCreateMonitoredEventsResult_swigregister
BaseCreateMonitoredEventsResult_swigregister(BaseCreateMonitoredEventsResult)

class CreateMonitoredEventsResult(BaseCreateMonitoredEventsResult):
    __swig_setmethods__ = {}
    for _s in [BaseCreateMonitoredEventsResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreateMonitoredEventsResult, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseCreateMonitoredEventsResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreateMonitoredEventsResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _results.new_CreateMonitoredEventsResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_CreateMonitoredEventsResult
    __del__ = lambda self : None;
CreateMonitoredEventsResult_swigregister = _results.CreateMonitoredEventsResult_swigregister
CreateMonitoredEventsResult_swigregister(CreateMonitoredEventsResult)

class BaseAsyncCreateMonitoredDataResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseAsyncCreateMonitoredDataResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseAsyncCreateMonitoredDataResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BaseAsyncCreateMonitoredDataResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BaseAsyncCreateMonitoredDataResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BaseAsyncCreateMonitoredDataResult_requestHandle_get, _results.BaseAsyncCreateMonitoredDataResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BaseAsyncCreateMonitoredDataResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BaseAsyncCreateMonitoredDataResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BaseAsyncCreateMonitoredDataResult_overallStatus_get, _results.BaseAsyncCreateMonitoredDataResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BaseAsyncCreateMonitoredDataResult_targets_set
    __swig_getmethods__["targets"] = _results.BaseAsyncCreateMonitoredDataResult_targets_get
    if _newclass:targets = _swig_property(_results.BaseAsyncCreateMonitoredDataResult_targets_get, _results.BaseAsyncCreateMonitoredDataResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BaseAsyncCreateMonitoredDataResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BaseAsyncCreateMonitoredDataResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BaseAsyncCreateMonitoredDataResult
    __del__ = lambda self : None;
BaseAsyncCreateMonitoredDataResult_swigregister = _results.BaseAsyncCreateMonitoredDataResult_swigregister
BaseAsyncCreateMonitoredDataResult_swigregister(BaseAsyncCreateMonitoredDataResult)

class AsyncCreateMonitoredDataResult(AsyncReadResult):
    __swig_setmethods__ = {}
    for _s in [AsyncReadResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncCreateMonitoredDataResult, name, value)
    __swig_getmethods__ = {}
    for _s in [AsyncReadResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncCreateMonitoredDataResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _results.new_AsyncCreateMonitoredDataResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncCreateMonitoredDataResult
    __del__ = lambda self : None;
AsyncCreateMonitoredDataResult_swigregister = _results.AsyncCreateMonitoredDataResult_swigregister
AsyncCreateMonitoredDataResult_swigregister(AsyncCreateMonitoredDataResult)

class BaseAsyncCreateMonitoredEventsResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseAsyncCreateMonitoredEventsResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseAsyncCreateMonitoredEventsResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestHandle"] = _results.BaseAsyncCreateMonitoredEventsResult_requestHandle_set
    __swig_getmethods__["requestHandle"] = _results.BaseAsyncCreateMonitoredEventsResult_requestHandle_get
    if _newclass:requestHandle = _swig_property(_results.BaseAsyncCreateMonitoredEventsResult_requestHandle_get, _results.BaseAsyncCreateMonitoredEventsResult_requestHandle_set)
    __swig_setmethods__["overallStatus"] = _results.BaseAsyncCreateMonitoredEventsResult_overallStatus_set
    __swig_getmethods__["overallStatus"] = _results.BaseAsyncCreateMonitoredEventsResult_overallStatus_get
    if _newclass:overallStatus = _swig_property(_results.BaseAsyncCreateMonitoredEventsResult_overallStatus_get, _results.BaseAsyncCreateMonitoredEventsResult_overallStatus_set)
    __swig_setmethods__["targets"] = _results.BaseAsyncCreateMonitoredEventsResult_targets_set
    __swig_getmethods__["targets"] = _results.BaseAsyncCreateMonitoredEventsResult_targets_get
    if _newclass:targets = _swig_property(_results.BaseAsyncCreateMonitoredEventsResult_targets_get, _results.BaseAsyncCreateMonitoredEventsResult_targets_set)
    def __str__(self, indent="", colon=32): return _results.BaseAsyncCreateMonitoredEventsResult___str__(self, indent, colon)
    def __init__(self, *args): 
        this = _results.new_BaseAsyncCreateMonitoredEventsResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_BaseAsyncCreateMonitoredEventsResult
    __del__ = lambda self : None;
BaseAsyncCreateMonitoredEventsResult_swigregister = _results.BaseAsyncCreateMonitoredEventsResult_swigregister
BaseAsyncCreateMonitoredEventsResult_swigregister(BaseAsyncCreateMonitoredEventsResult)

class AsyncCreateMonitoredEventsResult(AsyncReadResult):
    __swig_setmethods__ = {}
    for _s in [AsyncReadResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncCreateMonitoredEventsResult, name, value)
    __swig_getmethods__ = {}
    for _s in [AsyncReadResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncCreateMonitoredEventsResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _results.new_AsyncCreateMonitoredEventsResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _results.delete_AsyncCreateMonitoredEventsResult
    __del__ = lambda self : None;
AsyncCreateMonitoredEventsResult_swigregister = _results.AsyncCreateMonitoredEventsResult_swigregister
AsyncCreateMonitoredEventsResult_swigregister(AsyncCreateMonitoredEventsResult)

# This file is compatible with both classic and new-style classes.


